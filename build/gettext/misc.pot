# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the npm-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: npm-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-10 15:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/misc/coding-style.rst:4
msgid "coding-style"
msgstr ""

#: ../../source/misc/coding-style.rst:6
msgid "npm's \"funny\" coding style"
msgstr ""

#: ../../source/misc/coding-style.rst:9
#: ../../source/misc/config.rst:9
#: ../../source/misc/developers.rst:9
#: ../../source/misc/disputes.rst:18
#: ../../source/misc/orgs.rst:9
#: ../../source/misc/registry.rst:9
#: ../../source/misc/scope.rst:9
#: ../../source/misc/scripts.rst:9
msgid "DESCRIPTION"
msgstr ""

#: ../../source/misc/coding-style.rst:11
msgid "npm’s coding style is a bit unconventional. It is not different for difference’s sake, but rather a carefully crafted style that is designed to reduce visual clutter and make bugs more apparent."
msgstr ""

#: ../../source/misc/coding-style.rst:13
msgid "If you want to contribute to npm (which is very encouraged), you should make your code conform to npm’s style."
msgstr ""

#: ../../source/misc/coding-style.rst:15
msgid "this concerns npm’s code not the specific packages that you can download from the npm registry."
msgstr ""

#: ../../source/misc/coding-style.rst:17
msgid "Line Length Keep lines shorter than 80 characters. It’s better for lines to be too short than to be too long. Break up long lists, objects, and other statements onto multiple lines."
msgstr ""

#: ../../source/misc/coding-style.rst:20
msgid "Indentation Two-spaces. Tabs are better, but they look like hell in web browsers (and on GitHub), and node uses 2 spaces, so that’s that."
msgstr ""

#: ../../source/misc/coding-style.rst:23
msgid "Configure your editor appropriately."
msgstr ""

#: ../../source/misc/coding-style.rst:25
msgid "Curly braces Curly braces belong on the same line as the thing that necessitates them."
msgstr ""

#: ../../source/misc/coding-style.rst:28
#: ../../source/misc/coding-style.rst:37
#: ../../source/misc/coding-style.rst:88
msgid "Bad:"
msgstr ""

#: ../../source/misc/coding-style.rst:30
msgid "function () { Good:"
msgstr ""

#: ../../source/misc/coding-style.rst:34
msgid "function () { If a block needs to wrap to the next line, use a curly brace. Don’t use it if it doesn’t."
msgstr ""

#: ../../source/misc/coding-style.rst:39
msgid "if (foo) { bar() } while (foo)"
msgstr ""

#: ../../source/misc/coding-style.rst:41
#: ../../source/misc/coding-style.rst:46
msgid "bar()"
msgstr ""

#: ../../source/misc/coding-style.rst:42
msgid "Good:"
msgstr ""

#: ../../source/misc/coding-style.rst:44
msgid "if (foo) bar() while (foo) {"
msgstr ""

#: ../../source/misc/coding-style.rst:47
msgid "} Semicolons Don’t use them except in four situations:"
msgstr ""

#: ../../source/misc/coding-style.rst:51
msgid "for (;;) loops. They’re actually required. null loops like: while (something) ; (But you’d better have a good reason for doing that.) case 'foo': doSomething(); break In front of a leading ( or [ at the start of the line. This prevents the expression from being interpreted as a function call or property access, respectively. Some examples of good semicolon usage:"
msgstr ""

#: ../../source/misc/coding-style.rst:57
msgid ";(x || y).doSomething() ;[a, b, c].forEach(doSomething) for (var i = 0; i < 10; i ++) {"
msgstr ""

#: ../../source/misc/coding-style.rst:62
msgid "switch (state) {"
msgstr ""

#: ../../source/misc/coding-style.rst:61
msgid "case 'begin': start(); continue case 'end': finish(); break default: throw new Error('unknown state')"
msgstr ""

#: ../../source/misc/coding-style.rst:64
msgid "} end()"
msgstr ""

#: ../../source/misc/coding-style.rst:66
msgid "} Note that starting lines with - and + also should be prefixed with a semicolon, but this is much less common."
msgstr ""

#: ../../source/misc/coding-style.rst:70
msgid "Comma First"
msgstr ""

#: ../../source/misc/coding-style.rst:72
msgid "If there is a list of things separated by commas, and it wraps across multiple lines, put the comma at the start of the next line, directly below the token that starts the list. Put the final token in the list on a line by itself. For example:"
msgstr ""

#: ../../source/misc/coding-style.rst:83
msgid "var magicWords = [ 'abracadabra'"
msgstr ""

#: ../../source/misc/coding-style.rst:75
msgid ", 'gesundheit' , 'ventrilo' ]"
msgstr ""

#: ../../source/misc/coding-style.rst:79
msgid ", spells = { 'fireball'"
msgstr ""

#: ../../source/misc/coding-style.rst:78
msgid "function () { setOnFire() }"
msgstr ""

#: ../../source/misc/coding-style.rst:79
msgid ", 'water' : function () { putOut() } }"
msgstr ""

#: ../../source/misc/coding-style.rst:81
msgid ", a = 1 , b = 'abc' , etc , somethingElse"
msgstr ""

#: ../../source/misc/coding-style.rst:85
msgid "Quotes Use single quotes for strings except to avoid escaping."
msgstr ""

#: ../../source/misc/coding-style.rst:90
msgid "var notOk = \"Just double quotes\" Good:"
msgstr ""

#: ../../source/misc/coding-style.rst:93
msgid "var ok = 'String contains \"double\" quotes' var alsoOk = \"String contains 'single' quotes or apostrophe\" Whitespace Put a single space in front of ( for anything other than a function call. Also use a single space wherever it makes things more readable."
msgstr ""

#: ../../source/misc/coding-style.rst:98
msgid "Don’t leave trailing whitespace at the end of lines. Don’t indent empty lines. Don’t use more spaces than are helpful."
msgstr ""

#: ../../source/misc/coding-style.rst:100
msgid "Functions Use named functions. They make stack traces a lot easier to read."
msgstr ""

#: ../../source/misc/coding-style.rst:103
msgid "Callbacks, Sync/async Style Use the asynchronous/non-blocking versions of things as much as possible. It might make more sense for npm to use the synchronous fs APIs, but this way, the fs and http and child process stuff all uses the same callback-passing methodology."
msgstr ""

#: ../../source/misc/coding-style.rst:106
msgid "The callback should always be the last argument in the list. Its first argument is the Error or null."
msgstr ""

#: ../../source/misc/coding-style.rst:108
msgid "Be very careful never to ever ever throw anything. It’s worse than useless. Just send the error message back as the first argument to the callback."
msgstr ""

#: ../../source/misc/coding-style.rst:110
msgid "Errors Always create a new Error object with your message. Don’t just return a string message to the callback. Stack traces are handy."
msgstr ""

#: ../../source/misc/coding-style.rst:113
msgid "Logging Logging is done using the npmlog utility."
msgstr ""

#: ../../source/misc/coding-style.rst:116
msgid "Please clean up logs when they are no longer helpful. In particular, logging the same object over and over again is not helpful. Logs should report what’s happening so that it’s easier to track down where a fault occurs."
msgstr ""

#: ../../source/misc/coding-style.rst:118
msgid "Use appropriate log levels. See npm-config and search for “loglevel”."
msgstr ""

#: ../../source/misc/coding-style.rst:120
msgid "Case, naming, etc. Use lowerCamelCase for multiword identifiers when they refer to objects, functions, methods, properties, or anything not specified in this section."
msgstr ""

#: ../../source/misc/coding-style.rst:123
msgid "Use UpperCamelCase for class names (things that you’d pass to “new”)."
msgstr ""

#: ../../source/misc/coding-style.rst:125
msgid "Use all-lower-hyphen-css-case for multiword filenames and config keys."
msgstr ""

#: ../../source/misc/coding-style.rst:127
msgid "Use named functions. They make stack traces easier to follow."
msgstr ""

#: ../../source/misc/coding-style.rst:129
msgid "Use CAPS_SNAKE_CASE for constants, things that should never change and are rarely used."
msgstr ""

#: ../../source/misc/coding-style.rst:131
msgid "Use a single uppercase letter for function names where the function would normally be anonymous, but needs to call itself recursively. It makes it clear that it’s a “throwaway” function."
msgstr ""

#: ../../source/misc/coding-style.rst:133
msgid "null, undefined, false, 0 Boolean variables and functions should always be either true or false. Don’t set it to 0 unless it’s supposed to be a number."
msgstr ""

#: ../../source/misc/coding-style.rst:136
msgid "When something is intentionally missing or removed, set it to null."
msgstr ""

#: ../../source/misc/coding-style.rst:138
msgid "Don’t set things to undefined. Reserve that value to mean “not yet set to anything.”"
msgstr ""

#: ../../source/misc/coding-style.rst:140
msgid "Boolean objects are forbidden."
msgstr ""

#: ../../source/misc/coding-style.rst:143
#: ../../source/misc/developers.rst:149
#: ../../source/misc/disputes.rst:69
#: ../../source/misc/orgs.rst:54
#: ../../source/misc/registry.rst:56
#: ../../source/misc/removal.rst:38
#: ../../source/misc/scope.rst:68
#: ../../source/misc/scripts.rst:160
msgid "SEE ALSO"
msgstr ""

#: ../../source/misc/coding-style.rst:145
#: ../../source/misc/registry.rst:61
#: ../../source/misc/scripts.rst:164
msgid ":option:`npm developers`"
msgstr ""

#: ../../source/misc/coding-style.rst:146
#: ../../source/misc/developers.rst:151
msgid ":option:`npm`"
msgstr ""

#: ../../source/misc/config.rst:4
msgid "config"
msgstr ""

#: ../../source/misc/config.rst:6
msgid "More than you probably want to know about npm configuration"
msgstr ""

#: ../../source/misc/config.rst:11
msgid "npm gets its configuration values from the following sources, sorted by priority:"
msgstr ""

#: ../../source/misc/config.rst:13
msgid "Command Line Flags Putting --foo bar on the command line sets the foo configuration parameter to \"bar\". A -- argument tells the cli parser to stop reading flags. Using --flag without specifying any value will set the value to true."
msgstr ""

#: ../../source/misc/config.rst:16
msgid "Example: --flag1 --flag2 will set both configuration parameters to true, while --flag1 --flag2 bar will set flag1 to true, and flag2 to bar. Finally, --flag1 --flag2 -- bar will set both configuration parameters to true, and the bar is taken as a command argument."
msgstr ""

#: ../../source/misc/config.rst:18
msgid "Environment Variables Any environment variables that start with npm_config_ will be interpreted as a configuration parameter. For example, putting npm_config_foo=bar in your environment will set the foo configuration parameter to bar. Any environment configurations that are not given a value will be given the value of true. Config values are case-insensitive, so NPM_CONFIG_FOO=bar will work the same. However, please note that inside npm-scripts npm will set its own environment variables and Node will prefer those lowercase versions over any uppercase ones that you might set. For details see this issue."
msgstr ""

#: ../../source/misc/config.rst:21
msgid "Notice that you need to use underscores instead of dashes, so --allow-same-version would become npm_config_allow_same_version=true."
msgstr ""

#: ../../source/misc/config.rst:23
msgid "npmrc Files The four relevant files are:"
msgstr ""

#: ../../source/misc/config.rst:26
msgid "per-project configuration file (/path/to/my/project/.npmrc) per-user configuration file (defaults to $HOME/.npmrc; configurable via CLI option --userconfig or environment variable $NPM_CONFIG_USERCONFIG) global configuration file (defaults to $PREFIX/etc/npmrc; configurable via CLI option --globalconfig or environment variable $NPM_CONFIG_GLOBALCONFIG) npm’s built-in configuration file (/path/to/npm/npmrc) See npmrc for more details."
msgstr ""

#: ../../source/misc/config.rst:33
msgid "Default Configs"
msgstr ""

#: ../../source/misc/config.rst:35
msgid "Run npm config ls -l to see a set of configuration parameters that are internal to npm, and are defaults if nothing else is specified."
msgstr ""

#: ../../source/misc/config.rst:37
msgid "Shorthands and Other CLI Niceties The following shorthands are parsed on the command-line::"
msgstr ""

#: ../../source/misc/config.rst:64
msgid "ll and la commands: ls --long If the specified configuration param resolves unambiguously to a known configuration parameter, then it is expanded to that configuration parameter. For example:"
msgstr ""

#: ../../source/misc/config.rst:67
msgid "npm ls --par # same as: npm ls --parseable If multiple single-character shorthands are strung together, and the resulting combination is unambiguously not some other configuration param, then it is expanded to its various component pieces. For example:"
msgstr ""

#: ../../source/misc/config.rst:72
msgid "npm ls -gpld # same as: npm ls --global --parseable --long --loglevel info Per-Package Config Settings When running scripts (see npm-scripts) the package.json “config” keys are overwritten in the environment if there is a config param of <name>[@<version>]:<key>. For example, if the package.json has this:"
msgstr ""

#: ../../source/misc/config.rst:78
#: ../../source/misc/scripts.rst:97
msgid "{ \"name\" : \"foo\" , \"config\" : { \"port\" : \"8080\" } , \"scripts\" : { \"start\" : \"node server.js\" } } and the server.js is this:"
msgstr ""

#: ../../source/misc/config.rst:83
#: ../../source/misc/scripts.rst:102
msgid "http.createServer(...).listen(process.env.npm_package_config_port) then the user could change the behavior by doing:"
msgstr ""

#: ../../source/misc/config.rst:86
msgid "npm config set foo:port 80 See package.json for more information."
msgstr ""

#: ../../source/misc/config.rst:89
msgid "Config Settings access Default: restricted Type: Access When publishing scoped packages, the access level defaults to restricted. If you want your scoped package to be publicly viewable (and installable) set --access=public. The only valid values for access are public and restricted. Unscoped packages always have an access level of public."
msgstr ""

#: ../../source/misc/config.rst:95
msgid "allow-same-version Default: false Type: Boolean Prevents throwing an error when npm version is used to set the new version to the same value as the current version."
msgstr ""

#: ../../source/misc/config.rst:100
msgid "always-auth Default: false Type: Boolean Force npm to always require authentication when accessing the registry, even for GET requests."
msgstr ""

#: ../../source/misc/config.rst:105
msgid "also Default: null Type: String When “dev” or “development” and running local npm shrinkwrap, npm outdated, or npm update, is an alias for --dev."
msgstr ""

#: ../../source/misc/config.rst:110
msgid "audit Default: true Type: Boolean When “true” submit audit reports alongside npm install runs to the default registry and all registries configured for scopes. See the documentation for npm-audit for details on what is submitted."
msgstr ""

#: ../../source/misc/config.rst:115
msgid "audit-level Default: \"low\" Type: 'low', 'moderate', 'high', 'critical' The minimum level of vulnerability for npm audit to exit with a non-zero exit code."
msgstr ""

#: ../../source/misc/config.rst:120
msgid "auth-type Default: 'legacy' Type: 'legacy', 'sso', 'saml', 'oauth' What authentication strategy to use with adduser/login."
msgstr ""

#: ../../source/misc/config.rst:125
msgid "before Alias: enjoy-by Default: null Type: Date If passed to npm install, will rebuild the npm tree such that only versions that were available on or before the --before time get installed. If there’s no versions available for the current set of direct dependencies, the command will error."
msgstr ""

#: ../../source/misc/config.rst:131
msgid "If the requested version is a dist-tag and the given tag does not pass the --before filter, the most recent version less than or equal to that tag will be used. For example, foo@latest might install foo@1.2 even though latest is 2.0."
msgstr ""

#: ../../source/misc/config.rst:133
msgid "bin-links Default: true Type: Boolean Tells npm to create symlinks (or .cmd shims on Windows) for package executables."
msgstr ""

#: ../../source/misc/config.rst:138
msgid "Set to false to have it not do this. This can be used to work around the fact that some file systems don’t support symlinks, even on ostensibly Unix systems."
msgstr ""

#: ../../source/misc/config.rst:140
msgid "browser Default: OS X: \"open\", Windows: \"start\", Others: \"xdg-open\" Type: String The browser that is called by the npm docs command to open websites."
msgstr ""

#: ../../source/misc/config.rst:145
msgid "ca Default: The npm CA certificate Type: String, Array or null The Certificate Authority signing certificate that is trusted for SSL connections to the registry. Values should be in PEM format (Windows calls it “Base-64 encoded X.509 (.CER)”) with newlines replaced by the string “\\n”. For example:"
msgstr ""

#: ../../source/misc/config.rst:150
msgid "ca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\" Set to null to only allow “known” registrars, or to a specific CA cert to trust only that specific signing authority."
msgstr ""

#: ../../source/misc/config.rst:153
msgid "Multiple CAs can be trusted by specifying an array of certificates:"
msgstr ""

#: ../../source/misc/config.rst:155
msgid "ca[]=\"...\" ca[]=\"...\" See also the strict-ssl config."
msgstr ""

#: ../../source/misc/config.rst:159
msgid "cafile Default: null Type: path A path to a file containing one or multiple Certificate Authority signing certificates. Similar to the ca setting, but allows for multiple CA’s, as well as for the CA information to be stored in a file on disk."
msgstr ""

#: ../../source/misc/config.rst:164
msgid "cache Default: Windows: %AppData%\\npm-cache, Posix: ~/.npm Type: path The location of npm’s cache directory. See npm-cache"
msgstr ""

#: ../../source/misc/config.rst:169
msgid "cache-lock-stale Default: 60000 (1 minute) Type: Number The number of ms before cache folder lockfiles are considered stale."
msgstr ""

#: ../../source/misc/config.rst:174
msgid "cache-lock-retries Default: 10 Type: Number Number of times to retry to acquire a lock on cache folder lockfiles."
msgstr ""

#: ../../source/misc/config.rst:179
msgid "cache-lock-wait Default: 10000 (10 seconds) Type: Number Number of ms to wait for cache lock files to expire."
msgstr ""

#: ../../source/misc/config.rst:184
msgid "cache-max Default: Infinity Type: Number DEPRECATED: This option has been deprecated in favor of --prefer-online."
msgstr ""

#: ../../source/misc/config.rst:189
msgid "--cache-max=0 is an alias for --prefer-online."
msgstr ""

#: ../../source/misc/config.rst:191
msgid "cache-min Default: 10 Type: Number DEPRECATED: This option has been deprecated in favor of --prefer-offline."
msgstr ""

#: ../../source/misc/config.rst:196
msgid "--cache-min=9999 (or bigger) is an alias for --prefer-offline."
msgstr ""

#: ../../source/misc/config.rst:198
msgid "cert Default: null Type: String A client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it “Base-64 encoded X.509 (.CER)”) with newlines replaced by the string “\\n”. For example:"
msgstr ""

#: ../../source/misc/config.rst:203
msgid "cert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\" It is not the path to a certificate file (and there is no “certfile” option)."
msgstr ""

#: ../../source/misc/config.rst:206
msgid "cidr Default: null Type: String, Array, null This is a list of CIDR address to be used when configuring limited access tokens with the npm token create command."
msgstr ""

#: ../../source/misc/config.rst:211
msgid "color Default: true Type: Boolean or \"always\" If false, never shows colors. If \"always\" then always shows colors. If true, then only prints color codes for tty file descriptors."
msgstr ""

#: ../../source/misc/config.rst:216
msgid "This option can also be changed using the environment: colors are disabled when the environment variable NO_COLOR is set to any value."
msgstr ""

#: ../../source/misc/config.rst:218
msgid "depth Default: Infinity Type: Number The depth to go when recursing directories for npm ls, npm cache ls, and npm outdated."
msgstr ""

#: ../../source/misc/config.rst:223
msgid "For npm outdated, a setting of Infinity will be treated as 0 since that gives more useful information. To show the outdated status of all packages and dependents, use a large integer value, e.g., npm outdated --depth 9999"
msgstr ""

#: ../../source/misc/config.rst:225
msgid "description Default: true Type: Boolean Show the description in npm search"
msgstr ""

#: ../../source/misc/config.rst:230
msgid "dev Default: false Type: Boolean Install dev-dependencies along with packages."
msgstr ""

#: ../../source/misc/config.rst:235
msgid "dry-run Default: false Type: Boolean Indicates that you don’t want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, install, update, dedupe, uninstall. This is NOT currently honored by some network related commands, eg dist-tags, owner, etc."
msgstr ""

#: ../../source/misc/config.rst:240
msgid "editor Default: EDITOR environment variable if set, or \"vi\" on Posix, or \"notepad\" on Windows. Type: path The command to run for npm edit or npm config edit."
msgstr ""

#: ../../source/misc/config.rst:245
msgid "engine-strict Default: false Type: Boolean If set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be compatible with the current Node.js version."
msgstr ""

#: ../../source/misc/config.rst:250
msgid "force Default: false Type: Boolean Makes various commands more forceful."
msgstr ""

#: ../../source/misc/config.rst:255
msgid "lifecycle script failure does not block progress. publishing clobbers previously published versions. skips cache when requesting from the registry. prevents checks against clobbering non-npm files. fetch-retries Default: 2 Type: Number The “retries” config for the retry module to use when fetching packages from the registry."
msgstr ""

#: ../../source/misc/config.rst:264
msgid "fetch-retry-factor Default: 10 Type: Number The “factor” config for the retry module to use when fetching packages."
msgstr ""

#: ../../source/misc/config.rst:269
msgid "fetch-retry-mintimeout Default: 10000 (10 seconds) Type: Number The “minTimeout” config for the retry module to use when fetching packages."
msgstr ""

#: ../../source/misc/config.rst:274
msgid "fetch-retry-maxtimeout Default: 60000 (1 minute) Type: Number The “maxTimeout” config for the retry module to use when fetching packages."
msgstr ""

#: ../../source/misc/config.rst:279
msgid "git Default: \"git\" Type: String The command to use for git commands. If git is installed on the computer, but is not in the PATH, then set this to the full path to the git binary."
msgstr ""

#: ../../source/misc/config.rst:284
msgid "git-tag-version Default: true Type: Boolean Tag the commit when using the npm version command."
msgstr ""

#: ../../source/misc/config.rst:289
msgid "commit-hooks Default: true Type: Boolean Run git commit hooks when using the npm version command."
msgstr ""

#: ../../source/misc/config.rst:294
msgid "global Default: false Type: Boolean Operates in “global” mode, so that packages are installed into the prefix folder instead of the current working directory. See npm-folders for more on the differences in behavior."
msgstr ""

#: ../../source/misc/config.rst:299
msgid "packages are installed into the {prefix}/lib/node_modules folder, instead of the current working directory. bin files are linked to {prefix}/bin man pages are linked to {prefix}/share/man globalconfig Default: {prefix}/etc/npmrc Type: path The config file to read for global config options."
msgstr ""

#: ../../source/misc/config.rst:307
msgid "global-style Default: false Type: Boolean Causes npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping. If used with legacy-bundling, legacy-bundling will be preferred."
msgstr ""

#: ../../source/misc/config.rst:312
msgid "group Default: GID of the current process Type: String or Number The group to use when running package scripts in global mode as the root user."
msgstr ""

#: ../../source/misc/config.rst:317
msgid "heading Default: \"npm\" Type: String The string that starts all the debugging log output."
msgstr ""

#: ../../source/misc/config.rst:322
msgid "https-proxy Default: null Type: url A proxy to use for outgoing https requests. If the HTTPS_PROXY or https_proxy or HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying request library."
msgstr ""

#: ../../source/misc/config.rst:327
msgid "if-present Default: false Type: Boolean If true, npm will not exit with an error code when run-script is invoked for a script that isn’t defined in the scripts section of package.json. This option can be used when it’s desirable to optionally run a script when it’s present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup."
msgstr ""

#: ../../source/misc/config.rst:332
msgid "ignore-prepublish Default: false Type: Boolean If true, npm will not run prepublish scripts."
msgstr ""

#: ../../source/misc/config.rst:337
msgid "ignore-scripts Default: false Type: Boolean If true, npm does not run scripts specified in package.json files."
msgstr ""

#: ../../source/misc/config.rst:342
msgid "init-module Default: ~/.npm-init.js Type: path A module that will be loaded by the npm init command. See the documentation for the init-package-json module for more information, or npm-init."
msgstr ""

#: ../../source/misc/config.rst:347
msgid "init-author-name Default: “” Type: String The value npm init should use by default for the package author’s name."
msgstr ""

#: ../../source/misc/config.rst:352
msgid "init-author-email Default: “” Type: String The value npm init should use by default for the package author’s email."
msgstr ""

#: ../../source/misc/config.rst:357
msgid "init-author-url Default: “” Type: String The value npm init should use by default for the package author’s homepage."
msgstr ""

#: ../../source/misc/config.rst:362
msgid "init-license Default: “ISC” Type: String The value npm init should use by default for the package license."
msgstr ""

#: ../../source/misc/config.rst:367
msgid "init-version Default: “1.0.0” Type: semver The value that npm init should use by default for the package version number, if not already set in package.json."
msgstr ""

#: ../../source/misc/config.rst:372
msgid "json Default: false Type: Boolean Whether or not to output JSON data, rather than the normal output."
msgstr ""

#: ../../source/misc/config.rst:377
msgid "This feature is currently experimental, and the output data structures for many commands is either not implemented in JSON yet, or subject to change. Only the output from npm ls --json and npm search --json are currently valid."
msgstr ""

#: ../../source/misc/config.rst:379
msgid "key Default: null Type: String A client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string “\\n”. For example:"
msgstr ""

#: ../../source/misc/config.rst:384
msgid "key=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\" It is not the path to a key file (and there is no “keyfile” option)."
msgstr ""

#: ../../source/misc/config.rst:387
msgid "legacy-bundling Default: false Type: Boolean Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with global-style this option will be preferred."
msgstr ""

#: ../../source/misc/config.rst:392
msgid "link Default: false Type: Boolean If true, then local installs will link if there is a suitable globally installed package."
msgstr ""

#: ../../source/misc/config.rst:397
msgid "Note that this means that local installs can cause things to be installed into the global space at the same time. The link is only done if one of the two conditions are met:"
msgstr ""

#: ../../source/misc/config.rst:399
msgid "The package is not already installed globally, or the globally installed version is identical to the version that is being installed locally. local-address Default: undefined Type: IP Address The IP address of the local interface to use when making connections to the npm registry. Must be IPv4 in versions of Node prior to 0.12."
msgstr ""

#: ../../source/misc/config.rst:406
msgid "loglevel Default: “notice” Type: String Values: “silent”, “error”, “warn”, “notice”, “http”, “timing”, “info”, “verbose”, “silly” What level of logs to report. On failure, all logs are written to npm-debug.log in the current working directory."
msgstr ""

#: ../../source/misc/config.rst:412
msgid "Any logs of a higher level than the setting are shown. The default is “notice”."
msgstr ""

#: ../../source/misc/config.rst:414
msgid "logstream Default: process.stderr Type: Stream This is the stream that is passed to the npmlog module at run time."
msgstr ""

#: ../../source/misc/config.rst:419
msgid "It cannot be set from the command line, but if you are using npm programmatically, you may wish to send logs to somewhere other than stderr."
msgstr ""

#: ../../source/misc/config.rst:421
msgid "If the color config is set to true, then this stream will receive colored output if it is a TTY."
msgstr ""

#: ../../source/misc/config.rst:423
msgid "logs-max Default: 10 Type: Number The maximum number of log files to store."
msgstr ""

#: ../../source/misc/config.rst:428
msgid "long Default: false Type: Boolean Show extended information in npm ls and npm search."
msgstr ""

#: ../../source/misc/config.rst:433
msgid "maxsockets Default: 50 Type: Number The maximum number of connections to use per origin (protocol/host/port combination). Passed to the http Agent used to make the request."
msgstr ""

#: ../../source/misc/config.rst:438
msgid "message Default: “%s” Type: String Commit message which is used by npm version when creating version commit."
msgstr ""

#: ../../source/misc/config.rst:443
msgid "Any “%s” in the message will be replaced with the version number."
msgstr ""

#: ../../source/misc/config.rst:445
msgid "metrics-registry Default: The value of registry (which defaults to “https://registry.npmjs.org/”) Type: String The registry you want to send cli metrics to if send-metrics is true."
msgstr ""

#: ../../source/misc/config.rst:450
msgid "node-options Default: null Type: String Options to pass through to Node.js via the NODE_OPTIONS environment variable. This does not impact how npm itself is executed but it does impact how lifecycle scripts are called."
msgstr ""

#: ../../source/misc/config.rst:455
msgid "node-version Default: process.version Type: semver or false The node version to use when checking a package’s engines map."
msgstr ""

#: ../../source/misc/config.rst:460
msgid "noproxy Default: null Type: String or Array A comma-separated string or an array of domain extensions that a proxy should not be used for."
msgstr ""

#: ../../source/misc/config.rst:465
msgid "offline Default: false Type: Boolean Force offline mode: no network requests will be done during install. To allow the CLI to fill in missing cache data, see --prefer-offline."
msgstr ""

#: ../../source/misc/config.rst:470
msgid "onload-script Default: false Type: path A node module to require() when npm loads. Useful for programmatic usage."
msgstr ""

#: ../../source/misc/config.rst:475
msgid "only Default: null Type: String When “dev” or “development” and running local npm install without any arguments, only devDependencies (and their dependencies) are installed."
msgstr ""

#: ../../source/misc/config.rst:480
msgid "When “dev” or “development” and running local npm ls, npm outdated, or npm update, is an alias for --dev."
msgstr ""

#: ../../source/misc/config.rst:482
msgid "When “prod” or “production” and running local npm install without any arguments, only non-devDependencies (and their dependencies) are installed."
msgstr ""

#: ../../source/misc/config.rst:484
msgid "When “prod” or “production” and running local npm ls, npm outdated, or npm update, is an alias for --production."
msgstr ""

#: ../../source/misc/config.rst:486
msgid "optional Default: true Type: Boolean Attempt to install packages in the optionalDependencies object. Note that if these packages fail to install, the overall installation process is not aborted."
msgstr ""

#: ../../source/misc/config.rst:491
msgid "otp Default: null Type: Number This is a one-time password from a two-factor authenticator. It’s needed when publishing or changing package permissions with npm access."
msgstr ""

#: ../../source/misc/config.rst:496
msgid "package-lock Default: true Type: Boolean If set to false, then ignore package-lock.json files when installing. This will also prevent writing package-lock.json if save is true."
msgstr ""

#: ../../source/misc/config.rst:501
msgid "When package package-locks are disabled, automatic pruning of extraneous modules will also be disabled. To remove extraneous modules with package-locks disabled use npm prune."
msgstr ""

#: ../../source/misc/config.rst:503
msgid "This option is an alias for --shrinkwrap."
msgstr ""

#: ../../source/misc/config.rst:505
msgid "package-lock-only Default: false Type: Boolean If set to true, it will update only the package-lock.json, instead of checking node_modules and downloading dependencies."
msgstr ""

#: ../../source/misc/config.rst:510
msgid "parseable Default: false Type: Boolean Output parseable results from commands that write to standard output. For npm search, this will be tab-separated table format."
msgstr ""

#: ../../source/misc/config.rst:515
msgid "prefer-offline Default: false Type: Boolean If true, staleness checks for cached data will be bypassed, but missing data will be requested from the server. To force full offline mode, use --offline."
msgstr ""

#: ../../source/misc/config.rst:520
msgid "This option is effectively equivalent to --cache-min=9999999."
msgstr ""

#: ../../source/misc/config.rst:522
msgid "prefer-online Default: false Type: Boolean If true, staleness checks for cached data will be forced, making the CLI look for updates immediately even for fresh package data."
msgstr ""

#: ../../source/misc/config.rst:527
msgid "prefix Default: see npm-folders Type: path The location to install global items. If set on the command line, then it forces non-global commands to run in the specified folder."
msgstr ""

#: ../../source/misc/config.rst:532
msgid "preid Default: “” Type: String The “prerelease identifier” to use as a prefix for the “prerelease” part of a semver. Like the rc in 1.2.0-rc.8."
msgstr ""

#: ../../source/misc/config.rst:537
msgid "production Default: false Type: Boolean Set to true to run in “production” mode."
msgstr ""

#: ../../source/misc/config.rst:542
msgid "devDependencies are not installed at the topmost level when running local npm install without any arguments. Set the NODE_ENV=”production” for lifecycle scripts. progress Default: true, unless TRAVIS or CI env vars set. Type: Boolean When set to true, npm will display a progress bar during time intensive operations, if process.stderr is a TTY."
msgstr ""

#: ../../source/misc/config.rst:549
msgid "Set to false to suppress the progress bar."
msgstr ""

#: ../../source/misc/config.rst:551
msgid "proxy Default: null Type: url A proxy to use for outgoing http requests. If the HTTP_PROXY or http_proxy environment variables are set, proxy settings will be honored by the underlying request library."
msgstr ""

#: ../../source/misc/config.rst:556
msgid "read-only Default: false Type: Boolean This is used to mark a token as unable to publish when configuring limited access tokens with the npm token create command."
msgstr ""

#: ../../source/misc/config.rst:561
msgid "rebuild-bundle Default: true Type: Boolean Rebuild bundled dependencies after installation."
msgstr ""

#: ../../source/misc/config.rst:566
msgid "registry Default: https://registry.npmjs.org/ Type: url The base URL of the npm package registry."
msgstr ""

#: ../../source/misc/config.rst:571
msgid "rollback Default: true Type: Boolean Remove failed installs."
msgstr ""

#: ../../source/misc/config.rst:576
msgid "save Default: true Type: Boolean Save installed packages to a package.json file as dependencies."
msgstr ""

#: ../../source/misc/config.rst:581
msgid "When used with the npm rm command, it removes it from the dependencies object."
msgstr ""

#: ../../source/misc/config.rst:583
#: ../../source/misc/config.rst:604
#: ../../source/misc/config.rst:618
msgid "Only works if there is already a package.json file present."
msgstr ""

#: ../../source/misc/config.rst:585
msgid "save-bundle Default: false Type: Boolean If a package would be saved at install time by the use of --save, --save-dev, or --save-optional, then also put it in the bundleDependencies list."
msgstr ""

#: ../../source/misc/config.rst:590
msgid "When used with the npm rm command, it removes it from the bundledDependencies list."
msgstr ""

#: ../../source/misc/config.rst:592
msgid "save-prod Default: false Type: Boolean Makes sure that a package will be saved into dependencies specifically. This is useful if a package already exists in devDependencies or optionalDependencies, but you want to move it to be a production dep. This is also the default behavior if --save is true, and neither --save-dev or --save-optional are true."
msgstr ""

#: ../../source/misc/config.rst:597
msgid "save-dev Default: false Type: Boolean Save installed packages to a package.json file as devDependencies."
msgstr ""

#: ../../source/misc/config.rst:602
#: ../../source/misc/config.rst:616
msgid "When used with the npm rm command, it removes it from the devDependencies object."
msgstr ""

#: ../../source/misc/config.rst:606
msgid "save-exact Default: false Type: Boolean Dependencies saved to package.json using --save, --save-dev or --save-optional will be configured with an exact version rather than using npm’s default semver range operator."
msgstr ""

#: ../../source/misc/config.rst:611
msgid "save-optional Default: false Type: Boolean Save installed packages to a package.json file as optionalDependencies."
msgstr ""

#: ../../source/misc/config.rst:620
msgid "save-prefix Default: ‘^’ Type: String Configure how versions of packages installed to a package.json file via --save or --save-dev get prefixed."
msgstr ""

#: ../../source/misc/config.rst:625
msgid "For example if a package has version 1.2.3, by default its version is set to ^1.2.3 which allows minor upgrades for that package, but after npm config set save-prefix='~' it would be set to ~1.2.3 which only allows patch upgrades."
msgstr ""

#: ../../source/misc/config.rst:627
msgid "scope Default: the scope of the current project, if any, or “” Type: String Associate an operation with a scope for a scoped registry. Useful when logging in to a private registry for the first time: npm login --scope=@organization --registry=registry.organization.com, which will cause @organization to be mapped to the registry for future installation of packages specified according to the pattern @organization/package."
msgstr ""

#: ../../source/misc/config.rst:632
msgid "script-shell Default: null Type: path The shell to use for scripts run with the npm run command."
msgstr ""

#: ../../source/misc/config.rst:637
msgid "scripts-prepend-node-path Default: “warn-only” Type: Boolean, \"auto\" or \"warn-only\" If set to true, add the directory in which the current node executable resides to the PATH environment variable when running scripts, even if that means that npm will invoke a different node executable than the one which it is running."
msgstr ""

#: ../../source/misc/config.rst:642
msgid "If set to false, never modify PATH with that."
msgstr ""

#: ../../source/misc/config.rst:644
msgid "If set to \"warn-only\", never modify PATH but print a warning if npm thinks that you may want to run it with true, e.g. because the node executable in the PATH is not the one npm was invoked with."
msgstr ""

#: ../../source/misc/config.rst:646
msgid "If set to auto, only add that directory to the PATH environment variable if the node executable with which npm was invoked and the one that is found first on the PATH are different."
msgstr ""

#: ../../source/misc/config.rst:648
msgid "searchexclude Default: “” Type: String Space-separated options that limit the results from search."
msgstr ""

#: ../../source/misc/config.rst:653
msgid "searchopts Default: “” Type: String Space-separated options that are always passed to search."
msgstr ""

#: ../../source/misc/config.rst:658
msgid "searchlimit Default: 20 Type: Number Number of items to limit search results to. Will not apply at all to legacy searches."
msgstr ""

#: ../../source/misc/config.rst:663
msgid "searchstaleness Default: 900 (15 minutes) Type: Number The age of the cache, in seconds, before another registry request is made if using legacy search endpoint."
msgstr ""

#: ../../source/misc/config.rst:668
msgid "send-metrics Default: false Type: Boolean If true, success/failure metrics will be reported to the registry stored in metrics-registry. These requests contain the number of successful and failing runs of the npm CLI and the time period overwhich those counts were gathered. No identifying information is included in these requests."
msgstr ""

#: ../../source/misc/config.rst:673
msgid "shell Default: SHELL environment variable, or “bash” on Posix, or “cmd” on Windows Type: path The shell to run for the npm explore command."
msgstr ""

#: ../../source/misc/config.rst:678
msgid "shrinkwrap Default: true Type: Boolean If set to false, then ignore npm-shrinkwrap.json files when installing. This will also prevent writing npm-shrinkwrap.json if save is true."
msgstr ""

#: ../../source/misc/config.rst:683
msgid "This option is an alias for --package-lock."
msgstr ""

#: ../../source/misc/config.rst:685
msgid "sign-git-commit Default: false Type: Boolean If set to true, then the npm version command will commit the new package version using -S to add a signature."
msgstr ""

#: ../../source/misc/config.rst:690
#: ../../source/misc/config.rst:697
msgid "Note that git requires you to have set up GPG keys in your git configs for this to work properly."
msgstr ""

#: ../../source/misc/config.rst:692
msgid "sign-git-tag Default: false Type: Boolean If set to true, then the npm version command will tag the version using -s to add a signature."
msgstr ""

#: ../../source/misc/config.rst:699
msgid "sso-poll-frequency Default: 500 Type: Number When used with SSO-enabled auth-types, configures how regularly the registry should be polled while the user is completing authentication."
msgstr ""

#: ../../source/misc/config.rst:704
msgid "sso-type Default: ‘oauth’ Type: ‘oauth’, ‘saml’, or null If --auth-type=sso, the type of SSO type to use."
msgstr ""

#: ../../source/misc/config.rst:709
msgid "strict-ssl Default: true Type: Boolean Whether or not to do SSL key validation when making requests to the registry via https."
msgstr ""

#: ../../source/misc/config.rst:714
msgid "See also the ca config."
msgstr ""

#: ../../source/misc/config.rst:716
msgid "tag Default: latest Type: String If you ask npm to install a package and don’t tell it a specific version, then it will install the specified tag."
msgstr ""

#: ../../source/misc/config.rst:721
msgid "Also the tag that is added to the package@version specified by the npm tag command, if no explicit tag is given."
msgstr ""

#: ../../source/misc/config.rst:723
msgid "tag-version-prefix Default: \"v\" Type: String If set, alters the prefix used when tagging a new version when performing a version increment using npm-version. To remove the prefix altogether, set it to the empty string: \"\"."
msgstr ""

#: ../../source/misc/config.rst:728
msgid "Because other tools may rely on the convention that npm version tags look like v1.0.0, only use this property if it is absolutely necessary. In particular, use care when overriding this setting for public packages."
msgstr ""

#: ../../source/misc/config.rst:730
msgid "timing Default: false Type: Boolean If true, writes an npm-debug log to _logs and timing information to _timing.json, both in your cache. _timing.json is a newline delimited list of JSON objects. You can quickly view it with this json command line: json -g < ~/.npm/_timing.json."
msgstr ""

#: ../../source/misc/config.rst:735
msgid "tmp Default: TMPDIR environment variable, or “/tmp” Type: path Where to store temporary files and folders. All temp files are deleted on success, but left behind on failure for forensic purposes."
msgstr ""

#: ../../source/misc/config.rst:740
msgid "unicode Default: false on windows, true on mac/unix systems with a unicode locale Type: Boolean When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters to draw trees."
msgstr ""

#: ../../source/misc/config.rst:745
msgid "unsafe-perm Default: false if running as root, true otherwise Type: Boolean Set to true to suppress the UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail."
msgstr ""

#: ../../source/misc/config.rst:750
msgid "update-notifier Default: true Type: Boolean Set to false to suppress the update notification when using an older version of npm than the latest."
msgstr ""

#: ../../source/misc/config.rst:755
msgid "usage Default: false Type: Boolean Set to show short usage output (like the -H output) instead of complete help when doing npm-help."
msgstr ""

#: ../../source/misc/config.rst:760
msgid "user Default: “nobody” Type: String or Number The UID to set to when running package scripts as root."
msgstr ""

#: ../../source/misc/config.rst:765
msgid "userconfig Default: ~/.npmrc Type: path The location of user-level configuration settings."
msgstr ""

#: ../../source/misc/config.rst:770
msgid "umask Default: 022 Type: Octal numeric string in range 0000..0777 (0..511) The “umask” value to use when setting the file creation mode on files and folders."
msgstr ""

#: ../../source/misc/config.rst:775
msgid "Folders and executables are given a mode which is 0777 masked against this value. Other files are given a mode which is 0666 masked against this value. Thus, the defaults are 0755 and 0644 respectively."
msgstr ""

#: ../../source/misc/config.rst:777
msgid "user-agent Default: node/{process.version} {process.platform} {process.arch} Type: String Sets a User-Agent to the request header"
msgstr ""

#: ../../source/misc/config.rst:782
msgid "version Default: false Type: boolean If true, output the npm version and exit successfully."
msgstr ""

#: ../../source/misc/config.rst:787
#: ../../source/misc/config.rst:794
msgid "Only relevant when specified explicitly on the command line."
msgstr ""

#: ../../source/misc/config.rst:789
msgid "versions Default: false Type: boolean If true, output the npm version as well as node’s process.versions map, and exit successfully."
msgstr ""

#: ../../source/misc/config.rst:796
msgid "viewer Default: “man” on Posix, “browser” on Windows Type: path The program to use to view help content."
msgstr ""

#: ../../source/misc/config.rst:801
msgid "Set to \"browser\" to view html help content in the default web browser."
msgstr ""

#: ../../source/misc/config.rst:803
msgid "SEE ALSO npm-config npmrc npm-scripts npm-folders npm"
msgstr ""

#: ../../source/misc/contents.rst:2
msgid "misc"
msgstr ""

#: ../../source/misc/developers.rst:4
msgid "developers"
msgstr ""

#: ../../source/misc/developers.rst:6
msgid "Developer Guide"
msgstr ""

#: ../../source/misc/developers.rst:11
msgid "So, you’ve decided to use npm to develop (and maybe publish/deploy) your project."
msgstr ""

#: ../../source/misc/developers.rst:13
msgid "Fantastic!"
msgstr ""

#: ../../source/misc/developers.rst:15
msgid "There are a few things that you need to do above the simple steps that your users will do to install your program."
msgstr ""

#: ../../source/misc/developers.rst:17
msgid "About These Documents These are man pages. If you install npm, you should be able to then do man npm-thing to get the documentation on a particular topic, or npm help thing to see the same information."
msgstr ""

#: ../../source/misc/developers.rst:20
msgid "What is a package A package is:"
msgstr ""

#: ../../source/misc/developers.rst:23
msgid "a folder containing a program described by a package.json file"
msgstr ""

#: ../../source/misc/developers.rst:24
msgid "a gzipped tarball containing (a)"
msgstr ""

#: ../../source/misc/developers.rst:25
msgid "a url that resolves to (b)"
msgstr ""

#: ../../source/misc/developers.rst:26
msgid "a <name>@<version> that is published on the registry with (c)"
msgstr ""

#: ../../source/misc/developers.rst:27
msgid "a <name>@<tag> that points to (d)"
msgstr ""

#: ../../source/misc/developers.rst:28
msgid "a <name> that has a “latest” tag satisfying (e)"
msgstr ""

#: ../../source/misc/developers.rst:29
msgid "g) a git url that, when cloned, results in (a). Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b)."
msgstr ""

#: ../../source/misc/developers.rst:32
msgid "Git urls can be of the form:"
msgstr ""

#: ../../source/misc/developers.rst:34
msgid "git://github.com/user/project.git#commit-ish git+ssh://user@hostname:project.git#commit-ish git+http://user@hostname/project/blah.git#commit-ish git+https://user@hostname/project/blah.git#commit-ish The commit-ish can be any tag, sha, or branch which can be supplied as an argument to git checkout. The default is master."
msgstr ""

#: ../../source/misc/developers.rst:40
msgid "The package.json File You need to have a package.json file in the root of your project to do much of anything with npm. That is basically the whole interface."
msgstr ""

#: ../../source/misc/developers.rst:43
msgid "See package.json for details about what goes in that file. At the very least, you need:"
msgstr ""

#: ../../source/misc/developers.rst:45
msgid "name: This should be a string that identifies your project. Please do not use the name to specify that it runs on node, or is in JavaScript. You can use the “engines” field to explicitly state the versions of node (or whatever else) that your program requires, and it’s pretty well assumed that it’s JavaScript."
msgstr ""

#: ../../source/misc/developers.rst:47
msgid "It does not necessarily need to match your github repository name."
msgstr ""

#: ../../source/misc/developers.rst:49
msgid "So, node-foo and bar-js are bad names. foo or bar are better."
msgstr ""

#: ../../source/misc/developers.rst:51
msgid "version: A semver-compatible version."
msgstr ""

#: ../../source/misc/developers.rst:53
msgid "engines: Specify the versions of node (or whatever else) that your program runs on. The node API changes a lot, and there may be bugs or new functionality that you depend on. Be explicit."
msgstr ""

#: ../../source/misc/developers.rst:55
msgid "author: Take some credit."
msgstr ""

#: ../../source/misc/developers.rst:57
msgid "scripts: If you have a special compilation or installation script, then you should put it in the scripts object. You should definitely have at least a basic smoke-test command as the “scripts.test” field. See npm-scripts."
msgstr ""

#: ../../source/misc/developers.rst:59
msgid "main: If you have a single module that serves as the entry point to your program (like what the “foo” package gives you at require(“foo”)), then you need to specify that in the “main” field."
msgstr ""

#: ../../source/misc/developers.rst:61
msgid "directories: This is an object mapping names to folders. The best ones to include are “lib” and “doc”, but if you use “man” to specify a folder full of man pages, they’ll get installed just like these ones."
msgstr ""

#: ../../source/misc/developers.rst:63
msgid "You can use npm init in the root of your package in order to get you started with a pretty basic package.json file. See npm-init for more info."
msgstr ""

#: ../../source/misc/developers.rst:65
msgid "Keeping files out of your package Use a .npmignore file to keep stuff out of your package. If there’s no .npmignore file, but there is a .gitignore file, then npm will ignore the stuff matched by the .gitignore file. If you want to include something that is excluded by your .gitignore file, you can create an empty .npmignore file to override it. Like git, npm looks for .npmignore and .gitignore files in all subdirectories of your package, not only the root directory."
msgstr ""

#: ../../source/misc/developers.rst:68
msgid ".npmignore files follow the same pattern rules as .gitignore files:"
msgstr ""

#: ../../source/misc/developers.rst:70
msgid "Blank lines or lines starting with # are ignored. Standard glob patterns work. You can end patterns with a forward slash / to specify a directory. You can negate a pattern by starting it with an exclamation point !. By default, the following paths and files are ignored, so there’s no need to add them to .npmignore explicitly:"
msgstr ""

#: ../../source/misc/developers.rst:76
msgid ".*.swp ._* .DS_Store .git .hg .npmrc .lock-wscript .svn .wafpickle-* config.gypi CVS npm-debug.log Additionally, everything in node_modules is ignored, except for bundled dependencies. npm automatically handles this for you, so don’t bother adding node_modules to .npmignore."
msgstr ""

#: ../../source/misc/developers.rst:90
msgid "The following paths and files are never ignored, so adding them to .npmignore is pointless:"
msgstr ""

#: ../../source/misc/developers.rst:92
msgid "package.json README (and its variants) CHANGELOG (and its variants) LICENSE / LICENCE If, given the structure of your project, you find .npmignore to be a maintenance headache, you might instead try populating the files property of package.json, which is an array of file or directory names that should be included in your package. Sometimes a whitelist is easier to manage than a blacklist."
msgstr ""

#: ../../source/misc/developers.rst:98
msgid "Testing whether your .npmignore or files config works If you want to double check that your package will include only the files you intend it to when published, you can run the npm pack command locally which will generate a tarball in the working directory, the same way it does for publishing."
msgstr ""

#: ../../source/misc/developers.rst:101
msgid "Link Packages npm link is designed to install a development package and see the changes in real time without having to keep re-installing it. (You do need to either re-link or npm rebuild -g to update compiled packages, of course.)"
msgstr ""

#: ../../source/misc/developers.rst:104
msgid "More info at npm-link."
msgstr ""

#: ../../source/misc/developers.rst:106
msgid "Before Publishing: Make Sure Your Package Installs and Works This is important."
msgstr ""

#: ../../source/misc/developers.rst:109
msgid "If you can not install it locally, you’ll have problems trying to publish it. Or, worse yet, you’ll be able to publish it, but you’ll be publishing a broken or pointless package. So don’t do that."
msgstr ""

#: ../../source/misc/developers.rst:111
msgid "In the root of your package, do this:"
msgstr ""

#: ../../source/misc/developers.rst:113
msgid "npm install . -g That’ll show you that it’s working. If you’d rather just create a symlink package that points to your working directory, then do this:"
msgstr ""

#: ../../source/misc/developers.rst:116
msgid "npm link Use npm ls -g to see if it’s there."
msgstr ""

#: ../../source/misc/developers.rst:119
msgid "To test a local install, go into some other folder, and then do:"
msgstr ""

#: ../../source/misc/developers.rst:121
msgid "cd ../some-other-folder npm install ../my-package to install it locally into the node_modules folder in that other place."
msgstr ""

#: ../../source/misc/developers.rst:125
msgid "Then go into the node-repl, and try using require(“my-thing”) to bring in your module’s main module."
msgstr ""

#: ../../source/misc/developers.rst:127
msgid "Create a User Account Create a user with the adduser command. It works like this:"
msgstr ""

#: ../../source/misc/developers.rst:130
msgid "npm adduser and then follow the prompts."
msgstr ""

#: ../../source/misc/developers.rst:133
msgid "This is documented better in npm-adduser."
msgstr ""

#: ../../source/misc/developers.rst:135
msgid "Publish your package This part’s easy. In the root of your folder, do this:"
msgstr ""

#: ../../source/misc/developers.rst:138
msgid "npm publish You can give publish a url to a tarball, or a filename of a tarball, or a path to a folder."
msgstr ""

#: ../../source/misc/developers.rst:141
msgid "Note that pretty much everything in that folder will be exposed by default. So, if you have secret stuff in there, use a .npmignore file to list out the globs to ignore, or publish from a fresh checkout."
msgstr ""

#: ../../source/misc/developers.rst:143
msgid "Brag about it Send emails, write blogs, blab in IRC."
msgstr ""

#: ../../source/misc/developers.rst:146
msgid "Tell the world how easy it is to install your program!"
msgstr ""

#: ../../source/misc/developers.rst:152
msgid ":option:`npm init`"
msgstr ""

#: ../../source/misc/developers.rst:153
#: ../../source/misc/scripts.rst:163
msgid ":ref:`package.json`"
msgstr ""

#: ../../source/misc/developers.rst:154
msgid ":option:`npm scripts`"
msgstr ""

#: ../../source/misc/developers.rst:155
#: ../../source/misc/scope.rst:71
msgid ":option:`npm publish`"
msgstr ""

#: ../../source/misc/developers.rst:156
msgid ":option:`npm adduser`"
msgstr ""

#: ../../source/misc/developers.rst:157
#: ../../source/misc/disputes.rst:71
#: ../../source/misc/scope.rst:73
msgid ":option:`npm registry`"
msgstr ""

#: ../../source/misc/disputes.rst:4
msgid "disputes"
msgstr ""

#: ../../source/misc/disputes.rst:6
msgid "Handling Module Name Disputes This document describes the steps that you should take to resolve module name disputes with other npm publishers. It also describes special steps you should take about names you think infringe your trademarks."
msgstr ""

#: ../../source/misc/disputes.rst:9
msgid "This document is a clarification of the acceptable behavior outlined in the npm Code of Conduct, and nothing in this document should be interpreted to contradict any aspect of the npm Code of Conduct."
msgstr ""

#: ../../source/misc/disputes.rst:11
msgid "TL;DR Get the author email with npm owner ls <pkgname> Email the author, CC support@npmjs.com After a few weeks, if there’s no resolution, we’ll sort it out. Don’t squat on package names. Publish code or move out of the way."
msgstr ""

#: ../../source/misc/disputes.rst:20
msgid "There sometimes arise cases where a user publishes a module, and then later, some other user wants to use that name. Here are some common ways that happens (each of these is based on actual events.)"
msgstr ""

#: ../../source/misc/disputes.rst:22
msgid "Alice writes a JavaScript module foo, which is not node-specific. Alice doesn’t use node at all. Yusuf wants to use foo in node, so he wraps it in an npm module. Some time later, Alice starts using node, and wants to take over management of her program. Yusuf writes an npm module foo, and publishes it. Perhaps much later, Alice finds a bug in foo, and fixes it. She sends a pull request to Yusuf, but Yusuf doesn’t have the time to deal with it, because he has a new job and a new baby and is focused on his new Erlang project, and kind of not involved with node any more. Alice would like to publish a new foo, but can’t, because the name is taken. Yusuf writes a 10-line flow-control library, and calls it foo, and publishes it to the npm registry. Being a simple little thing, it never really has to be updated. Alice works for Foo Inc, the makers of the critically acclaimed and widely-marketed foo JavaScript toolkit framework. They publish it to npm as foojs, but people are routinely confused when npm install foo is some different thing. Yusuf writes a parser for the widely-known foo file format, because he needs it for work. Then, he gets a new job, and never updates the prototype. Later on, Alice writes a much more complete foo parser, but can’t publish, because Yusuf’s foo is in the way."
msgstr ""

#: ../../source/misc/disputes.rst:27
msgid "npm owner ls foo. This will tell Alice the email address of the owner (Yusuf). Alice emails Yusuf, explaining the situation as respectfully as possible, and what she would like to do with the module name. She adds the npm support staff support@npmjs.com to the CC list of the email. Mention in the email that Yusuf can run npm owner add alice foo to add Alice as an owner of the foo package. After a reasonable amount of time, if Yusuf has not responded, or if Yusuf and Alice can’t come to any sort of resolution, email support support@npmjs.com and we’ll sort it out. (“Reasonable” is usually at least 4 weeks.) REASONING In almost every case so far, the parties involved have been able to reach an amicable resolution without any major intervention. Most people really do want to be reasonable, and are probably not even aware that they’re in your way."
msgstr ""

#: ../../source/misc/disputes.rst:33
msgid "Module ecosystems are most vibrant and powerful when they are as self-directed as possible. If an admin one day deletes something you had worked on, then that is going to make most people quite upset, regardless of the justification. When humans solve their problems by talking to other humans with respect, everyone has the chance to end up feeling good about the interaction."
msgstr ""

#: ../../source/misc/disputes.rst:36
msgid "EXCEPTIONS"
msgstr ""

#: ../../source/misc/disputes.rst:38
msgid "Some things are not allowed, and will be removed without discussion if they are brought to the attention of the npm registry admins, including but not limited to:"
msgstr ""

#: ../../source/misc/disputes.rst:40
msgid "Malware (that is, a package designed to exploit or harm the machine on which it is installed). Violations of copyright or licenses (for example, cloning an MIT-licensed program, and then removing or changing the copyright and license statement). Illegal content. “Squatting” on a package name that you plan to use, but aren’t actually using. Sorry, I don’t care how great the name is, or how perfect a fit it is for the thing that someday might happen. If someone wants to use it today, and you’re just taking up space with an empty tarball, you’re going to be evicted. Putting empty packages in the registry. Packages must have SOME functionality. It can be silly, but it can’t be nothing. (See also: squatting.) Doing weird things with the registry, like using it as your own personal application database or otherwise putting non-packagey things into it. Other things forbidden by the npm Code of Conduct such as hateful language, pornographic content, or harassment. If you see bad behavior like this, please report it to abuse@npmjs.com right away. You are never expected to resolve abusive behavior on your own. We are here to help."
msgstr ""

#: ../../source/misc/disputes.rst:50
msgid "TRADEMARKS"
msgstr ""

#: ../../source/misc/disputes.rst:52
msgid "If you think another npm publisher is infringing your trademark, such as by using a confusingly similar package name, email abuse@npmjs.com with a link to the package or user account on https://www.npmjs.com/. Attach a copy of your trademark registration certificate."
msgstr ""

#: ../../source/misc/disputes.rst:54
msgid "If we see that the package’s publisher is intentionally misleading others by misusing your registered mark without permission, we will transfer the package name to you. Otherwise, we will contact the package publisher and ask them to clear up any confusion with changes to their package’s README file or metadata."
msgstr ""

#: ../../source/misc/disputes.rst:57
msgid "CHANGES"
msgstr ""

#: ../../source/misc/disputes.rst:59
msgid "This is a living document and may be updated from time to time. Please refer to the git history for this document to view the changes."
msgstr ""

#: ../../source/misc/disputes.rst:62
msgid "LICENSE"
msgstr ""

#: ../../source/misc/disputes.rst:64
msgid "Copyright (C) npm, Inc., All rights reserved"
msgstr ""

#: ../../source/misc/disputes.rst:66
msgid "This document may be reused under a Creative Commons Attribution-ShareAlike License."
msgstr ""

#: ../../source/misc/disputes.rst:72
msgid ":option:`npm owner`"
msgstr ""

#: ../../source/misc/index.rst:4
msgid "index"
msgstr ""

#: ../../source/misc/index.rst:6
msgid "Index of all npm documentation README(1) a JavaScript package manager"
msgstr ""

#: ../../source/misc/index.rst:11
msgid "Command Line Documentation"
msgstr ""

#: ../../source/misc/index.rst:13
msgid "Using npm on the command line"
msgstr ""

#: ../../source/misc/index.rst:15
msgid "npm javascript package manager"
msgstr ""

#: ../../source/misc/index.rst:18
msgid "npm-access Set access level on published packages"
msgstr ""

#: ../../source/misc/index.rst:21
msgid "npm-adduser Add a registry user account"
msgstr ""

#: ../../source/misc/index.rst:24
msgid "npm-audit Run a security audit"
msgstr ""

#: ../../source/misc/index.rst:27
msgid "npm-bin Display npm bin folder"
msgstr ""

#: ../../source/misc/index.rst:30
msgid "npm-bugs Bugs for a package in a web browser maybe"
msgstr ""

#: ../../source/misc/index.rst:33
msgid "npm-build Build a package"
msgstr ""

#: ../../source/misc/index.rst:36
msgid "npm-bundle REMOVED"
msgstr ""

#: ../../source/misc/index.rst:39
msgid "npm-cache Manipulates packages cache"
msgstr ""

#: ../../source/misc/index.rst:42
msgid "npm-ci Install a project with a clean slate"
msgstr ""

#: ../../source/misc/index.rst:45
msgid "npm-completion Tab Completion for npm"
msgstr ""

#: ../../source/misc/index.rst:48
msgid "npm-config Manage the npm configuration files"
msgstr ""

#: ../../source/misc/index.rst:51
msgid "npm-dedupe Reduce duplication"
msgstr ""

#: ../../source/misc/index.rst:54
msgid "npm-deprecate Deprecate a version of a package"
msgstr ""

#: ../../source/misc/index.rst:57
msgid "npm-dist-tag Modify package distribution tags"
msgstr ""

#: ../../source/misc/index.rst:60
msgid "npm-docs Docs for a package in a web browser maybe"
msgstr ""

#: ../../source/misc/index.rst:63
msgid "npm-doctor Check your environments"
msgstr ""

#: ../../source/misc/index.rst:66
msgid "npm-edit Edit an installed package"
msgstr ""

#: ../../source/misc/index.rst:69
msgid "npm-explore Browse an installed package"
msgstr ""

#: ../../source/misc/index.rst:72
msgid "npm-help-search Search npm help documentation"
msgstr ""

#: ../../source/misc/index.rst:75
msgid "npm-help Get help on npm"
msgstr ""

#: ../../source/misc/index.rst:78
msgid "npm-hook Manage registry hooks"
msgstr ""

#: ../../source/misc/index.rst:81
msgid "npm-init create a package.json file"
msgstr ""

#: ../../source/misc/index.rst:84
msgid "npm-install-ci-test Install a project with a clean slate and run tests"
msgstr ""

#: ../../source/misc/index.rst:87
msgid "npm-install-test Install package(s) and run tests"
msgstr ""

#: ../../source/misc/index.rst:90
msgid "npm-install Install a package"
msgstr ""

#: ../../source/misc/index.rst:93
msgid "npm-link Symlink a package folder"
msgstr ""

#: ../../source/misc/index.rst:96
msgid "npm-logout Log out of the registry"
msgstr ""

#: ../../source/misc/index.rst:99
msgid "npm-ls List installed packages"
msgstr ""

#: ../../source/misc/index.rst:102
msgid "npm-org Manage orgs"
msgstr ""

#: ../../source/misc/index.rst:105
msgid "npm-outdated Check for outdated packages"
msgstr ""

#: ../../source/misc/index.rst:108
msgid "npm-owner Manage package owners"
msgstr ""

#: ../../source/misc/index.rst:111
msgid "npm-pack Create a tarball from a package"
msgstr ""

#: ../../source/misc/index.rst:114
msgid "npm-ping Ping npm registry"
msgstr ""

#: ../../source/misc/index.rst:117
msgid "npm-prefix Display prefix"
msgstr ""

#: ../../source/misc/index.rst:120
msgid "npm-profile Change settings on your registry profile"
msgstr ""

#: ../../source/misc/index.rst:123
msgid "npm-prune Remove extraneous packages"
msgstr ""

#: ../../source/misc/index.rst:126
msgid "npm-publish Publish a package"
msgstr ""

#: ../../source/misc/index.rst:129
msgid "npm-rebuild Rebuild a package"
msgstr ""

#: ../../source/misc/index.rst:132
msgid "npm-repo Open package repository page in the browser"
msgstr ""

#: ../../source/misc/index.rst:135
msgid "npm-restart Restart a package"
msgstr ""

#: ../../source/misc/index.rst:138
msgid "npm-root Display npm root"
msgstr ""

#: ../../source/misc/index.rst:141
msgid "npm-run-script Run arbitrary package scripts"
msgstr ""

#: ../../source/misc/index.rst:144
msgid "npm-search Search for packages"
msgstr ""

#: ../../source/misc/index.rst:147
msgid "npm-shrinkwrap Lock down dependency versions for publication"
msgstr ""

#: ../../source/misc/index.rst:150
msgid "npm-star Mark your favorite packages"
msgstr ""

#: ../../source/misc/index.rst:153
msgid "npm-stars View packages marked as favorites"
msgstr ""

#: ../../source/misc/index.rst:156
msgid "npm-start Start a package"
msgstr ""

#: ../../source/misc/index.rst:159
msgid "npm-stop Stop a package"
msgstr ""

#: ../../source/misc/index.rst:162
msgid "npm-team Manage organization teams and team memberships"
msgstr ""

#: ../../source/misc/index.rst:165
msgid "npm-test Test a package"
msgstr ""

#: ../../source/misc/index.rst:168
msgid "npm-token Manage your authentication tokens"
msgstr ""

#: ../../source/misc/index.rst:171
msgid "npm-uninstall Remove a package"
msgstr ""

#: ../../source/misc/index.rst:174
msgid "npm-unpublish Remove a package from the registry"
msgstr ""

#: ../../source/misc/index.rst:177
msgid "npm-update Update a package"
msgstr ""

#: ../../source/misc/index.rst:180
msgid "npm-version Bump a package version"
msgstr ""

#: ../../source/misc/index.rst:183
msgid "npm-view View registry info"
msgstr ""

#: ../../source/misc/index.rst:186
msgid "npm-whoami Display npm username"
msgstr ""

#: ../../source/misc/index.rst:189
msgid "API Documentation Using npm in your Node programs"
msgstr ""

#: ../../source/misc/index.rst:192
msgid "Files File system structures npm uses"
msgstr ""

#: ../../source/misc/index.rst:195
msgid "npm-folders Folder Structures Used by npm"
msgstr ""

#: ../../source/misc/index.rst:198
msgid "npm-package-locks An explanation of npm lockfiles"
msgstr ""

#: ../../source/misc/index.rst:201
msgid "npm-shrinkwrap.json A publishable lockfile"
msgstr ""

#: ../../source/misc/index.rst:204
msgid "npmrc The npm config files"
msgstr ""

#: ../../source/misc/index.rst:207
msgid "package-lock.json A manifestation of the manifest"
msgstr ""

#: ../../source/misc/index.rst:210
msgid "package.json Specifics of npm’s package.json handling"
msgstr ""

#: ../../source/misc/index.rst:213
msgid "Misc Various other bits and bobs"
msgstr ""

#: ../../source/misc/index.rst:216
msgid "npm-coding-style npm’s “funny” coding style"
msgstr ""

#: ../../source/misc/index.rst:219
msgid "npm-config More than you probably want to know about npm configuration"
msgstr ""

#: ../../source/misc/index.rst:222
msgid "npm-developers Developer Guide"
msgstr ""

#: ../../source/misc/index.rst:225
msgid "npm-disputes Handling Module Name Disputes"
msgstr ""

#: ../../source/misc/index.rst:228
msgid "npm-index Index of all npm documentation"
msgstr ""

#: ../../source/misc/index.rst:231
msgid "npm-orgs Working with Teams & Orgs"
msgstr ""

#: ../../source/misc/index.rst:234
msgid "npm-registry The JavaScript Package Registry"
msgstr ""

#: ../../source/misc/index.rst:237
msgid "npm-scope Scoped packages"
msgstr ""

#: ../../source/misc/index.rst:240
msgid "npm-scripts How npm handles the “scripts” field"
msgstr ""

#: ../../source/misc/index.rst:243
msgid "removing-npm Cleaning the Slate"
msgstr ""

#: ../../source/misc/index.rst:246
msgid "semver The semantic versioner for npm"
msgstr ""

#: ../../source/misc/orgs.rst:4
msgid "orgs"
msgstr ""

#: ../../source/misc/orgs.rst:6
msgid "Working with Teams & Orgs"
msgstr ""

#: ../../source/misc/orgs.rst:11
msgid "There are three levels of org users:"
msgstr ""

#: ../../source/misc/orgs.rst:13
msgid "Super admin, controls billing & adding people to the org. Team admin, manages team membership & package access. Developer, works on packages they are given access to. The super admin is the only person who can add users to the org because it impacts the monthly bill. The super admin will use the website to manage membership. Every org has a developers team that all users are automatically added to."
msgstr ""

#: ../../source/misc/orgs.rst:18
msgid "The team admin is the person who manages team creation, team membership, and package access for teams. The team admin grants package access to teams, not individuals."
msgstr ""

#: ../../source/misc/orgs.rst:20
msgid "The developer will be able to access packages based on the teams they are on. Access is either read-write or read-only."
msgstr ""

#: ../../source/misc/orgs.rst:22
msgid "There are two main commands:"
msgstr ""

#: ../../source/misc/orgs.rst:24
msgid "npm team see npm-team for more details npm access see npm-access for more details Team Admins create teams Check who you’ve added to your org: npm team ls <org>:developers Each org is automatically given a developers team, so you can see the whole list of team members in your org. This team automatically gets read-write access to all packages, but you can change that with the access command."
msgstr ""

#: ../../source/misc/orgs.rst:31
msgid "Create a new team:"
msgstr ""

#: ../../source/misc/orgs.rst:33
msgid "npm team create <org:team> Add members to that team: npm team add <org:team> <user> Publish a package and adjust package access In package directory, run npm init --scope=<org> to scope it for your org & publish as usual"
msgstr ""

#: ../../source/misc/orgs.rst:41
msgid "Grant access: npm access grant <read-only|read-write> <org:team> [<package>] Revoke access: npm access revoke <org:team> [<package>] Monitor your package access See what org packages a team member can access: npm access ls-packages <org> <user> See packages available to a specific team: npm access ls-packages <org:team> Check which teams are collaborating on a package: npm access ls-collaborators <pkg>"
msgstr ""

#: ../../source/misc/orgs.rst:56
msgid ":option:`npm team`"
msgstr ""

#: ../../source/misc/orgs.rst:57
#: ../../source/misc/scope.rst:72
msgid ":option:`npm access`"
msgstr ""

#: ../../source/misc/orgs.rst:58
msgid ":option:`npm scope`"
msgstr ""

#: ../../source/misc/registry.rst:4
msgid "registry"
msgstr ""

#: ../../source/misc/registry.rst:6
msgid "The JavaScript Package Registry"
msgstr ""

#: ../../source/misc/registry.rst:11
msgid "To resolve packages by name and version, npm talks to a registry website that implements the CommonJS Package Registry specification for reading package info."
msgstr ""

#: ../../source/misc/registry.rst:13
msgid "npm is configured to use npm, Inc.’s public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to terms of use available at https://www.npmjs.com/policies/terms."
msgstr ""

#: ../../source/misc/registry.rst:15
msgid "You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else’s registry may be governed by their terms of use."
msgstr ""

#: ../../source/misc/registry.rst:17
msgid "npm’s package registry implementation supports several write APIs as well, to allow for publishing packages and managing user account information."
msgstr ""

#: ../../source/misc/registry.rst:19
msgid "The npm public registry is powered by a CouchDB database, of which there is a public mirror at https://skimdb.npmjs.com/registry. The code for the couchapp is available at https://github.com/npm/npm-registry-couchapp."
msgstr ""

#: ../../source/misc/registry.rst:21
msgid "The registry URL used is determined by the scope of the package (see npm-scope). If no scope is specified, the default registry is used, which is supplied by the registry config parameter. See npm-config, npmrc, and npm-config for more on managing npm’s configuration."
msgstr ""

#: ../../source/misc/registry.rst:23
msgid "Does npm send any information about me back to the registry? Yes."
msgstr ""

#: ../../source/misc/registry.rst:26
msgid "When making requests of the registry npm adds two headers with information about your environment:"
msgstr ""

#: ../../source/misc/registry.rst:28
msgid "Npm-Scope – If your project is scoped, this header will contain its scope. In the future npm hopes to build registry features that use this information to allow you to customize your experience for your organization. Npm-In-CI – Set to “true” if npm believes this install is running in a continuous integration environment, “false” otherwise. This is detected by looking for the following environment variables: CI, TDDIUM, JENKINS_URL, bamboo.buildKey. If you’d like to learn more you may find the original PR interesting. This is used to gather better metrics on how npm is used by humans, versus build farms. The npm registry does not try to correlate the information in these headers with any authenticated accounts that may be used in the same requests."
msgstr ""

#: ../../source/misc/registry.rst:32
msgid "Can I run my own private registry? Yes!"
msgstr ""

#: ../../source/misc/registry.rst:35
msgid "The easiest way is to replicate the couch database, and use the same (or similar) design doc to implement the APIs."
msgstr ""

#: ../../source/misc/registry.rst:37
msgid "If you set up continuous replication from the official CouchDB, and then set your internal CouchDB as the registry config, then you’ll be able to read any published packages, in addition to your private ones, and by default will only publish internally."
msgstr ""

#: ../../source/misc/registry.rst:39
msgid "If you then want to publish a package for the whole world to see, you can simply override the --registry option for that publish command."
msgstr ""

#: ../../source/misc/registry.rst:41
msgid "I don’t want my package published in the official registry. It’s private. Set \"private\": true in your package.json to prevent it from being published at all, or \"publishConfig\":{\"registry\":\"http://my-internal-registry.local\"} to force it to be published only to your internal registry."
msgstr ""

#: ../../source/misc/registry.rst:44
msgid "See package.json for more info on what goes in the package.json file."
msgstr ""

#: ../../source/misc/registry.rst:46
msgid "Will you replicate from my registry into the public one? No. If you want things to be public, then publish them into the public registry using npm. What little security there is would be for nought otherwise."
msgstr ""

#: ../../source/misc/registry.rst:49
msgid "Do I have to use couchdb to build a registry that npm can talk to? No, but it’s way easier. Basically, yes, you do, or you have to effectively implement the entire CouchDB API anyway."
msgstr ""

#: ../../source/misc/registry.rst:52
msgid "Is there a website or something to see package docs and such? Yes, head over to https://www.npmjs.com/"
msgstr ""

#: ../../source/misc/registry.rst:58
#: ../../source/misc/registry.rst:59
msgid ":option:`npm config`"
msgstr ""

#: ../../source/misc/registry.rst:60
msgid ":option:`npmrc`"
msgstr ""

#: ../../source/misc/registry.rst:62
msgid ":option:`npm disputes`"
msgstr ""

#: ../../source/misc/removal.rst:4
msgid "removal"
msgstr ""

#: ../../source/misc/removal.rst:6
msgid "Cleaning the Slate"
msgstr ""

#: ../../source/misc/removal.rst:9
msgid "SYNOPSIS"
msgstr ""

#: ../../source/misc/removal.rst:11
msgid "So sad to see you go."
msgstr ""

#: ../../source/misc/removal.rst:13
msgid "sudo npm uninstall npm -g Or, if that fails, get the npm source code, and do:"
msgstr ""

#: ../../source/misc/removal.rst:16
msgid "sudo make uninstall More Severe Uninstalling Usually, the above instructions are sufficient. That will remove npm, but leave behind anything you’ve installed."
msgstr ""

#: ../../source/misc/removal.rst:20
msgid "If that doesn’t work, or if you require more drastic measures, continue reading."
msgstr ""

#: ../../source/misc/removal.rst:22
msgid "Note that this is only necessary for globally-installed packages. Local installs are completely contained within a project’s node_modules folder. Delete that folder, and everything is gone (unless a package’s install script is particularly ill-behaved)."
msgstr ""

#: ../../source/misc/removal.rst:24
msgid "This assumes that you installed node and npm in the default place. If you configured node with a different --prefix, or installed npm with a different prefix setting, then adjust the paths accordingly, replacing /usr/local with your install prefix."
msgstr ""

#: ../../source/misc/removal.rst:26
msgid "To remove everything npm-related manually:"
msgstr ""

#: ../../source/misc/removal.rst:28
msgid "rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm* If you installed things with npm, then your best bet is to uninstall them with npm first, and then install them again once you have a proper install. This can help find any symlinks that are lying around:"
msgstr ""

#: ../../source/misc/removal.rst:31
msgid "ls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm Prior to version 0.3, npm used shim files for executables and node modules. To track those down, you can do the following:"
msgstr ""

#: ../../source/misc/removal.rst:34
msgid "find /usr/local/{lib/node,bin} -exec grep -l npm \\{\\} \\; ; (This is also in the README file.)"
msgstr ""

#: ../../source/misc/removal.rst:40
msgid ":option:`README`"
msgstr ""

#: ../../source/misc/removal.rst:41
msgid ":option:`npm uninstall`"
msgstr ""

#: ../../source/misc/removal.rst:42
msgid ":option:`npm prune`"
msgstr ""

#: ../../source/misc/scope.rst:4
msgid "scope"
msgstr ""

#: ../../source/misc/scope.rst:6
msgid "Scoped packages"
msgstr ""

#: ../../source/misc/scope.rst:11
msgid "All npm packages have a name. Some package names also have a scope. A scope follows the usual rules for package names (URL-safe characters, no leading dots or underscores). When used in package names, scopes are preceded by an @ symbol and followed by a slash, e.g."
msgstr ""

#: ../../source/misc/scope.rst:13
msgid "@somescope/somepackagename Scopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package."
msgstr ""

#: ../../source/misc/scope.rst:16
msgid "Each npm user/organization has their own scope, and only you can add packages in your scope. This means you don’t have to worry about someone taking your package name ahead of you. Thus it is also a good way to signal official packages for organizations."
msgstr ""

#: ../../source/misc/scope.rst:18
msgid "Scoped packages can be published and installed as of npm@2 and are supported by the primary npm registry. Unscoped packages can depend on scoped packages and vice versa. The npm client is backwards-compatible with unscoped registries, so it can be used to work with scoped and unscoped registries at the same time."
msgstr ""

#: ../../source/misc/scope.rst:20
msgid "Installing scoped packages Scoped packages are installed to a sub-folder of the regular installation folder, e.g. if your other packages are installed in node_modules/packagename, scoped modules will be installed in node_modules/@myorg/packagename. The scope folder (@myorg) is simply the name of the scope preceded by an @ symbol, and can contain any number of scoped packages."
msgstr ""

#: ../../source/misc/scope.rst:23
msgid "A scoped package is installed by referencing it by name, preceded by an @ symbol, in npm install:"
msgstr ""

#: ../../source/misc/scope.rst:25
msgid "npm install @myorg/mypackage Or in package.json:"
msgstr ""

#: ../../source/misc/scope.rst:28
msgid "\"dependencies\": {"
msgstr ""

#: ../../source/misc/scope.rst:29
msgid "\"@myorg/mypackage\": \"^1.3.0\""
msgstr ""

#: ../../source/misc/scope.rst:30
msgid "} Note that if the @ symbol is omitted, in either case, npm will instead attempt to install from GitHub; see npm-install."
msgstr ""

#: ../../source/misc/scope.rst:33
msgid "Requiring scoped packages Because scoped packages are installed into a scope folder, you have to include the name of the scope when requiring them in your code, e.g."
msgstr ""

#: ../../source/misc/scope.rst:36
msgid "require('@myorg/mypackage') There is nothing special about the way Node treats scope folders. This simply requires the mypackage module in the folder named @myorg."
msgstr ""

#: ../../source/misc/scope.rst:39
msgid "Publishing scoped packages Scoped packages can be published from the CLI as of npm@2 and can be published to any registry that supports them, including the primary npm registry."
msgstr ""

#: ../../source/misc/scope.rst:42
msgid "(As of 2015-04-19, and with npm 2.0 or better, the primary npm registry does support scoped packages.)"
msgstr ""

#: ../../source/misc/scope.rst:44
msgid "If you wish, you may associate a scope with a registry; see below."
msgstr ""

#: ../../source/misc/scope.rst:46
msgid "Publishing public scoped packages to the primary npm registry To publish a public scoped package, you must specify --access public with the initial publication. This will publish the package and set access to public as if you had run npm access public after publishing."
msgstr ""

#: ../../source/misc/scope.rst:49
msgid "Publishing private scoped packages to the npm registry To publish a private scoped package to the npm registry, you must have an npm Private Modules account."
msgstr ""

#: ../../source/misc/scope.rst:52
msgid "You can then publish the module with npm publish or npm publish --access restricted, and it will be present in the npm registry, with restricted access. You can then change the access permissions, if desired, with npm access or on the npmjs.com website."
msgstr ""

#: ../../source/misc/scope.rst:54
msgid "Associating a scope with a registry Scopes can be associated with a separate registry. This allows you to seamlessly use a mix of packages from the primary npm registry and one or more private registries, such as npm Enterprise."
msgstr ""

#: ../../source/misc/scope.rst:57
msgid "You can associate a scope with a registry at login, e.g."
msgstr ""

#: ../../source/misc/scope.rst:59
msgid "npm login --registry=http://reg.example.com --scope=@myco Scopes have a many-to-one relationship with registries: one registry can host multiple scopes, but a scope only ever points to one registry."
msgstr ""

#: ../../source/misc/scope.rst:62
msgid "You can also associate a scope with a registry using npm config:"
msgstr ""

#: ../../source/misc/scope.rst:64
msgid "npm config set @myco:registry http://reg.example.com Once a scope is associated with a registry, any npm install for a package with that scope will request packages from that registry instead. Any npm publish for a package name that contains the scope will be published to that registry instead."
msgstr ""

#: ../../source/misc/scope.rst:70
#: ../../source/misc/scripts.rst:165
msgid ":option:`npm install`"
msgstr ""

#: ../../source/misc/scripts.rst:4
msgid "scripts"
msgstr ""

#: ../../source/misc/scripts.rst:6
msgid "How npm handles the \"scripts\" field"
msgstr ""

#: ../../source/misc/scripts.rst:11
msgid "npm supports the “scripts” property of the package.json file, for the following scripts:"
msgstr ""

#: ../../source/misc/scripts.rst:13
msgid "prepublish: Run BEFORE the package is packed and published, as well as on local npm install without any arguments. (See below) prepare: Run both BEFORE the package is packed and published, on local npm install without any arguments, and when installing git dependencies (See below). This is run AFTER prepublish, but BEFORE prepublishOnly. prepublishOnly: Run BEFORE the package is prepared and packed, ONLY on npm publish. (See below.) prepack: run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies) postpack: Run AFTER the tarball has been generated and moved to its final destination. publish, postpublish: Run AFTER the package is published. preinstall: Run BEFORE the package is installed install, postinstall: Run AFTER the package is installed. preuninstall, uninstall: Run BEFORE the package is uninstalled. postuninstall: Run AFTER the package is uninstalled. preversion: Run BEFORE bumping the package version. version: Run AFTER bumping the package version, but BEFORE commit. postversion: Run AFTER bumping the package version, and AFTER commit. pretest, test, posttest: Run by the npm test command. prestop, stop, poststop: Run by the npm stop command. prestart, start, poststart: Run by the npm start command. prerestart, restart, postrestart: Run by the npm restart command. .. note:: npm restart will run the stop and start scripts if no restart script is provided. preshrinkwrap, shrinkwrap, postshrinkwrap: Run by the npm shrinkwrap command. Additionally, arbitrary scripts can be executed by running npm run-script <stage>. Pre and post commands with matching names will be run for those as well (e.g. premyscript, myscript, postmyscript). Scripts from dependencies can be run with npm explore <pkg> -- npm run <stage>."
msgstr ""

#: ../../source/misc/scripts.rst:34
msgid "PREPUBLISH AND PREPARE"
msgstr ""

#: ../../source/misc/scripts.rst:37
msgid "DEPRECATION NOTE"
msgstr ""

#: ../../source/misc/scripts.rst:39
msgid "Since npm@1.1.71, the npm CLI has run the prepublish script for both npm publish and npm install, because it’s a convenient way to prepare a package for use (some common use cases are described in the section below). It has also turned out to be, in practice, very confusing. As of npm@4.0.0, a new event has been introduced, prepare, that preserves this existing behavior. A new event, prepublishOnly has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on npm publish (for instance, running the tests one last time to ensure they’re in good shape)."
msgstr ""

#: ../../source/misc/scripts.rst:41
msgid "See https://github.com/npm/npm/issues/10074 for a much lengthier justification, with further reading, for this change."
msgstr ""

#: ../../source/misc/scripts.rst:44
msgid "USE CASES"
msgstr ""

#: ../../source/misc/scripts.rst:46
msgid "If you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a prepublish script. This includes tasks such as:"
msgstr ""

#: ../../source/misc/scripts.rst:48
msgid "Compiling CoffeeScript source code into JavaScript. Creating minified versions of JavaScript source code. Fetching remote resources that your package will use. The advantage of doing these things at prepublish time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:"
msgstr ""

#: ../../source/misc/scripts.rst:53
msgid "You can depend on coffee-script as a devDependency, and thus your users don’t need to have it installed. You don’t need to include minifiers in your package, reducing the size for your users. You don’t need to rely on your users having curl or wget or other system tools on the target machines."
msgstr ""

#: ../../source/misc/scripts.rst:58
msgid "DEFAULT VALUES"
msgstr ""

#: ../../source/misc/scripts.rst:60
msgid "npm will default some script values based on package contents."
msgstr ""

#: ../../source/misc/scripts.rst:62
msgid "\"start\": \"node server.js\":"
msgstr ""

#: ../../source/misc/scripts.rst:64
msgid "If there is a server.js file in the root of your package, then npm will default the start command to node server.js."
msgstr ""

#: ../../source/misc/scripts.rst:66
msgid "\"install\": \"node-gyp rebuild\":"
msgstr ""

#: ../../source/misc/scripts.rst:68
msgid "If there is a binding.gyp file in the root of your package and you haven’t defined your own install or preinstall scripts, npm will default the install command to compile using node-gyp."
msgstr ""

#: ../../source/misc/scripts.rst:71
msgid "USER"
msgstr ""

#: ../../source/misc/scripts.rst:73
msgid "If npm was invoked with root privileges, then it will change the uid to the user account or uid specified by the user config, which defaults to nobody. Set the unsafe-perm flag to run scripts with root privileges."
msgstr ""

#: ../../source/misc/scripts.rst:76
msgid "ENVIRONMENT"
msgstr ""

#: ../../source/misc/scripts.rst:78
msgid "Package scripts run in an environment where many pieces of information are made available regarding the setup of npm and the current state of the process."
msgstr ""

#: ../../source/misc/scripts.rst:80
msgid "path If you depend on modules that define executable scripts, like test suites, then those executables will be added to the PATH for executing the scripts. So, if your package.json has this:"
msgstr ""

#: ../../source/misc/scripts.rst:83
msgid "{ \"name\" : \"foo\" , \"dependencies\" : { \"bar\" : \"0.1.x\" } , \"scripts\": { \"start\" : \"bar ./test\" } } then you could run npm start to execute the bar script, which is exported into the node_modules/.bin directory on npm install."
msgstr ""

#: ../../source/misc/scripts.rst:88
msgid "package.json vars The package.json fields are tacked onto the npm_package_ prefix. So, for instance, if you had {\"name\":\"foo\", \"version\":\"1.2.5\"} in your package.json file, then your package scripts would have the npm_package_name environment variable set to “foo”, and the npm_package_version set to “1.2.5”. You can access these variables in your code with process.env.npm_package_name and process.env.npm_package_version, and so on for other fields."
msgstr ""

#: ../../source/misc/scripts.rst:91
msgid "configuration Configuration parameters are put in the environment with the npm_config_ prefix. For instance, you can view the effective root config by checking the npm_config_root environment variable."
msgstr ""

#: ../../source/misc/scripts.rst:94
msgid "Special: package.json “config” object The package.json “config” keys are overwritten in the environment if there is a config param of <name>[@<version>]:<key>. For example, if the package.json has this:"
msgstr ""

#: ../../source/misc/scripts.rst:105
msgid "npm config set foo:port 80 current lifecycle event Lastly, the npm_lifecycle_event environment variable is set to whichever stage of the cycle is being executed. So, you could have a single script used for different parts of the process which switches based on what’s currently happening."
msgstr ""

#: ../../source/misc/scripts.rst:109
msgid "Objects are flattened following this format, so if you had {\"scripts\":{\"install\":\"foo.js\"}} in your package.json, then you’d see this in the script:"
msgstr ""

#: ../../source/misc/scripts.rst:111
msgid "process.env.npm_package_scripts_install === \"foo.js\" EXAMPLES For example, if your package.json contains this:"
msgstr ""

#: ../../source/misc/scripts.rst:118
#: ../../source/misc/scripts.rst:128
msgid "{ \"scripts\" :"
msgstr ""

#: ../../source/misc/scripts.rst:116
msgid "{ \"install\" : \"scripts/install.js\" , \"postinstall\" : \"scripts/install.js\" , \"uninstall\" : \"scripts/uninstall.js\" }"
msgstr ""

#: ../../source/misc/scripts.rst:120
msgid "} then scripts/install.js will be called for the install and post-install stages of the lifecycle, and scripts/uninstall.js will be called when the package is uninstalled. Since scripts/install.js is running for two different phases, it would be wise in this case to look at the npm_lifecycle_event environment variable."
msgstr ""

#: ../../source/misc/scripts.rst:123
msgid "If you want to run a make command, you can do so. This works just fine:"
msgstr ""

#: ../../source/misc/scripts.rst:126
msgid "{ \"preinstall\" : \"./configure\" , \"install\" : \"make && make install\" , \"test\" : \"make test\" }"
msgstr ""

#: ../../source/misc/scripts.rst:130
msgid "}"
msgstr ""

#: ../../source/misc/scripts.rst:133
msgid "EXITING"
msgstr ""

#: ../../source/misc/scripts.rst:135
msgid "Scripts are run by passing the line as a script argument to sh."
msgstr ""

#: ../../source/misc/scripts.rst:137
msgid "If the script exits with a code other than 0, then this will abort the process."
msgstr ""

#: ../../source/misc/scripts.rst:139
msgid "Note that these script files don’t have to be nodejs or even javascript programs. They just have to be some kind of executable file."
msgstr ""

#: ../../source/misc/scripts.rst:142
msgid "HOOK SCRIPTS"
msgstr ""

#: ../../source/misc/scripts.rst:144
msgid "If you want to run a specific script at a specific lifecycle event for ALL packages, then you can use a hook script."
msgstr ""

#: ../../source/misc/scripts.rst:146
msgid "Place an executable file at node_modules/.hooks/{eventname}, and it’ll get run for all packages when they are going through that point in the package lifecycle for any packages installed in that root."
msgstr ""

#: ../../source/misc/scripts.rst:148
msgid "Hook scripts are run exactly the same way as package.json scripts. That is, they are in a separate child process, with the env described above."
msgstr ""

#: ../../source/misc/scripts.rst:151
msgid "BEST PRACTICES"
msgstr ""

#: ../../source/misc/scripts.rst:153
msgid "Don’t exit with a non-zero error code unless you really mean it. Except for uninstall scripts, this will cause the npm action to fail, and potentially be rolled back. If the failure is minor or only will prevent some optional features, then it’s better to just print a warning and exit successfully. Try not to use scripts to do what npm can do for you. Read through package.json to see all the things that you can specify and enable by simply describing your package appropriately. In general, this will lead to a more robust and consistent state. Inspect the env to determine where to put things. For instance, if the npm_config_binroot environment variable is set to /home/user/bin, then don’t try to install executables into /usr/local/bin. The user probably set it up that way for a reason. Don’t prefix your script commands with “sudo”. If root permissions are required for some reason, then it’ll fail with that error, and the user will sudo the npm command in question. Don’t use install. Use a .gyp file for compilation, and prepublish for anything else. You should almost never have to explicitly set a preinstall or install script. If you are doing this, please consider if there is another option. The only valid use of install or preinstall scripts is for compilation which must be done on the target architecture."
msgstr ""

#: ../../source/misc/scripts.rst:162
msgid ":option:`npm run-script`"
msgstr ""

#: ../../source/misc/semver.rst:4
msgid "semver"
msgstr ""

#: ../../source/misc/semver.rst:6
msgid "The semantic versioner for npm"
msgstr ""

#: ../../source/misc/semver.rst:9
msgid "Install"
msgstr ""

#: ../../source/misc/semver.rst:11
msgid "npm install --save semver"
msgstr ""

#: ../../source/misc/semver.rst:14
msgid "Usage"
msgstr ""

#: ../../source/misc/semver.rst:16
msgid "As a node module:"
msgstr ""

#: ../../source/misc/semver.rst:18
msgid "const semver = require('semver')"
msgstr ""

#: ../../source/misc/semver.rst:20
msgid "semver.valid('1.2.3') // '1.2.3' semver.valid('a.b.c') // null semver.clean('  =v1.2.3   ') // '1.2.3' semver.satisfies('1.2.3', '1.x || >=2.5.0 || 5.0.0 - 7.2.3') // true semver.gt('1.2.3', '9.8.7') // false semver.lt('1.2.3', '9.8.7') // true semver.valid(semver.coerce('v2')) // '2.0.0' semver.valid(semver.coerce('42.6.7.9.3-alpha')) // '42.6.7' As a command-line utility:"
msgstr ""

#: ../../source/misc/semver.rst:30
msgid "$ semver -h"
msgstr ""

#: ../../source/misc/semver.rst:32
msgid "A JavaScript implementation of the http://semver.org/ specification Copyright Isaac Z. Schlueter"
msgstr ""

#: ../../source/misc/semver.rst:35
msgid "Usage: semver [options] <version> [<version> [...]] Prints valid versions sorted by SemVer precedence"
msgstr ""

#: ../../source/misc/semver.rst:38
msgid "Options: -r --range <range>"
msgstr ""

#: ../../source/misc/semver.rst:40
msgid "Print versions that match the specified range."
msgstr ""

#: ../../source/misc/semver.rst:46
msgid "-i --increment [<level>]"
msgstr ""

#: ../../source/misc/semver.rst:43
msgid "Increment a version by the specified level.  Level can be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease.  Default level is 'patch'. Only one version may be specified."
msgstr ""

#: ../../source/misc/semver.rst:49
msgid "Identifier to be used to prefix premajor, preminor, prepatch or prerelease version increments."
msgstr ""

#: ../../source/misc/semver.rst:53
msgid "-l --loose"
msgstr ""

#: ../../source/misc/semver.rst:53
msgid "Interpret versions and ranges loosely"
msgstr ""

#: ../../source/misc/semver.rst:56
msgid "-p --include-prerelease"
msgstr ""

#: ../../source/misc/semver.rst:56
msgid "Always include prerelease versions in range matching"
msgstr ""

#: ../../source/misc/semver.rst:60
msgid "-c --coerce"
msgstr ""

#: ../../source/misc/semver.rst:59
msgid "Coerce a string into SemVer if possible (does not imply --loose)"
msgstr ""

#: ../../source/misc/semver.rst:62
msgid "Program exits successfully if any valid version satisfies all supplied ranges, and prints all satisfying versions."
msgstr ""

#: ../../source/misc/semver.rst:65
msgid "If no satisfying versions are found, then exits failure."
msgstr ""

#: ../../source/misc/semver.rst:67
msgid "Versions are printed in ascending order, so supplying multiple versions to the utility will just sort them. Versions A “version” is described by the v2.0.0 specification found at http://semver.org/."
msgstr ""

#: ../../source/misc/semver.rst:72
msgid "A leading \"=\" or \"v\" character is stripped off and ignored."
msgstr ""

#: ../../source/misc/semver.rst:74
msgid "Ranges A version range is a set of comparators which specify versions that satisfy the range."
msgstr ""

#: ../../source/misc/semver.rst:77
msgid "A comparator is composed of an operator and a version. The set of primitive operators is:"
msgstr ""

#: ../../source/misc/semver.rst:79
msgid "< Less than <= Less than or equal to > Greater than >= Greater than or equal to = Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included. For example, the comparator >=1.2.7 would match the versions 1.2.7, 1.2.8, 2.5.3, and 1.3.9, but not the versions 1.2.6 or 1.1.0."
msgstr ""

#: ../../source/misc/semver.rst:86
msgid "Comparators can be joined by whitespace to form a comparator set, which is satisfied by the intersection of all of the comparators it includes."
msgstr ""

#: ../../source/misc/semver.rst:88
msgid "A range is composed of one or more comparator sets, joined by ||. A version matches a range if and only if every comparator in at least one of the ||-separated comparator sets is satisfied by the version."
msgstr ""

#: ../../source/misc/semver.rst:90
msgid "For example, the range >=1.2.7 <1.3.0 would match the versions 1.2.7, 1.2.8, and 1.2.99, but not the versions 1.2.6, 1.3.0, or 1.1.0."
msgstr ""

#: ../../source/misc/semver.rst:92
msgid "The range 1.2.7 || >=1.2.9 <2.0.0 would match the versions 1.2.7, 1.2.9, and 1.4.6, but not the versions 1.2.8 or 2.0.0."
msgstr ""

#: ../../source/misc/semver.rst:94
msgid "Prerelease Tags If a version has a prerelease tag (for example, 1.2.3-alpha.3) then it will only be allowed to satisfy comparator sets if at least one comparator with the same [major, minor, patch] tuple also has a prerelease tag."
msgstr ""

#: ../../source/misc/semver.rst:97
msgid "For example, the range >1.2.3-alpha.3 would be allowed to match the version 1.2.3-alpha.7, but it would not be satisfied by 3.4.5-alpha.9, even though 3.4.5-alpha.9 is technically “greater than” 1.2.3-alpha.3 according to the SemVer sort rules. The version range only accepts prerelease tags on the 1.2.3 version. The version 3.4.5 would satisfy the range, because it does not have a prerelease flag, and 3.4.5 is greater than 1.2.3-alpha.7."
msgstr ""

#: ../../source/misc/semver.rst:99
msgid "The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author’s design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics."
msgstr ""

#: ../../source/misc/semver.rst:101
msgid "Second, a user who has opted into using a prerelease version has clearly indicated the intent to use that specific set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the next set of prerelease versions."
msgstr ""

#: ../../source/misc/semver.rst:103
msgid "Prerelease Identifiers The method .inc takes an additional identifier string argument that will append the value of the string as a prerelease identifier:"
msgstr ""

#: ../../source/misc/semver.rst:106
msgid "semver.inc('1.2.3', 'prerelease', 'beta') // '1.2.4-beta.0' command-line example:"
msgstr ""

#: ../../source/misc/semver.rst:110
msgid "$ semver 1.2.3 -i prerelease --preid beta 1.2.4-beta.0 Which then can be used to increment further:"
msgstr ""

#: ../../source/misc/semver.rst:114
msgid "$ semver 1.2.4-beta.0 -i prerelease 1.2.4-beta.1 Advanced Range Syntax Advanced range syntax desugars to primitive comparators in deterministic ways."
msgstr ""

#: ../../source/misc/semver.rst:119
msgid "Advanced ranges may be combined in the same way as primitive comparators using white space or ||."
msgstr ""

#: ../../source/misc/semver.rst:121
msgid "Hyphen Ranges X.Y.Z - A.B.C Specifies an inclusive set."
msgstr ""

#: ../../source/misc/semver.rst:124
msgid "1.2.3 - 2.3.4 := >=1.2.3 <=2.3.4 If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes."
msgstr ""

#: ../../source/misc/semver.rst:127
msgid "1.2 - 2.3.4 := >=1.2.0 <=2.3.4 If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts."
msgstr ""

#: ../../source/misc/semver.rst:130
msgid "1.2.3 - 2.3 := >=1.2.3 <2.4.0 1.2.3 - 2 := >=1.2.3 <3.0.0 X-Ranges 1.2.x 1.X 1.2.* * Any of X, x, or * may be used to “stand in” for one of the numeric values in the [major, minor, patch] tuple."
msgstr ""

#: ../../source/misc/semver.rst:135
msgid ":= >=0.0.0 (Any version satisfies)"
msgstr ""

#: ../../source/misc/semver.rst:136
msgid "1.x := >=1.0.0 <2.0.0 (Matching major version) 1.2.x := >=1.2.0 <1.3.0 (Matching major and minor versions) A partial version range is treated as an X-Range, so the special character is in fact optional."
msgstr ""

#: ../../source/misc/semver.rst:140
msgid "\"\" (empty string) := * := >=0.0.0 1 := 1.x.x := >=1.0.0 <2.0.0 1.2 := 1.2.x := >=1.2.0 <1.3.0 Tilde Ranges ~1.2.3 ~1.2 ~1 Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not."
msgstr ""

#: ../../source/misc/semver.rst:146
msgid "~1.2.3 := >=1.2.3 <1.(2+1).0 := >=1.2.3 <1.3.0 ~1.2 := >=1.2.0 <1.(2+1).0 := >=1.2.0 <1.3.0 (Same as 1.2.x) ~1 := >=1.0.0 <(1+1).0.0 := >=1.0.0 <2.0.0 (Same as 1.x) ~0.2.3 := >=0.2.3 <0.(2+1).0 := >=0.2.3 <0.3.0 ~0.2 := >=0.2.0 <0.(2+1).0 := >=0.2.0 <0.3.0 (Same as 0.2.x) ~0 := >=0.0.0 <(0+1).0.0 := >=0.0.0 <1.0.0 (Same as 0.x) ~1.2.3-beta.2 := >=1.2.3-beta.2 <1.3.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. Caret Ranges ^1.2.3 ^0.2.5 ^0.0.4 Allows changes that do not modify the left-most non-zero digit in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X >=0.1.0, and no updates for versions 0.0.X."
msgstr ""

#: ../../source/misc/semver.rst:156
msgid "Many authors treat a 0.x version as if the x were the major “breaking-change” indicator."
msgstr ""

#: ../../source/misc/semver.rst:158
msgid "Caret ranges are ideal when an author may make breaking changes between 0.2.4 and 0.3.0 releases, which is a common practice. However, it presumes that there will not be breaking changes between 0.2.4 and 0.2.5. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices."
msgstr ""

#: ../../source/misc/semver.rst:160
msgid "^1.2.3 := >=1.2.3 <2.0.0 ^0.2.3 := >=0.2.3 <0.3.0 ^0.0.3 := >=0.0.3 <0.0.4 ^1.2.3-beta.2 := >=1.2.3-beta.2 <2.0.0 Note that prereleases in the 1.2.3 version will be allowed, if they are greater than or equal to beta.2. So, 1.2.3-beta.4 would be allowed, but 1.2.4-beta.2 would not, because it is a prerelease of a different [major, minor, patch] tuple. ^0.0.3-beta := >=0.0.3-beta <0.0.4 Note that prereleases in the 0.0.3 version only will be allowed, if they are greater than or equal to beta. So, 0.0.3-pr.2 would be allowed. When parsing caret ranges, a missing patch value desugars to the number 0, but will allow flexibility within that value, even if the major and minor versions are both 0."
msgstr ""

#: ../../source/misc/semver.rst:167
msgid "^1.2.x := >=1.2.0 <2.0.0 ^0.0.x := >=0.0.0 <0.1.0 ^0.0 := >=0.0.0 <0.1.0 A missing minor and patch values will desugar to zero, but also allow flexibility within those values, even if the major version is zero."
msgstr ""

#: ../../source/misc/semver.rst:172
msgid "^1.x := >=1.0.0 <2.0.0 ^0.x := >=0.0.0 <1.0.0 Range Grammar Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors:"
msgstr ""

#: ../../source/misc/semver.rst:177
msgid "range-set  ::= range ( logical-or range ) * logical-or ::= ( ' ' ) * '||' ( ' ' ) * range      ::= hyphen | simple ( ' ' simple ) * | '' hyphen     ::= partial ' - ' partial simple     ::= primitive | partial | tilde | caret primitive  ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial partial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )? xr         ::= 'x' | 'X' | '*' | nr nr         ::= '0' | ['1'-'9'] ( ['0'-'9'] ) * tilde      ::= '~' partial caret      ::= '^' partial qualifier  ::= ( '-' pre )? ( '+' build )? pre        ::= parts build      ::= parts parts      ::= part ( '.' part ) * part       ::= nr | [-0-9A-Za-z]+ Functions All methods and classes take a final options object argument. All options in this object are false by default. The options supported are:"
msgstr ""

#: ../../source/misc/semver.rst:196
msgid "loose Be more forgiving about not-quite-valid semver strings. (Any resulting output will always be 100% strict compliant, of course.) For backwards compatibility reasons, if the options argument is a boolean value instead of an object, it is interpreted to be the loose param. includePrerelease Set to suppress the default behavior of excluding prerelease tagged versions from ranges unless they are explicitly opted into. Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse."
msgstr ""

#: ../../source/misc/semver.rst:200
msgid "valid(v): Return the parsed version, or null if it’s not valid. inc(v, release): Return the version incremented by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if it’s not valid premajor in one call will bump the version up to the next major version and down to a prerelease of that major version. preminor, and prepatch work the same way. If called from a non-prerelease version, the prerelease will work the same as prepatch. It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it. prerelease(v): Returns an array of prerelease components, or null if none exist. Example: prerelease('1.2.3-alpha.1') -> ['alpha', 1] major(v): Return the major version number. minor(v): Return the minor version number. patch(v): Return the patch version number. intersects(r1, r2, loose): Return true if the two supplied ranges or comparators intersect."
msgstr ""

#: ../../source/misc/semver.rst:211
msgid "Comparison"
msgstr ""

#: ../../source/misc/semver.rst:213
msgid "gt(v1, v2): v1 > v2 gte(v1, v2): v1 >= v2 lt(v1, v2): v1 < v2 lte(v1, v2): v1 <= v2 eq(v1, v2): v1 == v2 This is true if they’re logically equivalent, even if they’re not the exact same string. You already know how to compare strings. neq(v1, v2): v1 != v2 The opposite of eq. cmp(v1, comparator, v2): Pass in a comparison string, and it’ll call the corresponding function above. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided. compare(v1, v2): Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort(). rcompare(v1, v2): The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort(). diff(v1, v2): Returns difference between two versions by the release type (major, premajor, minor, preminor, patch, prepatch, or prerelease), or null if the versions are the same. Comparators intersects(comparator): Return true if the comparators intersect"
msgstr ""

#: ../../source/misc/semver.rst:227
msgid "Ranges"
msgstr ""

#: ../../source/misc/semver.rst:229
msgid "validRange(range): Return the valid range or null if it’s not valid satisfies(version, range): Return true if the version satisfies the range. maxSatisfying(versions, range): Return the highest version in the list that satisfies the range, or null if none of them do. minSatisfying(versions, range): Return the lowest version in the list that satisfies the range, or null if none of them do. gtr(version, range): Return true if version is greater than all the versions possible in the range. ltr(version, range): Return true if version is less than all the versions possible in the range. outside(version, range, hilo): Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.) intersects(range): Return true if any of the ranges comparators intersect Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, or satisfy a range! For example, the range 1.2 <1.2.9 || >2.0.0 would have a hole from 1.2.9 until 2.0.0, so the version 1.2.10 would not be greater than the range (because 2.0.1 satisfies, which is higher), nor less than the range (since 1.2.8 satisfies, which is lower), and it also does not satisfy the range."
msgstr ""

#: ../../source/misc/semver.rst:239
msgid "If you want to know if a version satisfies or does not satisfy a range, use the satisfies(version, range) function."
msgstr ""

#: ../../source/misc/semver.rst:242
msgid "Coercion"
msgstr ""

#: ../../source/misc/semver.rst:244
msgid "coerce(version): Coerces a string to semver if possible This aims to provide a very forgiving translation of a non-semver string to semver. It looks for the first digit in a string, and consumes all remaining characters which satisfy at least a partial semver (e.g., 1, 1.2, 1.2.3) up to the max permitted length (256 characters). Longer versions are simply truncated (4.6.3.9.2-alpha2 becomes 4.6.3). All surrounding text is simply ignored (v3.4 replaces v3.3.1 becomes 3.4.0). Only text which lacks digits will fail coercion (version one is not valid). The maximum length for any semver component considered for coercion is 16 characters; longer components will be ignored (10000000000000000.4.7.4 becomes 4.7.4). The maximum value for any semver component is Integer.MAX_SAFE_INTEGER || (2**53 - 1); higher value components are invalid (9999999999999999.4.7.4 is likely invalid)."
msgstr ""


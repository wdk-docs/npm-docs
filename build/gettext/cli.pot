# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the npm-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: npm-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-10 15:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/cli/access.rst:2
msgid "npm access"
msgstr ""

#: ../../source/cli/access.rst:5
#: ../../source/cli/adduser.rst:5
#: ../../source/cli/audit.rst:5
#: ../../source/cli/bin.rst:5
#: ../../source/cli/bugs.rst:5
#: ../../source/cli/build.rst:5
#: ../../source/cli/cache.rst:7
#: ../../source/cli/ci.rst:5
#: ../../source/cli/completion.rst:5
#: ../../source/cli/config.rst:5
#: ../../source/cli/dedupe.rst:5
#: ../../source/cli/deprecate.rst:7
#: ../../source/cli/dist-tag.rst:7
#: ../../source/cli/docs.rst:7
#: ../../source/cli/doctor.rst:7
#: ../../source/cli/edit.rst:7
#: ../../source/cli/explore.rst:5
#: ../../source/cli/help.rst:5
#: ../../source/cli/help-search.rst:5
#: ../../source/cli/hook.rst:5
#: ../../source/cli/init.rst:7
#: ../../source/cli/install.rst:5
#: ../../source/cli/install-ci-test.rst:5
#: ../../source/cli/install-test.rst:5
#: ../../source/cli/link.rst:5
#: ../../source/cli/logout.rst:5
#: ../../source/cli/ls.rst:6
#: ../../source/cli/npm.rst:5
#: ../../source/cli/org.rst:5
#: ../../source/cli/outdated.rst:5
#: ../../source/cli/owner.rst:6
#: ../../source/cli/pack.rst:6
#: ../../source/cli/ping.rst:5
#: ../../source/cli/prefix.rst:5
#: ../../source/cli/profile.rst:5
#: ../../source/cli/prune.rst:5
#: ../../source/cli/publish.rst:5
#: ../../source/cli/rebuild.rst:5
#: ../../source/cli/repo.rst:6
#: ../../source/cli/restart.rst:6
#: ../../source/cli/root.rst:5
#: ../../source/cli/run-script.rst:5
#: ../../source/cli/search.rst:5
#: ../../source/cli/shrinkwrap.rst:6
#: ../../source/cli/star.rst:5
#: ../../source/cli/stars.rst:5
#: ../../source/cli/start.rst:5
#: ../../source/cli/stop.rst:5
#: ../../source/cli/team.rst:5
#: ../../source/cli/test.rst:5
#: ../../source/cli/token.rst:6
#: ../../source/cli/uninstall.rst:5
#: ../../source/cli/unpublish.rst:6
#: ../../source/cli/update.rst:6
#: ../../source/cli/version.rst:5
#: ../../source/cli/view.rst:5
#: ../../source/cli/whoami.rst:6
msgid "SYNOPSIS"
msgstr ""

#: ../../source/cli/access.rst:11
msgid "Set access level on published packages"
msgstr ""

#: ../../source/cli/access.rst:29
#: ../../source/cli/adduser.rst:30
#: ../../source/cli/audit.rst:76
#: ../../source/cli/bin.rst:18
#: ../../source/cli/bugs.rst:22
#: ../../source/cli/build.rst:20
#: ../../source/cli/bundle.rst:11
#: ../../source/cli/cache.rst:28
#: ../../source/cli/ci.rst:48
#: ../../source/cli/completion.rst:17
#: ../../source/cli/config.rst:27
#: ../../source/cli/dedupe.rst:27
#: ../../source/cli/deprecate.rst:18
#: ../../source/cli/dist-tag.rst:24
#: ../../source/cli/docs.rst:21
#: ../../source/cli/doctor.rst:18
#: ../../source/cli/edit.rst:18
#: ../../source/cli/explore.rst:18
#: ../../source/cli/help.rst:18
#: ../../source/cli/help-search.rst:18
#: ../../source/cli/hook.rst:46
#: ../../source/cli/init.rst:39
#: ../../source/cli/install.rst:38
#: ../../source/cli/install-ci-test.rst:22
#: ../../source/cli/install-test.rst:31
#: ../../source/cli/link.rst:23
#: ../../source/cli/logout.rst:18
#: ../../source/cli/ls.rst:27
#: ../../source/cli/npm.rst:21
#: ../../source/cli/org.rst:42
#: ../../source/cli/outdated.rst:18
#: ../../source/cli/owner.rst:25
#: ../../source/cli/pack.rst:19
#: ../../source/cli/ping.rst:18
#: ../../source/cli/prefix.rst:18
#: ../../source/cli/profile.rst:22
#: ../../source/cli/prune.rst:18
#: ../../source/cli/publish.rst:21
#: ../../source/cli/rebuild.rst:22
#: ../../source/cli/repo.rst:19
#: ../../source/cli/restart.rst:19
#: ../../source/cli/root.rst:18
#: ../../source/cli/run-script.rst:22
#: ../../source/cli/search.rst:30
#: ../../source/cli/shrinkwrap.rst:19
#: ../../source/cli/star.rst:19
#: ../../source/cli/stars.rst:18
#: ../../source/cli/start.rst:18
#: ../../source/cli/stop.rst:18
#: ../../source/cli/team.rst:26
#: ../../source/cli/test.rst:26
#: ../../source/cli/token.rst:21
#: ../../source/cli/uninstall.rst:38
#: ../../source/cli/unpublish.rst:28
#: ../../source/cli/update.rst:27
#: ../../source/cli/version.rst:22
#: ../../source/cli/view.rst:30
#: ../../source/cli/whoami.rst:19
msgid "DESCRIPTION"
msgstr ""

#: ../../source/cli/access.rst:31
msgid "Used to set access controls on private packages."
msgstr ""

#: ../../source/cli/access.rst:33
msgid "For all of the subcommands, npm access will perform actions on the packages in the current working directory if no package name is passed to the subcommand."
msgstr ""

#: ../../source/cli/access.rst:35
msgid "public / restricted: Set a package to be either publicly accessible or restricted."
msgstr ""

#: ../../source/cli/access.rst:36
msgid "grant / revoke: Add or remove the ability of users and teams to have read-only or read-write access to a package."
msgstr ""

#: ../../source/cli/access.rst:37
msgid "2fa-required / 2fa-not-required: Configure whether a package requires that anyone publishing it have two-factor authentication enabled on their account."
msgstr ""

#: ../../source/cli/access.rst:38
msgid "ls-packages: Show all of the packages a user or a team is able to access, along with the access level, except for read-only public packages (it won’t print the whole registry listing)"
msgstr ""

#: ../../source/cli/access.rst:39
msgid "ls-collaborators: Show all of the access privileges for a package. Will only show permissions for packages to which you have at least read access. If <user> is passed in, the list is filtered only to teams that user happens to belong to."
msgstr ""

#: ../../source/cli/access.rst:40
msgid "edit: Set the access privileges for a package at once using $EDITOR."
msgstr ""

#: ../../source/cli/access.rst:43
#: ../../source/cli/cache.rst:37
#: ../../source/cli/profile.rst:58
#: ../../source/cli/team.rst:41
msgid "DETAILS"
msgstr ""

#: ../../source/cli/access.rst:45
msgid "npm access always operates directly on the current registry, configurable from the command line using --registry=<registry url>."
msgstr ""

#: ../../source/cli/access.rst:47
msgid "Unscoped packages are always public."
msgstr ""

#: ../../source/cli/access.rst:49
msgid "Scoped packages default to restricted, but you can either publish them as public using npm publish --access=public, or set their access as public using npm access public after the initial publish."
msgstr ""

#: ../../source/cli/access.rst:51
msgid "You must have privileges to set the access of a package:"
msgstr ""

#: ../../source/cli/access.rst:53
msgid "You are an owner of an unscoped or scoped package."
msgstr ""

#: ../../source/cli/access.rst:54
msgid "You are a member of the team that owns a scope."
msgstr ""

#: ../../source/cli/access.rst:55
msgid "You have been given read-write privileges for a package, either as a member of a team or directly as an owner."
msgstr ""

#: ../../source/cli/access.rst:57
msgid "If you have two-factor authentication enabled then you’ll have to pass in an otp with --otp when making access changes."
msgstr ""

#: ../../source/cli/access.rst:59
msgid "If your account is not paid, then attempts to publish scoped packages will fail with an HTTP 402 status code (logically enough), unless you use --access=public."
msgstr ""

#: ../../source/cli/access.rst:61
msgid "Management of teams and team memberships is done with the npm team command."
msgstr ""

#: ../../source/cli/access.rst:64
#: ../../source/cli/adduser.rst:86
#: ../../source/cli/audit.rst:111
#: ../../source/cli/bin.rst:23
#: ../../source/cli/bugs.rst:46
#: ../../source/cli/build.rst:31
#: ../../source/cli/bundle.rst:18
#: ../../source/cli/cache.rst:65
#: ../../source/cli/ci.rst:61
#: ../../source/cli/completion.rst:33
#: ../../source/cli/config.rst:87
#: ../../source/cli/dedupe.rst:59
#: ../../source/cli/deprecate.rst:29
#: ../../source/cli/dist-tag.rst:72
#: ../../source/cli/docs.rst:39
#: ../../source/cli/doctor.rst:57
#: ../../source/cli/edit.rst:35
#: ../../source/cli/explore.rst:38
#: ../../source/cli/help.rst:35
#: ../../source/cli/help-search.rst:37
#: ../../source/cli/hook.rst:63
#: ../../source/cli/init.rst:55
#: ../../source/cli/install.rst:460
#: ../../source/cli/install-ci-test.rst:27
#: ../../source/cli/install-test.rst:36
#: ../../source/cli/link.rst:64
#: ../../source/cli/logout.rst:46
#: ../../source/cli/ls.rst:119
#: ../../source/cli/npm.rst:98
#: ../../source/cli/org.rst:47
#: ../../source/cli/outdated.rst:80
#: ../../source/cli/owner.rst:37
#: ../../source/cli/pack.rst:30
#: ../../source/cli/ping.rst:28
#: ../../source/cli/prefix.rst:25
#: ../../source/cli/profile.rst:63
#: ../../source/cli/prune.rst:35
#: ../../source/cli/publish.rst:46
#: ../../source/cli/rebuild.rst:27
#: ../../source/cli/repo.rst:32
#: ../../source/cli/restart.rst:43
#: ../../source/cli/root.rst:23
#: ../../source/cli/run-script.rst:63
#: ../../source/cli/scripts.rst:174
#: ../../source/cli/search.rst:86
#: ../../source/cli/shrinkwrap.rst:28
#: ../../source/cli/star.rst:28
#: ../../source/cli/stars.rst:25
#: ../../source/cli/start.rst:25
#: ../../source/cli/stop.rst:23
#: ../../source/cli/team.rst:52
#: ../../source/cli/test.rst:31
#: ../../source/cli/uninstall.rst:70
#: ../../source/cli/unpublish.rst:41
#: ../../source/cli/update.rst:108
#: ../../source/cli/version.rst:88
#: ../../source/cli/view.rst:79
#: ../../source/cli/whoami.rst:24
msgid "SEE ALSO"
msgstr ""

#: ../../source/cli/access.rst:66
msgid ":ref:`libnpmaccess`"
msgstr ""

#: ../../source/cli/access.rst:67
msgid ":option:`npm team`"
msgstr ""

#: ../../source/cli/access.rst:68
#: ../../source/cli/bugs.rst:50
#: ../../source/cli/cache.rst:72
#: ../../source/cli/deprecate.rst:31
#: ../../source/cli/dist-tag.rst:74
#: ../../source/cli/docs.rst:42
#: ../../source/cli/owner.rst:39
#: ../../source/cli/pack.rst:33
#: ../../source/cli/unpublish.rst:44
msgid ":option:`npm publish`"
msgstr ""

#: ../../source/cli/access.rst:69
#: ../../source/cli/adduser.rst:89
#: ../../source/cli/adduser.rst:90
#: ../../source/cli/bin.rst:28
#: ../../source/cli/bin.rst:29
#: ../../source/cli/bugs.rst:52
#: ../../source/cli/bugs.rst:53
#: ../../source/cli/cache.rst:69
#: ../../source/cli/config.rst:90
#: ../../source/cli/dist-tag.rst:78
#: ../../source/cli/dist-tag.rst:79
#: ../../source/cli/docs.rst:44
#: ../../source/cli/docs.rst:45
#: ../../source/cli/edit.rst:40
#: ../../source/cli/edit.rst:41
#: ../../source/cli/help.rst:40
#: ../../source/cli/help.rst:41
#: ../../source/cli/install.rst:469
#: ../../source/cli/install.rst:470
#: ../../source/cli/link.rst:70
#: ../../source/cli/link.rst:71
#: ../../source/cli/logout.rst:50
#: ../../source/cli/logout.rst:51
#: ../../source/cli/ls.rst:121
#: ../../source/cli/ls.rst:122
#: ../../source/cli/npm.rst:104
#: ../../source/cli/npm.rst:105
#: ../../source/cli/pack.rst:34
#: ../../source/cli/pack.rst:35
#: ../../source/cli/ping.rst:30
#: ../../source/cli/ping.rst:31
#: ../../source/cli/prefix.rst:30
#: ../../source/cli/prefix.rst:31
#: ../../source/cli/profile.rst:65
#: ../../source/cli/repo.rst:35
#: ../../source/cli/root.rst:28
#: ../../source/cli/root.rst:29
#: ../../source/cli/run-script.rst:70
#: ../../source/cli/search.rst:89
#: ../../source/cli/search.rst:90
#: ../../source/cli/uninstall.rst:75
#: ../../source/cli/uninstall.rst:76
#: ../../source/cli/view.rst:83
#: ../../source/cli/view.rst:84
#: ../../source/cli/whoami.rst:26
#: ../../source/cli/whoami.rst:27
msgid ":option:`npm config`"
msgstr ""

#: ../../source/cli/access.rst:70
#: ../../source/cli/adduser.rst:88
#: ../../source/cli/bugs.rst:51
#: ../../source/cli/deprecate.rst:32
#: ../../source/cli/dist-tag.rst:77
#: ../../source/cli/docs.rst:43
#: ../../source/cli/install.rst:472
#: ../../source/cli/logout.rst:49
#: ../../source/cli/outdated.rst:84
#: ../../source/cli/owner.rst:40
#: ../../source/cli/publish.rst:48
#: ../../source/cli/search.rst:88
#: ../../source/cli/team.rst:55
#: ../../source/cli/unpublish.rst:45
#: ../../source/cli/update.rst:113
#: ../../source/cli/view.rst:82
msgid ":ref:`registry`"
msgstr ""

#: ../../source/cli/adduser.rst:2
msgid "npm adduser"
msgstr ""

#: ../../source/cli/adduser.rst:11
msgid "Add a registry user account"
msgstr ""

#: ../../source/cli/adduser.rst:19
#: ../../source/cli/adduser.rst:23
msgid "adduser alias"
msgstr ""

#: ../../source/cli/adduser.rst:27
msgid "adduser param"
msgstr ""

#: ../../source/cli/adduser.rst:32
msgid "Create or verify a user named <username> in the specified registry, and save the credentials to the .npmrc file. If no registry is specified, the default registry will be used (see npm-config)."
msgstr ""

#: ../../source/cli/adduser.rst:34
msgid "The username, password, and email are read in from prompts."
msgstr ""

#: ../../source/cli/adduser.rst:36
msgid "To reset your password, go to https://www.npmjs.com/forgot"
msgstr ""

#: ../../source/cli/adduser.rst:38
msgid "To change your email address, go to https://www.npmjs.com/email-edit"
msgstr ""

#: ../../source/cli/adduser.rst:40
msgid "You may use this command multiple times with the same user account to authorize on a new machine. When authenticating on a new machine, the username, password and email address must all match with your existing record."
msgstr ""

#: ../../source/cli/adduser.rst:42
msgid "npm login is an alias to adduser and behaves exactly the same way."
msgstr ""

#: ../../source/cli/adduser.rst:45
#: ../../source/cli/bugs.rst:27
#: ../../source/cli/cache.rst:55
#: ../../source/cli/docs.rst:26
#: ../../source/cli/edit.rst:27
#: ../../source/cli/explore.rst:30
#: ../../source/cli/help.rst:25
#: ../../source/cli/help-search.rst:27
#: ../../source/cli/logout.rst:27
#: ../../source/cli/ls.rst:49
#: ../../source/cli/repo.rst:24
#: ../../source/cli/search.rst:43
#: ../../source/cli/version.rst:63
msgid "CONFIGURATION"
msgstr ""

#: ../../source/cli/adduser.rst:48
#: ../../source/cli/bugs.rst:38
#: ../../source/cli/logout.rst:30
msgid "registry"
msgstr ""

#: ../../source/cli/adduser.rst:50
#: ../../source/cli/bugs.rst:40
#: ../../source/cli/logout.rst:33
msgid "Default: https://registry.npmjs.org/"
msgstr ""

#: ../../source/cli/adduser.rst:52
msgid "The base URL of the npm package registry. If scope is also specified, this registry will only be used for packages with that scope. scope defaults to the scope of the project directory you’re currently in, if any. See npm-scope."
msgstr ""

#: ../../source/cli/adduser.rst:55
#: ../../source/cli/logout.rst:37
msgid "scope"
msgstr ""

#: ../../source/cli/adduser.rst:57
msgid "Default: none"
msgstr ""

#: ../../source/cli/adduser.rst:59
msgid "If specified, the user and login credentials given will be associated with the specified scope. See npm-scope. You can use both at the same time, e.g."
msgstr ""

#: ../../source/cli/adduser.rst:61
msgid "npm adduser --registry=http://myregistry.example.com --scope=@myco This will set a registry for the given scope and login or create a user for that registry at the same time."
msgstr ""

#: ../../source/cli/adduser.rst:65
msgid "always-auth"
msgstr ""

#: ../../source/cli/adduser.rst:67
msgid "Default: false"
msgstr ""

#: ../../source/cli/adduser.rst:69
msgid "If specified, save configuration indicating that all requests to the given registry should include authorization information. Useful for private registries. Can be used with --registry and / or --scope, e.g."
msgstr ""

#: ../../source/cli/adduser.rst:75
msgid "This will ensure that all requests to that registry (including for tarballs) include an authorization header. This setting may be necessary for use with private registries where metadata and package tarballs are stored on hosts with different hostnames. See always-auth in npm-config for more details on always-auth. Registry-specific configuration of always-auth takes precedence over any global configuration."
msgstr ""

#: ../../source/cli/adduser.rst:78
msgid "auth-type"
msgstr ""

#: ../../source/cli/adduser.rst:80
msgid "Default: 'legacy'"
msgstr ""

#: ../../source/cli/adduser.rst:81
msgid "Type: 'legacy', 'sso', 'saml', 'oauth'"
msgstr ""

#: ../../source/cli/adduser.rst:83
msgid "What authentication strategy to use with adduser/login. Some npm registries (for example, npmE) might support alternative auth strategies besides classic username/password entry in legacy npm."
msgstr ""

#: ../../source/cli/adduser.rst:91
#: ../../source/cli/bin.rst:30
#: ../../source/cli/config.rst:92
#: ../../source/cli/dist-tag.rst:80
#: ../../source/cli/docs.rst:46
#: ../../source/cli/edit.rst:42
#: ../../source/cli/help.rst:42
#: ../../source/cli/install.rst:471
#: ../../source/cli/link.rst:72
#: ../../source/cli/logout.rst:52
#: ../../source/cli/ls.rst:123
#: ../../source/cli/npm.rst:106
#: ../../source/cli/pack.rst:36
#: ../../source/cli/ping.rst:32
#: ../../source/cli/prefix.rst:32
#: ../../source/cli/root.rst:30
#: ../../source/cli/search.rst:91
#: ../../source/cli/uninstall.rst:77
#: ../../source/cli/view.rst:85
#: ../../source/cli/whoami.rst:28
msgid ":ref:`npmrc`"
msgstr ""

#: ../../source/cli/adduser.rst:92
#: ../../source/cli/publish.rst:51
#: ../../source/cli/unpublish.rst:47
msgid ":option:`npm owner`"
msgstr ""

#: ../../source/cli/adduser.rst:93
#: ../../source/cli/logout.rst:53
#: ../../source/cli/star.rst:31
#: ../../source/cli/stars.rst:29
msgid ":option:`npm whoami`"
msgstr ""

#: ../../source/cli/audit.rst:2
msgid "npm audit"
msgstr ""

#: ../../source/cli/audit.rst:11
msgid "Run a security audit"
msgstr ""

#: ../../source/cli/audit.rst:19
#: ../../source/cli/init.rst:20
#: ../../source/cli/scripts.rst:125
#: ../../source/cli/update.rst:42
msgid "EXAMPLES"
msgstr ""

#: ../../source/cli/audit.rst:21
msgid "Scan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:"
msgstr ""

#: ../../source/cli/audit.rst:27
msgid "Run audit fix without modifying node_modules, but still updating the pkglock:"
msgstr ""

#: ../../source/cli/audit.rst:33
msgid "Skip updating devDependencies:"
msgstr ""

#: ../../source/cli/audit.rst:39
msgid "Have audit fix install semver-major updates to toplevel dependencies, not just semver-compatible ones:"
msgstr ""

#: ../../source/cli/audit.rst:45
msgid "Do a dry run to get an idea of what audit fix will do, and also output install information in JSON format:"
msgstr ""

#: ../../source/cli/audit.rst:51
msgid "Scan your project for vulnerabilities and just show the details, without fixing anything:"
msgstr ""

#: ../../source/cli/audit.rst:57
msgid "Get the detailed audit report in JSON format:"
msgstr ""

#: ../../source/cli/audit.rst:63
msgid "Get the detailed audit report in plain text result, separated by tab characters, allowing for future reuse in scripting or command line post processing, like for example, selecting some of the columns printed:"
msgstr ""

#: ../../source/cli/audit.rst:69
msgid "To parse columns, you can use for example awk, and just print some of them:"
msgstr ""

#: ../../source/cli/audit.rst:78
msgid "The audit command submits a description of the dependencies configured in your project to your default registry and asks for a report of known vulnerabilities. The report returned includes instructions on how to act on this information. The command will exit with a 0 exit code if no vulnerabilities were found."
msgstr ""

#: ../../source/cli/audit.rst:80
msgid "You can also have npm automatically fix the vulnerabilities by running ``npm audit fix``. Note that some vulnerabilities cannot be fixed automatically and will require manual intervention or review. Also note that since ``npm audit fix`` runs a full-fledged :option:`npm install` under the hood, all configs that apply to the installer will also apply to :option:`npm install` – so things like ``npm audit fix --package-lock-only`` will work as expected."
msgstr ""

#: ../../source/cli/audit.rst:83
msgid "CONTENT SUBMITTED"
msgstr ""

#: ../../source/cli/audit.rst:85
msgid "npm_version"
msgstr ""

#: ../../source/cli/audit.rst:86
msgid "node_version"
msgstr ""

#: ../../source/cli/audit.rst:87
msgid "platform"
msgstr ""

#: ../../source/cli/audit.rst:88
msgid "node_env"
msgstr ""

#: ../../source/cli/audit.rst:89
msgid "A scrubbed version of your package-lock.json or npm-shrinkwrap.json"
msgstr ""

#: ../../source/cli/audit.rst:92
msgid "SCRUBBING"
msgstr ""

#: ../../source/cli/audit.rst:94
msgid "In order to ensure that potentially sensitive information is not included in the audit data bundle, some dependencies may have their names (and sometimes versions) replaced with opaque non-reversible identifiers. It is done for the following dependency types:"
msgstr ""

#: ../../source/cli/audit.rst:96
msgid "Any module referencing a scope that is configured for a non-default registry has its name scrubbed. (That is, a scope you did a ``npm login --scope=@ourscope`` for.)"
msgstr ""

#: ../../source/cli/audit.rst:97
msgid "All git dependencies have their names and specifiers scrubbed."
msgstr ""

#: ../../source/cli/audit.rst:98
msgid "All remote tarball dependencies have their names and specifiers scrubbed."
msgstr ""

#: ../../source/cli/audit.rst:99
msgid "All local directory and tarball dependencies have their names and specifiers scrubbed."
msgstr ""

#: ../../source/cli/audit.rst:101
msgid "The non-reversible identifiers are a sha256 of a session-specific UUID and the value being replaced, ensuring a consistent value within the payload that is different between runs."
msgstr ""

#: ../../source/cli/audit.rst:104
msgid "EXIT CODE"
msgstr ""

#: ../../source/cli/audit.rst:106
msgid "The :option:`npm audit` command will exit with a 0 exit code if no vulnerabilities were found."
msgstr ""

#: ../../source/cli/audit.rst:108
msgid "If vulnerabilities were found the exit code will depend on the ``audit-level`` configuration setting."
msgstr ""

#: ../../source/cli/audit.rst:113
#: ../../source/cli/build.rst:33
#: ../../source/cli/bundle.rst:20
#: ../../source/cli/cache.rst:71
#: ../../source/cli/ci.rst:63
#: ../../source/cli/dedupe.rst:63
#: ../../source/cli/dist-tag.rst:75
#: ../../source/cli/edit.rst:39
#: ../../source/cli/explore.rst:44
#: ../../source/cli/link.rst:68
#: ../../source/cli/ls.rst:125
#: ../../source/cli/npm.rst:103
#: ../../source/cli/rebuild.rst:30
#: ../../source/cli/scripts.rst:179
#: ../../source/cli/shrinkwrap.rst:30
#: ../../source/cli/uninstall.rst:73
#: ../../source/cli/update.rst:110
msgid ":option:`npm install`"
msgstr ""

#: ../../source/cli/audit.rst:114
msgid ":option:`package-locks`"
msgstr ""

#: ../../source/cli/audit.rst:115
#: ../../source/cli/version.rst:95
msgid ":option:`config`"
msgstr ""

#: ../../source/cli/bin.rst:2
msgid "npm bin"
msgstr ""

#: ../../source/cli/bin.rst:11
msgid "Display npm bin folder"
msgstr ""

#: ../../source/cli/bin.rst:20
msgid "Print the folder where npm will install executables."
msgstr ""

#: ../../source/cli/bin.rst:25
#: ../../source/cli/root.rst:25
msgid ":option:`npm prefix`"
msgstr ""

#: ../../source/cli/bin.rst:26
#: ../../source/cli/prefix.rst:27
msgid ":option:`npm root`"
msgstr ""

#: ../../source/cli/bin.rst:27
#: ../../source/cli/cache.rst:67
#: ../../source/cli/config.rst:89
#: ../../source/cli/edit.rst:37
#: ../../source/cli/explore.rst:40
#: ../../source/cli/help.rst:39
#: ../../source/cli/install.rst:462
#: ../../source/cli/link.rst:69
#: ../../source/cli/ls.rst:124
#: ../../source/cli/outdated.rst:85
#: ../../source/cli/prefix.rst:29
#: ../../source/cli/prune.rst:38
#: ../../source/cli/root.rst:27
#: ../../source/cli/uninstall.rst:74
#: ../../source/cli/update.rst:114
msgid ":ref:`folders`"
msgstr ""

#: ../../source/cli/bugs.rst:2
msgid "npm bugs"
msgstr ""

#: ../../source/cli/bugs.rst:11
msgid "Bugs for a package in a web browser maybe"
msgstr ""

#: ../../source/cli/bugs.rst:19
msgid "bugs aliases"
msgstr ""

#: ../../source/cli/bugs.rst:24
msgid "This command tries to guess at the likely location of a package’s bug tracker URL, and then tries to open it using the ``--browser`` config param. If no package name is provided, it will search for a :doc:`../files/package.json` in the current folder and use the **name** property."
msgstr ""

#: ../../source/cli/bugs.rst:30
msgid "browser"
msgstr ""

#: ../../source/cli/bugs.rst:32
msgid "Default: OS X: **\"open\"**, Windows: **\"start\"**, Others: **\"xdg-open\"**"
msgstr ""

#: ../../source/cli/bugs.rst:33
msgid "Type: String"
msgstr ""

#: ../../source/cli/bugs.rst:35
msgid "The browser that is called by the :option:`npm bugs` command to open websites."
msgstr ""

#: ../../source/cli/bugs.rst:41
msgid "Type: url"
msgstr ""

#: ../../source/cli/bugs.rst:43
msgid "The base URL of the npm package registry."
msgstr ""

#: ../../source/cli/bugs.rst:48
#: ../../source/cli/repo.rst:34
#: ../../source/cli/view.rst:86
msgid ":option:`npm docs`"
msgstr ""

#: ../../source/cli/bugs.rst:49
#: ../../source/cli/docs.rst:41
#: ../../source/cli/search.rst:92
#: ../../source/cli/star.rst:30
#: ../../source/cli/stars.rst:28
msgid ":option:`npm view`"
msgstr ""

#: ../../source/cli/bugs.rst:54
#: ../../source/cli/cache.rst:70
msgid ":doc:`../files/npmrc`"
msgstr ""

#: ../../source/cli/bugs.rst:55
#: ../../source/cli/scripts.rst:177
msgid ":doc:`../files/package.json`"
msgstr ""

#: ../../source/cli/build.rst:2
msgid "npm build"
msgstr ""

#: ../../source/cli/build.rst:11
msgid "Build a package"
msgstr ""

#: ../../source/cli/build.rst:17
msgid "<package-folder>: A folder containing a package.json file in its root."
msgstr ""

#: ../../source/cli/build.rst:22
msgid "This is the plumbing command called by npm link and npm install."
msgstr ""

#: ../../source/cli/build.rst:24
msgid "It should generally be called during installation, but if you need to run it directly, run:"
msgstr ""

#: ../../source/cli/build.rst:34
#: ../../source/cli/install.rst:465
#: ../../source/cli/ls.rst:126
msgid ":option:`npm link`"
msgstr ""

#: ../../source/cli/build.rst:35
#: ../../source/cli/restart.rst:46
#: ../../source/cli/start.rst:28
#: ../../source/cli/stop.rst:26
#: ../../source/cli/version.rst:92
msgid ":option:`npm scripts`"
msgstr ""

#: ../../source/cli/build.rst:36
#: ../../source/cli/config.rst:91
#: ../../source/cli/docs.rst:47
#: ../../source/cli/help.rst:43
#: ../../source/cli/init.rst:58
#: ../../source/cli/install.rst:476
#: ../../source/cli/link.rst:67
#: ../../source/cli/npm.rst:102
#: ../../source/cli/shrinkwrap.rst:33
#: ../../source/cli/version.rst:93
msgid ":ref:`package.json`"
msgstr ""

#: ../../source/cli/bundle.rst:2
msgid "npm bundle"
msgstr ""

#: ../../source/cli/bundle.rst:8
msgid "REMOVED"
msgstr ""

#: ../../source/cli/bundle.rst:13
msgid "The npm bundle command has been removed in 1.0, for the simple reason that it is no longer necessary, as the default behavior is now to install packages into the local space."
msgstr ""

#: ../../source/cli/bundle.rst:15
msgid "Just use npm install now to do what npm bundle used to do."
msgstr ""

#: ../../source/cli/cache.rst:2
msgid "npm cache"
msgstr ""

#: ../../source/cli/cache.rst:4
msgid "Manipulates packages cache"
msgstr ""

#: ../../source/cli/cache.rst:21
msgid "aliases: npm cache clear, npm cache rm"
msgstr ""

#: ../../source/cli/cache.rst:30
msgid "Used to add, list, or clean the npm cache folder."
msgstr ""

#: ../../source/cli/cache.rst:32
msgid "**add:** Add the specified package to the local cache. This command is primarily intended to be used internally by npm, but it can provide a way to add data to the local installation cache explicitly."
msgstr ""

#: ../../source/cli/cache.rst:33
msgid "**clean:** Delete all data out of the cache folder."
msgstr ""

#: ../../source/cli/cache.rst:34
msgid "**verify:** Verify the contents of the cache folder, garbage collecting any unneeded data, and verifying the integrity of the cache index and all cached data."
msgstr ""

#: ../../source/cli/cache.rst:39
msgid "npm stores cache data in an opaque directory within the configured cache, named _cacache. This directory is a cacache-based content-addressable cache that stores all http request data as well as other package-related data. This directory is primarily accessed through pacote, the library responsible for all package fetching as of npm@5."
msgstr ""

#: ../../source/cli/cache.rst:41
msgid "All data that passes through the cache is fully verified for integrity on both insertion and extraction. Cache corruption will either trigger an error, or signal to pacote that the data must be refetched, which it will do automatically. For this reason, it should never be necessary to clear the cache for any reason other than reclaiming disk space, thus why clean now requires --force to run."
msgstr ""

#: ../../source/cli/cache.rst:43
msgid "There is currently no method exposed through npm to inspect or directly manage the contents of this cache. In order to access it, cacache must be used directly."
msgstr ""

#: ../../source/cli/cache.rst:45
msgid "npm will not remove data by itself: the cache will grow as new packages are installed."
msgstr ""

#: ../../source/cli/cache.rst:48
msgid "A NOTE ABOUT THE CACHE’S DESIGN"
msgstr ""

#: ../../source/cli/cache.rst:50
msgid "The npm cache is strictly a cache: it should not be relied upon as a persistent and reliable data store for package data. npm makes no guarantee that a previously-cached piece of data will be available later, and will automatically delete corrupted contents. The primary guarantee that the cache makes is that, if it does return data, that data will be exactly the data that was inserted."
msgstr ""

#: ../../source/cli/cache.rst:52
msgid "To run an offline verification of existing cache contents, use npm cache verify."
msgstr ""

#: ../../source/cli/cache.rst:58
msgid "cache"
msgstr ""

#: ../../source/cli/cache.rst:60
msgid "Default: **~/.npm** on Posix, or **%AppData%/npm-cache** on Windows."
msgstr ""

#: ../../source/cli/cache.rst:62
msgid "The root cache folder."
msgstr ""

#: ../../source/cli/cache.rst:68
msgid ":config:`npm config`"
msgstr ""

#: ../../source/cli/cache.rst:73
#: ../../source/cli/publish.rst:54
msgid ":option:`npm pack`"
msgstr ""

#: ../../source/cli/cache.rst:74
msgid "https://npm.im/cacache"
msgstr ""

#: ../../source/cli/cache.rst:75
msgid "https://npm.im/pacote"
msgstr ""

#: ../../source/cli/ci.rst:2
msgid "npm ci"
msgstr ""

#: ../../source/cli/ci.rst:10
msgid "Install a project with a clean slate"
msgstr ""

#: ../../source/cli/ci.rst:17
#: ../../source/cli/hook.rst:21
#: ../../source/cli/org.rst:20
msgid "EXAMPLE"
msgstr ""

#: ../../source/cli/ci.rst:19
msgid "Make sure you have a package-lock and an up-to-date install:"
msgstr ""

#: ../../source/cli/ci.rst:28
msgid "Run npm ci in that project"
msgstr ""

#: ../../source/cli/ci.rst:35
msgid "Configure Travis to build using :option:`npm ci` instead of :option:`npm install`:"
msgstr ""

#: ../../source/cli/ci.rst:50
msgid "This command is similar to :option:`npm install`, except it’s meant to be used in automated environments such as test platforms, continuous integration, and deployment – or any situation where you want to make sure you’re doing a clean install of your dependencies. It can be significantly faster than a regular npm install by skipping certain user-oriented features. It is also more strict than a regular install, which can help catch errors or inconsistencies caused by the incrementally-installed local environments of most npm users."
msgstr ""

#: ../../source/cli/ci.rst:52
msgid "In short, the main differences between using `npm install` and `npm ci` are:"
msgstr ""

#: ../../source/cli/ci.rst:54
msgid "The project **must** have an existing `package-lock.json` or `npm-shrinkwrap.json`."
msgstr ""

#: ../../source/cli/ci.rst:55
msgid "If dependencies in the package lock do not match those in `package.json`, `npm ci` will exit with an error, instead of updating the package lock."
msgstr ""

#: ../../source/cli/ci.rst:56
msgid "`npm ci` can only install entire projects at a time: individual dependencies cannot be added with this command."
msgstr ""

#: ../../source/cli/ci.rst:57
msgid "If a **node_modules** is already present, it will be automatically removed before `npm ci` begins its install."
msgstr ""

#: ../../source/cli/ci.rst:58
msgid "It will never write to `package.json` or any of the package-locks: installs are essentially frozen."
msgstr ""

#: ../../source/cli/ci.rst:64
msgid ":option:`npm package locks`"
msgstr ""

#: ../../source/cli/completion.rst:2
msgid "npm completion"
msgstr ""

#: ../../source/cli/completion.rst:10
msgid "Tab Completion for npm"
msgstr ""

#: ../../source/cli/completion.rst:19
msgid "Enables tab-completion in all npm commands."
msgstr ""

#: ../../source/cli/completion.rst:21
msgid "The synopsis above loads the completions into your current shell. Adding it to your **~/.bashrc** or **~/.zshrc** will make the completions available everywhere:"
msgstr ""

#: ../../source/cli/completion.rst:28
msgid "You may of course also pipe the output of :option:`npm completion` to a file such as **/usr/local/etc/bash_completion.d/npm** or **/etc/bash_completion.d/npm** if you have a system that will read that file for you."
msgstr ""

#: ../../source/cli/completion.rst:30
msgid "When **COMP_CWORD**, **COMP_LINE**, and **COMP_POINT** are defined in the environment, :option:`npm completion` acts in “plumbing mode”, and outputs completions based on the arguments."
msgstr ""

#: ../../source/cli/completion.rst:35
#: ../../source/cli/link.rst:66
msgid ":option:`npm developers`"
msgstr ""

#: ../../source/cli/completion.rst:36
msgid ":program:`npm`"
msgstr ""

#: ../../source/cli/config.rst:2
msgid "npm config"
msgstr ""

#: ../../source/cli/config.rst:10
msgid "Manage the npm configuration files"
msgstr ""

#: ../../source/cli/config.rst:24
msgid "config alias"
msgstr ""

#: ../../source/cli/config.rst:29
msgid "npm gets its config settings from the command line, environment variables, :doc:`../files/npmrc` files, and in some cases, the :doc:`../files/package.json` file."
msgstr ""

#: ../../source/cli/config.rst:31
msgid "See :doc:`../files/npmrc` for more information about the npmrc files."
msgstr ""

#: ../../source/cli/config.rst:33
msgid "See :option:`npm config` for a more thorough discussion of the mechanisms involved."
msgstr ""

#: ../../source/cli/config.rst:35
msgid "The :option:`npm config` command can be used to update and edit the contents of the user and global npmrc files."
msgstr ""

#: ../../source/cli/config.rst:38
msgid "Sub-commands"
msgstr ""

#: ../../source/cli/config.rst:40
msgid "Config supports the following sub-commands:"
msgstr ""

#: ../../source/cli/config.rst:43
msgid "set"
msgstr ""

#: ../../source/cli/config.rst:45
msgid "npm config set key value Sets the config key to the value."
msgstr ""

#: ../../source/cli/config.rst:48
msgid "If value is omitted, then it sets it to “true”."
msgstr ""

#: ../../source/cli/config.rst:51
msgid "get"
msgstr ""

#: ../../source/cli/config.rst:57
msgid "Echo the config value to stdout."
msgstr ""

#: ../../source/cli/config.rst:60
msgid "list"
msgstr ""

#: ../../source/cli/config.rst:66
msgid "Show all the config settings. Use -l to also show defaults. Use --json to show the settings in json format."
msgstr ""

#: ../../source/cli/config.rst:69
msgid "delete"
msgstr ""

#: ../../source/cli/config.rst:75
msgid "Deletes the key from all configuration files."
msgstr ""

#: ../../source/cli/config.rst:78
msgid "edit"
msgstr ""

#: ../../source/cli/config.rst:84
msgid "Opens the config file in an editor. Use the --global flag to edit the global config."
msgstr ""

#: ../../source/cli/config.rst:93
#: ../../source/cli/help.rst:37
#: ../../source/cli/help-search.rst:39
msgid ":option:`npm`"
msgstr ""

#: ../../source/cli/dedupe.rst:2
msgid "npm dedupe"
msgstr ""

#: ../../source/cli/dedupe.rst:11
msgid "Reduce duplication"
msgstr ""

#: ../../source/cli/dedupe.rst:20
#: ../../source/cli/dedupe.rst:24
msgid "dedupe alias"
msgstr ""

#: ../../source/cli/dedupe.rst:29
msgid "Searches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can be more effectively shared by multiple dependent packages."
msgstr ""

#: ../../source/cli/dedupe.rst:31
msgid "For example, consider this dependency graph::"
msgstr ""

#: ../../source/cli/dedupe.rst:39
msgid "In this case, npm-dedupe will transform the tree to::"
msgstr ""

#: ../../source/cli/dedupe.rst:46
msgid "Because of the hierarchical nature of node’s module lookup, b and d will both get their dependency met by the single c package at the root level of the tree."
msgstr ""

#: ../../source/cli/dedupe.rst:48
msgid "The deduplication algorithm walks the tree, moving each dependency as far up in the tree as possible, even if duplicates are not found. This will result in both a flat and deduplicated tree."
msgstr ""

#: ../../source/cli/dedupe.rst:50
msgid "If a suitable version exists at the target location in the tree already, then it will be left untouched, but the other duplicates will be deleted."
msgstr ""

#: ../../source/cli/dedupe.rst:52
msgid "Arguments are ignored. Dedupe always acts on the entire tree."
msgstr ""

#: ../../source/cli/dedupe.rst:54
msgid "Modules"
msgstr ""

#: ../../source/cli/dedupe.rst:56
msgid "Note that this operation transforms the dependency tree, but will never result in new modules being installed."
msgstr ""

#: ../../source/cli/dedupe.rst:61
#: ../../source/cli/prune.rst:39
#: ../../source/cli/shrinkwrap.rst:37
#: ../../source/cli/update.rst:115
msgid ":option:`npm ls`"
msgstr ""

#: ../../source/cli/dedupe.rst:62
#: ../../source/cli/install.rst:463
#: ../../source/cli/ls.rst:129
#: ../../source/cli/outdated.rst:82
msgid ":option:`npm update`"
msgstr ""

#: ../../source/cli/deprecate.rst:2
msgid "npm deprecate"
msgstr ""

#: ../../source/cli/deprecate.rst:4
msgid "Deprecate a version of a package"
msgstr ""

#: ../../source/cli/deprecate.rst:19
msgid "This command will update the npm registry entry for a package, providing a deprecation warning to all who attempt to install it."
msgstr ""

#: ../../source/cli/deprecate.rst:21
msgid "It works on version ranges as well as specific versions, so you can do something like this:"
msgstr ""

#: ../../source/cli/deprecate.rst:23
msgid "npm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\" Note that you must be the package owner to deprecate something. See the owner and adduser help topics."
msgstr ""

#: ../../source/cli/deprecate.rst:26
msgid "To un-deprecate a package, specify an empty string (\"\") for the message argument. Note that you must use double quotes with no space between them to format an empty string."
msgstr ""

#: ../../source/cli/dist-tag.rst:2
msgid "npm dist-tag"
msgstr ""

#: ../../source/cli/dist-tag.rst:4
msgid "Modify package distribution tags"
msgstr ""

#: ../../source/cli/dist-tag.rst:21
msgid "dist-tag aliases"
msgstr ""

#: ../../source/cli/dist-tag.rst:25
msgid "Add, remove, and enumerate distribution tags on a package:"
msgstr ""

#: ../../source/cli/dist-tag.rst:27
msgid "add: Tags the specified version of the package with the specified tag, or the --tag config if not specified. If you have two-factor authentication on auth-and-writes then you’ll need to include a one-time password on the command line with --otp <one-time password>."
msgstr ""

#: ../../source/cli/dist-tag.rst:29
msgid "rm: Clear a tag that is no longer in use from the package."
msgstr ""

#: ../../source/cli/dist-tag.rst:31
msgid "ls: Show all of the dist-tags for a package, defaulting to the package in the current prefix."
msgstr ""

#: ../../source/cli/dist-tag.rst:33
msgid "This is the default action if none is specified."
msgstr ""

#: ../../source/cli/dist-tag.rst:35
msgid "A tag can be used when installing packages as a reference to a version instead of using a specific version number:"
msgstr ""

#: ../../source/cli/dist-tag.rst:37
msgid "npm install <name>@<tag> When installing dependencies, a preferred tagged version may be specified:"
msgstr ""

#: ../../source/cli/dist-tag.rst:40
msgid "npm install --tag <tag> This also applies to npm dedupe."
msgstr ""

#: ../../source/cli/dist-tag.rst:43
msgid "Publishing a package sets the latest tag to the published version unless the --tag option is used. For example, npm publish --tag=beta."
msgstr ""

#: ../../source/cli/dist-tag.rst:45
msgid "By default, npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag."
msgstr ""

#: ../../source/cli/dist-tag.rst:48
msgid "PURPOSE"
msgstr ""

#: ../../source/cli/dist-tag.rst:50
msgid "Tags can be used to provide an alias instead of version numbers."
msgstr ""

#: ../../source/cli/dist-tag.rst:52
msgid "For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., stable, beta, dev, canary."
msgstr ""

#: ../../source/cli/dist-tag.rst:54
msgid "By default, the latest tag is used by npm to identify the current version of a package, and npm install <pkg> (without any @<version> or @<tag> specifier) installs the latest tag. Typically, projects only use the latest tag for stable release versions, and use other tags for unstable versions such as prereleases."
msgstr ""

#: ../../source/cli/dist-tag.rst:56
msgid "The next tag is used by some projects to identify the upcoming version."
msgstr ""

#: ../../source/cli/dist-tag.rst:58
msgid "By default, other than latest, no tag has any special significance to npm itself."
msgstr ""

#: ../../source/cli/dist-tag.rst:61
msgid "CAVEATS"
msgstr ""

#: ../../source/cli/dist-tag.rst:63
msgid "This command used to be known as npm tag, which only created new tags, and so had a different syntax."
msgstr ""

#: ../../source/cli/dist-tag.rst:65
msgid "Tags must share a namespace with version numbers, because they are specified in the same slot: npm install <pkg>@<version> vs npm install <pkg>@<tag>."
msgstr ""

#: ../../source/cli/dist-tag.rst:67
msgid "Tags that can be interpreted as valid semver ranges will be rejected. For example, v1.4 cannot be used as a tag, because it is interpreted by semver as >=1.4.0 <1.5.0. See https://github.com/npm/npm/issues/6082."
msgstr ""

#: ../../source/cli/dist-tag.rst:69
msgid "The simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter v."
msgstr ""

#: ../../source/cli/dist-tag.rst:76
msgid ":option:`npm dedupe`"
msgstr ""

#: ../../source/cli/docs.rst:2
msgid "npm docs"
msgstr ""

#: ../../source/cli/docs.rst:4
msgid "Docs for a package in a web browser maybe"
msgstr ""

#: ../../source/cli/docs.rst:23
msgid "This command tries to guess at the likely location of a package’s documentation URL, and then tries to open it using the --browser config param. You can pass multiple package names at once. If no package name is provided, it will search for a package.json in the current folder and use the name property."
msgstr ""

#: ../../source/cli/docs.rst:28
msgid "browser Default: OS X: \"open\", Windows: \"start\", Others: \"xdg-open\" Type: String The browser that is called by the npm docs command to open websites."
msgstr ""

#: ../../source/cli/docs.rst:33
msgid "registry Default: https://registry.npmjs.org/ Type: url The base URL of the npm package registry."
msgstr ""

#: ../../source/cli/doctor.rst:2
msgid "npm doctor"
msgstr ""

#: ../../source/cli/doctor.rst:4
msgid "Check your environments"
msgstr ""

#: ../../source/cli/doctor.rst:20
msgid "npm doctor runs a set of checks to ensure that your npm installation has what it needs to manage your JavaScript packages. npm is mostly a standalone tool, but it does have some basic requirements that must be met:"
msgstr ""

#: ../../source/cli/doctor.rst:22
msgid "Node.js and git must be executable by npm. The primary npm registry, registry.npmjs.com, or another service that uses the registry API, is available. The directories that npm uses, node_modules (both locally and globally), exist and can be written by the current user. The npm cache exists, and the package tarballs within it aren’t corrupt. Without all of these working properly, npm may not work properly. Many issues are often attributable to things that are outside npm’s code base, so npm doctor confirms that the npm installation is in a good state."
msgstr ""

#: ../../source/cli/doctor.rst:28
msgid "Also, in addition to this, there are also very many issue reports due to using old versions of npm. Since npm is constantly improving, running npm@latest is better than an old version."
msgstr ""

#: ../../source/cli/doctor.rst:30
msgid "npm doctor verifies the following items in your environment, and if there are any recommended changes, it will display them."
msgstr ""

#: ../../source/cli/doctor.rst:32
msgid "npm ping By default, npm installs from the primary npm registry, registry.npmjs.org. npm doctor hits a special ping endpoint within the registry. This can also be checked with npm ping. If this check fails, you may be using a proxy that needs to be configured, or may need to talk to your IT staff to get access over HTTPS to registry.npmjs.org."
msgstr ""

#: ../../source/cli/doctor.rst:35
msgid "This check is done against whichever registry you’ve configured (you can see what that is by running npm config get registry), and if you’re using a private registry that doesn’t support the /whoami endpoint supported by the primary registry, this check may fail."
msgstr ""

#: ../../source/cli/doctor.rst:37
msgid "npm -v While Node.js may come bundled with a particular version of npm, it’s the policy of the CLI team that we recommend all users run npm@latest if they can. As the CLI is maintained by a small team of contributors, there are only resources for a single line of development, so npm’s own long-term support releases typically only receive critical security and regression fixes. The team believes that the latest tested version of npm is almost always likely to be the most functional and defect-free version of npm."
msgstr ""

#: ../../source/cli/doctor.rst:40
msgid "node -v For most users, in most circumstances, the best version of Node will be the latest long-term support (LTS) release. Those of you who want access to new ECMAscript features or bleeding-edge changes to Node’s standard library may be running a newer version, and some of you may be required to run an older version of Node because of enterprise change control policies. That’s OK! But in general, the npm team recommends that most users run Node.js LTS."
msgstr ""

#: ../../source/cli/doctor.rst:43
msgid "npm config get registry Some of you may be installing from private package registries for your project or company. That’s great! Others of you may be following tutorials or StackOverflow questions in an effort to troubleshoot problems you may be having. Sometimes, this may entail changing the registry you’re pointing at. This part of npm doctor just lets you, and maybe whoever’s helping you with support, know that you’re not using the default registry."
msgstr ""

#: ../../source/cli/doctor.rst:46
msgid "which git While it’s documented in the README, it may not be obvious that npm needs Git installed to do many of the things that it does. Also, in some cases – especially on Windows – you may have Git set up in such a way that it’s not accessible via your PATH so that npm can find it. This check ensures that Git is available."
msgstr ""

#: ../../source/cli/doctor.rst:49
msgid "Permissions checks Your cache must be readable and writable by the user running npm. Global package binaries must be writable by the user running npm. Your local node_modules path, if you’re running npm doctor with a project directory, must be readable and writable by the user running npm. Validate the checksums of cached packages When an npm package is published, the publishing process generates a checksum that npm uses at install time to verify that the package didn’t get corrupted in transit. npm doctor uses these checksums to validate the package tarballs in your local cache (you can see where that cache is located with npm config get cache, and see what’s in that cache with npm cache ls – probably more than you were expecting!). In the event that there are corrupt packages in your cache, you should probably run npm cache clean and reset the cache."
msgstr ""

#: ../../source/cli/doctor.rst:59
msgid ":option:`npm bugs`"
msgstr ""

#: ../../source/cli/doctor.rst:60
#: ../../source/cli/help-search.rst:40
#: ../../source/cli/npm.rst:100
msgid ":option:`npm help`"
msgstr ""

#: ../../source/cli/doctor.rst:61
msgid ":option:`npm ping`"
msgstr ""

#: ../../source/cli/edit.rst:2
msgid "npm edit"
msgstr ""

#: ../../source/cli/edit.rst:4
msgid "Edit an installed package"
msgstr ""

#: ../../source/cli/edit.rst:20
msgid "Selects a (sub)dependency in the current working directory and opens the package folder in the default editor (or whatever you’ve configured as the npm editor config – see npm-config.)"
msgstr ""

#: ../../source/cli/edit.rst:22
msgid "After it has been edited, the package is rebuilt so as to pick up any changes in compiled packages."
msgstr ""

#: ../../source/cli/edit.rst:24
msgid "For instance, you can do npm install connect to install connect into your package, and then npm edit connect to make a few changes to your locally installed copy."
msgstr ""

#: ../../source/cli/edit.rst:29
msgid "editor Default: EDITOR environment variable if set, or \"vi\" on Posix, or \"notepad\" on Windows. Type: path The command to run for npm edit or npm config edit."
msgstr ""

#: ../../source/cli/edit.rst:38
msgid ":option:`npm explore`"
msgstr ""

#: ../../source/cli/explore.rst:2
msgid "npm explore"
msgstr ""

#: ../../source/cli/explore.rst:11
msgid "Browse an installed package"
msgstr ""

#: ../../source/cli/explore.rst:20
msgid "Spawn a subshell in the directory of the installed package specified."
msgstr ""

#: ../../source/cli/explore.rst:22
msgid "If a command is specified, then it is run in the subshell, which then immediately terminates."
msgstr ""

#: ../../source/cli/explore.rst:24
msgid "This is particularly handy in the case of git submodules in the node_modules folder:"
msgstr ""

#: ../../source/cli/explore.rst:26
msgid "npm explore some-dependency -- git pull origin master Note that the package is not automatically rebuilt afterwards, so be sure to use npm rebuild <pkg> if you make any changes."
msgstr ""

#: ../../source/cli/explore.rst:32
msgid "shell Default: SHELL environment variable, or “bash” on Posix, or “cmd” on Windows Type: path The shell to run for the npm explore command."
msgstr ""

#: ../../source/cli/explore.rst:41
msgid ":option:`npm edit`"
msgstr ""

#: ../../source/cli/explore.rst:42
#: ../../source/cli/install.rst:466
msgid ":option:`npm rebuild`"
msgstr ""

#: ../../source/cli/explore.rst:43
#: ../../source/cli/install.rst:468
#: ../../source/cli/rebuild.rst:29
msgid ":option:`npm build`"
msgstr ""

#: ../../source/cli/help.rst:2
msgid "npm help"
msgstr ""

#: ../../source/cli/help.rst:11
msgid "Get help on npm"
msgstr ""

#: ../../source/cli/help.rst:20
msgid "If supplied a topic, then show the appropriate documentation page."
msgstr ""

#: ../../source/cli/help.rst:22
msgid "If the topic does not exist, or if multiple terms are provided, then run the help-search command to find a match. Note that, if help-search finds a single subject, then it will run help on that topic, so unique matches are equivalent to specifying a topic name."
msgstr ""

#: ../../source/cli/help.rst:27
msgid "viewer Default: “man” on Posix, “browser” on Windows Type: path The program to use to view help content."
msgstr ""

#: ../../source/cli/help.rst:32
msgid "Set to \"browser\" to view html help content in the default web browser."
msgstr ""

#: ../../source/cli/help.rst:38
#: ../../source/cli/npm.rst:101
msgid ":option:`README`"
msgstr ""

#: ../../source/cli/help.rst:44
msgid ":option:`npm help-search`"
msgstr ""

#: ../../source/cli/help.rst:45
#: ../../source/cli/npm.rst:107
msgid ":option:`npm index`"
msgstr ""

#: ../../source/cli/help-search.rst:2
msgid "npm help-search"
msgstr ""

#: ../../source/cli/help-search.rst:11
msgid "Search npm help documentation"
msgstr ""

#: ../../source/cli/help-search.rst:20
msgid "This command will search the npm markdown documentation files for the terms provided, and then list the results, sorted by relevance."
msgstr ""

#: ../../source/cli/help-search.rst:22
msgid "If only one result is found, then it will show that help topic."
msgstr ""

#: ../../source/cli/help-search.rst:24
msgid "If the argument to npm help is not a known help topic, then it will call help-search. It is rarely if ever necessary to call this command directly."
msgstr ""

#: ../../source/cli/help-search.rst:29
msgid "long Type: Boolean Default: false If true, the “long” flag will cause help-search to output context around where the terms were found in the documentation."
msgstr ""

#: ../../source/cli/help-search.rst:34
msgid "If false, then help-search will just list out the help topics found."
msgstr ""

#: ../../source/cli/hook.rst:2
msgid "npm hook"
msgstr ""

#: ../../source/cli/hook.rst:11
msgid "Manage registry hooks"
msgstr ""

#: ../../source/cli/hook.rst:23
msgid "Add a hook to watch a package for changes:"
msgstr ""

#: ../../source/cli/hook.rst:25
msgid "$ npm hook add lodash https://example.com/ my-shared-secret Add a hook to watch packages belonging to the user substack:"
msgstr ""

#: ../../source/cli/hook.rst:28
msgid "$ npm hook add ~substack https://example.com/ my-shared-secret Add a hook to watch packages in the scope @npm"
msgstr ""

#: ../../source/cli/hook.rst:31
msgid "$ npm hook add @npm https://example.com/ my-shared-secret List all your active hooks:"
msgstr ""

#: ../../source/cli/hook.rst:34
msgid "$ npm hook ls List your active hooks for the lodash package:"
msgstr ""

#: ../../source/cli/hook.rst:37
msgid "$ npm hook ls lodash Update an existing hook’s url:"
msgstr ""

#: ../../source/cli/hook.rst:40
msgid "$ npm hook update id-deadbeef https://my-new-website.here/ Remove a hook:"
msgstr ""

#: ../../source/cli/hook.rst:43
msgid "$ npm hook rm id-deadbeef"
msgstr ""

#: ../../source/cli/hook.rst:48
msgid "Allows you to manage npm hooks, including adding, removing, listing, and updating."
msgstr ""

#: ../../source/cli/hook.rst:50
msgid "Hooks allow you to configure URL endpoints that will be notified whenever a change happens to any of the supported entity types. Three different types of entities can be watched by hooks: packages, owners, and scopes."
msgstr ""

#: ../../source/cli/hook.rst:52
msgid "To create a package hook, simply reference the package name."
msgstr ""

#: ../../source/cli/hook.rst:54
msgid "To create an owner hook, prefix the owner name with ~ (as in, ~youruser)."
msgstr ""

#: ../../source/cli/hook.rst:56
msgid "To create a scope hook, prefix the scope name with @ (as in, @yourscope)."
msgstr ""

#: ../../source/cli/hook.rst:58
msgid "The hook id used by update and rm are the IDs listed in npm hook ls for that particular hook."
msgstr ""

#: ../../source/cli/hook.rst:60
msgid "The shared secret will be sent along to the URL endpoint so you can verify the request came from your own configured hook."
msgstr ""

#: ../../source/cli/hook.rst:65
msgid "“Introducing Hooks” blog post"
msgstr ""

#: ../../source/cli/index.rst:2
msgid "CLI documentation"
msgstr ""

#: ../../source/cli/index.rst:5
msgid "CLI commands"
msgstr ""

#: ../../source/cli/index.rst:7
msgid ":option:`access <npm access>` Set access level on published packages"
msgstr ""

#: ../../source/cli/index.rst:8
msgid ":option:`adduser <npm adduser>` Add a registry user account"
msgstr ""

#: ../../source/cli/index.rst:9
msgid ":option:`audit <npm audit>` Run a security audit"
msgstr ""

#: ../../source/cli/index.rst:10
msgid ":option:`bin <npm bin>` Display npm bin folder"
msgstr ""

#: ../../source/cli/index.rst:11
msgid ":option:`bugs <npm bugs>` Bugs for a package in a web browser maybe"
msgstr ""

#: ../../source/cli/index.rst:12
msgid ":option:`build <npm build>` Build a package"
msgstr ""

#: ../../source/cli/index.rst:13
msgid ":option:`bundle <npm bundle>` REMOVED"
msgstr ""

#: ../../source/cli/index.rst:14
msgid ":option:`cache <npm cache>` Manipulates packages cache"
msgstr ""

#: ../../source/cli/index.rst:15
msgid ":option:`ci <npm ci>` Install a project with a clean slate"
msgstr ""

#: ../../source/cli/index.rst:16
msgid ":option:`completion <npm completion>` Tab Completion for npm"
msgstr ""

#: ../../source/cli/index.rst:17
msgid ":option:`config <npm config>` Manage the npm configuration files"
msgstr ""

#: ../../source/cli/index.rst:18
msgid ":option:`dedupe <npm dedupe>` Reduce duplication"
msgstr ""

#: ../../source/cli/index.rst:19
msgid ":option:`deprecate <npm deprecate>` Deprecate a version of a package"
msgstr ""

#: ../../source/cli/index.rst:20
msgid ":option:`dist-tag <npm dist-tag>` Modify package distribution tags"
msgstr ""

#: ../../source/cli/index.rst:21
msgid ":option:`docs <npm docs>` Docs for a package in a web browser maybe"
msgstr ""

#: ../../source/cli/index.rst:22
msgid ":option:`doctor <npm doctor>` Check your environments"
msgstr ""

#: ../../source/cli/index.rst:23
msgid ":option:`edit <npm edit>` Edit an installed package"
msgstr ""

#: ../../source/cli/index.rst:24
msgid ":option:`explore <npm explore>` Browse an installed package"
msgstr ""

#: ../../source/cli/index.rst:25
msgid ":option:`help-search <npm help-search>` Search npm help documentation"
msgstr ""

#: ../../source/cli/index.rst:26
msgid ":option:`help <npm help>` Get help on npm"
msgstr ""

#: ../../source/cli/index.rst:27
msgid ":option:`hook <npm hook>` Manage registry hooks"
msgstr ""

#: ../../source/cli/index.rst:28
msgid ":option:`init <npm init>` create a package.json file"
msgstr ""

#: ../../source/cli/index.rst:29
msgid ":option:`install-ci-test <npm install-ci-test>` Install a project with a clean slate and run tests"
msgstr ""

#: ../../source/cli/index.rst:30
msgid ":option:`install-test <npm install-test>` Install package(s) and run tests"
msgstr ""

#: ../../source/cli/index.rst:31
msgid ":option:`install <npm install>` Install a package"
msgstr ""

#: ../../source/cli/index.rst:32
msgid ":option:`link <npm link>` Symlink a package folder"
msgstr ""

#: ../../source/cli/index.rst:33
msgid ":option:`logout <npm logout>` Log out of the registry"
msgstr ""

#: ../../source/cli/index.rst:34
msgid ":option:`ls <npm ls>` List installed packages"
msgstr ""

#: ../../source/cli/index.rst:35
msgid ":option:`npm <npm npm>` javascript package manager"
msgstr ""

#: ../../source/cli/index.rst:36
msgid ":option:`org <npm org>` Manage orgs"
msgstr ""

#: ../../source/cli/index.rst:37
msgid ":option:`outdated <npm outdated>` Check for outdated packages"
msgstr ""

#: ../../source/cli/index.rst:38
msgid ":option:`owner <npm owner>` Manage package owners"
msgstr ""

#: ../../source/cli/index.rst:39
msgid ":option:`pack <npm pack>` Create a tarball from a package"
msgstr ""

#: ../../source/cli/index.rst:40
msgid ":option:`ping <npm ping>` Ping npm registry"
msgstr ""

#: ../../source/cli/index.rst:41
msgid ":option:`prefix <npm prefix>` Display prefix"
msgstr ""

#: ../../source/cli/index.rst:42
msgid ":option:`profile <npm profile>` Change settings on your registry profile"
msgstr ""

#: ../../source/cli/index.rst:43
msgid ":option:`prune <npm prune>` Remove extraneous packages"
msgstr ""

#: ../../source/cli/index.rst:44
msgid ":option:`publish <npm publish>` Publish a package"
msgstr ""

#: ../../source/cli/index.rst:45
msgid ":option:`rebuild <npm rebuild>` Rebuild a package"
msgstr ""

#: ../../source/cli/index.rst:46
msgid ":option:`repo <npm repo>` Open package repository page in the browser"
msgstr ""

#: ../../source/cli/index.rst:47
msgid ":option:`restart <npm restart>` Restart a package"
msgstr ""

#: ../../source/cli/index.rst:48
msgid ":option:`root <npm root>` Display npm root"
msgstr ""

#: ../../source/cli/index.rst:49
msgid ":option:`run-script <npm run-script>` Run arbitrary package scripts"
msgstr ""

#: ../../source/cli/index.rst:50
msgid ":option:`search <npm search>` Search for packages"
msgstr ""

#: ../../source/cli/index.rst:51
msgid ":option:`shrinkwrap <npm shrinkwrap>` Lock down dependency versions for publication"
msgstr ""

#: ../../source/cli/index.rst:52
msgid ":option:`star <npm star>` Mark your favorite packages"
msgstr ""

#: ../../source/cli/index.rst:53
msgid ":option:`stars <npm stars>` View packages marked as favorites"
msgstr ""

#: ../../source/cli/index.rst:54
msgid ":option:`start <npm start>` Start a package"
msgstr ""

#: ../../source/cli/index.rst:55
msgid ":option:`stop <npm stop>` Stop a package"
msgstr ""

#: ../../source/cli/index.rst:56
msgid ":option:`team <npm team>` Manage organization teams and team memberships"
msgstr ""

#: ../../source/cli/index.rst:57
msgid ":option:`test <npm test>` Test a package"
msgstr ""

#: ../../source/cli/index.rst:58
msgid ":option:`token <npm token>` Manage your authentication tokens"
msgstr ""

#: ../../source/cli/index.rst:59
msgid ":option:`uninstall <npm uninstall>` Remove a package"
msgstr ""

#: ../../source/cli/index.rst:60
msgid ":option:`unpublish <npm unpublish>` Remove a package from the registry"
msgstr ""

#: ../../source/cli/index.rst:61
msgid ":option:`update <npm update>` Update a package"
msgstr ""

#: ../../source/cli/index.rst:62
msgid ":option:`version <npm version>` Bump a package version"
msgstr ""

#: ../../source/cli/index.rst:63
msgid ":option:`view <npm view>` View registry info"
msgstr ""

#: ../../source/cli/index.rst:64
msgid ":option:`whoami <npm whoami>` Display npm username"
msgstr ""

#: ../../source/cli/index.rst:130
msgid "Configuring npm"
msgstr ""

#: ../../source/cli/index.rst:132
msgid ":doc:`../files/folders` Folder Structures Used by npm"
msgstr ""

#: ../../source/cli/index.rst:133
msgid ":doc:`../files/npmrc` The npm config files"
msgstr ""

#: ../../source/cli/index.rst:134
msgid ":doc:`../files/package-lock.json` A manifestation of the manifest"
msgstr ""

#: ../../source/cli/index.rst:135
msgid ":doc:`../files/package-locks` An explanation of npm lockfiles"
msgstr ""

#: ../../source/cli/index.rst:136
msgid ":doc:`../files/package.json` Specifics of npm's package.json handling"
msgstr ""

#: ../../source/cli/index.rst:137
msgid ":doc:`../files/shrinkwrap.json` A publishable lockfile"
msgstr ""

#: ../../source/cli/index.rst:141
msgid "Using npm"
msgstr ""

#: ../../source/cli/index.rst:143
msgid ":doc:`../misc/coding-style` npm's \"funny\" coding style"
msgstr ""

#: ../../source/cli/index.rst:144
msgid ":doc:`../misc/config` More than you probably want to know about npm configuration"
msgstr ""

#: ../../source/cli/index.rst:145
msgid ":doc:`../misc/developers` Developer Guide"
msgstr ""

#: ../../source/cli/index.rst:146
msgid ":doc:`../misc/disputes` Handling Module Name Disputes"
msgstr ""

#: ../../source/cli/index.rst:147
msgid ":doc:`../misc/index` Index of all npm documentation"
msgstr ""

#: ../../source/cli/index.rst:148
msgid ":doc:`../misc/orgs` Working with Teams & Orgs"
msgstr ""

#: ../../source/cli/index.rst:149
msgid ":doc:`../misc/registry` The JavaScript Package Registry"
msgstr ""

#: ../../source/cli/index.rst:150
msgid ":doc:`../misc/scope` Scoped packages"
msgstr ""

#: ../../source/cli/index.rst:151
msgid ":doc:`../misc/scripts` How npm handles the \"scripts\" field"
msgstr ""

#: ../../source/cli/index.rst:152
msgid ":doc:`../misc/removal` Cleaning the Slate"
msgstr ""

#: ../../source/cli/index.rst:153
msgid ":doc:`../misc/semver` The semantic versioner for npm"
msgstr ""

#: ../../source/cli/init.rst:2
msgid "npm init"
msgstr ""

#: ../../source/cli/init.rst:4
msgid "create a package.json file"
msgstr ""

#: ../../source/cli/init.rst:22
msgid "Create a new React-based project using create-react-app:"
msgstr ""

#: ../../source/cli/init.rst:24
msgid "$ npm init react-app ./my-react-app Create a new esm-compatible package using create-esm:"
msgstr ""

#: ../../source/cli/init.rst:27
msgid "$ mkdir my-esm-lib && cd my-esm-lib $ npm init esm --yes Generate a plain old package.json using legacy init:"
msgstr ""

#: ../../source/cli/init.rst:31
msgid "$ mkdir my-npm-pkg && cd my-npm-pkg $ git init $ npm init Generate it without having it ask any questions:"
msgstr ""

#: ../../source/cli/init.rst:36
msgid "$ npm init -y"
msgstr ""

#: ../../source/cli/init.rst:41
msgid "npm init <initializer> can be used to set up a new or existing npm package."
msgstr ""

#: ../../source/cli/init.rst:43
msgid "initializer in this case is an npm package named create-<initializer>, which will be installed by npx, and then have its main bin executed – presumably creating or updating package.json and running any other initialization-related operations."
msgstr ""

#: ../../source/cli/init.rst:45
msgid "The init command is transformed to a corresponding npx operation as follows:"
msgstr ""

#: ../../source/cli/init.rst:47
msgid "npm init foo -> npx create-foo npm init @usr/foo -> npx @usr/create-foo npm init @usr -> npx @usr/create Any additional options will be passed directly to the command, so npm init foo --hello will map to npx create-foo --hello."
msgstr ""

#: ../../source/cli/init.rst:52
msgid "If the initializer is omitted (by just calling npm init), init will fall back to legacy init behavior. It will ask you a bunch of questions, and then write a package.json for you. It will attempt to make reasonable guesses based on existing fields, dependencies, and options selected. It is strictly additive, so it will keep any fields and values that were already set. You can also use -y/--yes to skip the questionnaire altogether. If you pass --scope, it will create a scoped package."
msgstr ""

#: ../../source/cli/init.rst:57
msgid "https://github.com/isaacs/init-package-json"
msgstr ""

#: ../../source/cli/init.rst:59
msgid ":option:`npm version`"
msgstr ""

#: ../../source/cli/init.rst:60
#: ../../source/cli/publish.rst:49
msgid ":ref:`scope`"
msgstr ""

#: ../../source/cli/install.rst:2
msgid "npm install"
msgstr ""

#: ../../source/cli/install.rst:11
msgid "Install a package"
msgstr ""

#: ../../source/cli/install.rst:26
msgid "common options: [-P|--save-prod|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--no-save] [--dry-run]"
msgstr ""

#: ../../source/cli/install.rst:30
#: ../../source/cli/install.rst:34
msgid "npm install alias"
msgstr ""

#: ../../source/cli/install.rst:40
msgid "This command installs a package, and any packages that it depends on. If the package has a :ref:`package-locks` or :ref:`shrinkwrap` file, the installation of dependencies will be driven by that, with an :ref:`shrinkwrap.json` taking precedence if both files exist. See :ref:`package-lock.json` and :option:`npm shrinkwrap`."
msgstr ""

#: ../../source/cli/install.rst:44
msgid "A **package** is:"
msgstr ""

#: ../../source/cli/install.rst:46
msgid "a folder containing a program described by a :ref:`package.json` file"
msgstr ""

#: ../../source/cli/install.rst:47
msgid "a gzipped tarball containing (a)"
msgstr ""

#: ../../source/cli/install.rst:48
msgid "a url that resolves to (b)"
msgstr ""

#: ../../source/cli/install.rst:49
msgid "a <name>@<version> that is published on the registry (see :ref:`registry`) with (c)"
msgstr ""

#: ../../source/cli/install.rst:50
msgid "a <name>@<tag> (see :ref:`dist-tag`) that points to (d)"
msgstr ""

#: ../../source/cli/install.rst:51
msgid "a <name> that has a “latest” tag satisfying (e)"
msgstr ""

#: ../../source/cli/install.rst:52
msgid "a <git remote url> that resolves to (a)"
msgstr ""

#: ../../source/cli/install.rst:54
msgid "Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b)."
msgstr ""

#: ../../source/cli/install.rst:60
msgid "Install the dependencies in the local node_modules folder."
msgstr ""

#: ../../source/cli/install.rst:62
msgid "In global mode (ie, with :option:`-g` or :option:`--global` appended to the command), it installs the current package context (ie, the current working directory) as a global package."
msgstr ""

#: ../../source/cli/install.rst:65
msgid "By default, npm install will install all modules listed as dependencies in package.json."
msgstr ""

#: ../../source/cli/install.rst:67
msgid "With the :option:`--production` flag (or when the NODE_ENV environment variable is set to production), npm will not install modules listed in devDependencies."
msgstr ""

#: ../../source/cli/install.rst:70
msgid "The :option:`--production` flag has no particular meaning when adding a dependency to a project."
msgstr ""

#: ../../source/cli/install.rst:74
msgid "Install the package in the directory as a symlink in the current project."
msgstr ""

#: ../../source/cli/install.rst:75
msgid "Its dependencies will be installed before it’s linked."
msgstr ""

#: ../../source/cli/install.rst:76
msgid "If <folder> sits inside the root of your project,"
msgstr ""

#: ../../source/cli/install.rst:77
msgid "its dependencies may be hoisted to the toplevel node_modules as they would for other types of dependencies."
msgstr ""

#: ../../source/cli/install.rst:81
msgid "Install a package that is sitting on the filesystem."
msgstr ""

#: ../../source/cli/install.rst:83
msgid "if you just want to link a dev directory into your npm root, you can do this more easily by using npm link."
msgstr ""

#: ../../source/cli/install.rst:85
msgid "Tarball requirements:"
msgstr ""

#: ../../source/cli/install.rst:87
msgid "The filename must use .tar, .tar.gz, or .tgz as the extension."
msgstr ""

#: ../../source/cli/install.rst:88
msgid "The package contents should reside in a subfolder inside the tarball (usually it is called package/). npm strips one directory layer when installing the package (an equivalent of ``tar x --strip-components=1`` is run)."
msgstr ""

#: ../../source/cli/install.rst:89
msgid "The package must contain a package.json file with name and version properties."
msgstr ""

#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
msgid "Example"
msgstr ""

#: ../../source/cli/install.rst:98
msgid "Fetch the tarball url, and then install it. In order to distinguish between this and other options, the argument must start with *http://* or *https://*"
msgstr ""

#: ../../source/cli/install.rst:107
msgid "Do a <name>@<tag> install, where <tag> is the “tag” config. (See :option:`config`. The config’s default value is latest.)"
msgstr ""

#: ../../source/cli/install.rst:109
msgid "In most cases, this will install the version of the modules tagged as latest on the npm registry."
msgstr ""

#: ../../source/cli/install.rst:117
msgid "npm install saves any specified packages into dependencies by default. Additionally, you can control where and how they get saved with some additional flags:"
msgstr ""

#: ../../source/cli/install.rst:123
msgid "Package will appear in your dependencies. This is the default unless :option:`-D` or :option:`-O` are present."
msgstr ""

#: ../../source/cli/install.rst:128
msgid "Package will appear in your devDependencies."
msgstr ""

#: ../../source/cli/install.rst:133
msgid "Package will appear in your optionalDependencies."
msgstr ""

#: ../../source/cli/install.rst:137
msgid "Prevents saving to dependencies."
msgstr ""

#: ../../source/cli/install.rst:139
msgid "When using any of the above options to save dependencies to your :ref:`package.json`, there are two additional, optional flags:"
msgstr ""

#: ../../source/cli/install.rst:145
msgid "Saved dependencies will be configured with an exact version rather than using npm’s default semver range operator."
msgstr ""

#: ../../source/cli/install.rst:150
msgid "Saved dependencies will also be added to your bundleDependencies list."
msgstr ""

#: ../../source/cli/install.rst:152
msgid "Further, if you have an :ref:`shrinkwrap.json` or :ref:`package-lock.json` then it will be updated as well."
msgstr ""

#: ../../source/cli/install.rst:154
msgid "`<scope>` is optional. The package will be downloaded from the registry associated with the specified scope."
msgstr ""

#: ../../source/cli/install.rst:156
msgid "If no registry is associated with the given scope the default registry is assumed. See :ref:`scope`."
msgstr ""

#: ../../source/cli/install.rst:159
msgid "if you do not include the ``@-symbol`` on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed by a slash."
msgstr ""

#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
#: ../../source/cli/install.rst:0
msgid "Examples"
msgstr ""

#: ../../source/cli/install.rst:176
msgid "If there is a file or folder named ``<name>`` in the current working directory, then it will try to install that, and only try to fetch the package by name if it is not valid."
msgstr ""

#: ../../source/cli/install.rst:181
msgid "Install the version of the package that is referenced by the specified tag."
msgstr ""

#: ../../source/cli/install.rst:182
msgid "If the tag does not exist in the registry data for that package, then this will fail."
msgstr ""

#: ../../source/cli/install.rst:193
msgid "Install the specified version of the package."
msgstr ""

#: ../../source/cli/install.rst:194
msgid "This will fail if the version has not been published to the registry."
msgstr ""

#: ../../source/cli/install.rst:205
msgid "Install a version of the package matching the specified version range."
msgstr ""

#: ../../source/cli/install.rst:206
msgid "This will follow the same rules for resolving dependencies described in package.json."
msgstr ""

#: ../../source/cli/install.rst:208
msgid "Note that most version ranges must be put in quotes so that your shell will treat it as a single argument."
msgstr ""

#: ../../source/cli/install.rst:219
msgid "Installs the package from the hosted git provider, cloning it with git. For a full git remote url, only that URL will be attempted."
msgstr ""

#: ../../source/cli/install.rst:227
msgid "``<protocol>`` is one of *git*, *git+ssh*, *git+http*, *git+https*, or *git+file*."
msgstr ""

#: ../../source/cli/install.rst:229
msgid "If ``#<commit-ish>`` is provided, it will be used to clone exactly that commit."
msgstr ""

#: ../../source/cli/install.rst:231
msgid "If the commit-ish has the format ``#semver:<semver>``, ``<semver>`` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency."
msgstr ""

#: ../../source/cli/install.rst:233
msgid "If neither ``#<commit-ish>`` or ``#semver:<semver>`` is specified, then the default branch of the repository is used."
msgstr ""

#: ../../source/cli/install.rst:235
msgid "If the repository makes use of submodules, those submodules will be cloned as well."
msgstr ""

#: ../../source/cli/install.rst:237
msgid "If the package being installed contains a prepare script, its dependencies and devDependencies will be installed, and the prepare script will be run, before the package is packaged and installed."
msgstr ""

#: ../../source/cli/install.rst:239
msgid "The following git environment variables are recognized by npm and will be added to the environment when running git:"
msgstr ""

#: ../../source/cli/install.rst:241
msgid "GIT_ASKPASS"
msgstr ""

#: ../../source/cli/install.rst:242
msgid "GIT_EXEC_PATH"
msgstr ""

#: ../../source/cli/install.rst:243
msgid "GIT_PROXY_COMMAND"
msgstr ""

#: ../../source/cli/install.rst:244
msgid "GIT_SSH"
msgstr ""

#: ../../source/cli/install.rst:245
msgid "GIT_SSH_COMMAND"
msgstr ""

#: ../../source/cli/install.rst:246
msgid "GIT_SSL_CAINFO"
msgstr ""

#: ../../source/cli/install.rst:247
msgid "GIT_SSL_NO_VERIFY"
msgstr ""

#: ../../source/cli/install.rst:249
msgid "See the git man page for details."
msgstr ""

#: ../../source/cli/install.rst:265
msgid "Install the package at https://github.com/githubname/githubrepo by attempting to clone it using git."
msgstr ""

#: ../../source/cli/install.rst:267
msgid "If ``#<commit-ish>`` is provided, it will be used to clone exactly that commit. If the commit-ish has the format #semver:<semver>, ``<semver>`` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither ``#<commit-ish>`` or ``#semver:<semver>`` is specified, then master is used."
msgstr ""

#: ../../source/cli/install.rst:269
#: ../../source/cli/install.rst:282
#: ../../source/cli/install.rst:296
#: ../../source/cli/install.rst:310
msgid "As with regular git dependencies, dependencies and devDependencies will be installed if the package has a prepare script, before the package is done installing."
msgstr ""

#: ../../source/cli/install.rst:280
msgid "Install the package at https://gist.github.com/gistID by attempting to clone it using git. The GitHub username associated with the gist is optional and will not be saved in package.json."
msgstr ""

#: ../../source/cli/install.rst:292
msgid "Install the package at https://bitbucket.org/bitbucketname/bitbucketrepo by attempting to clone it using git."
msgstr ""

#: ../../source/cli/install.rst:294
#: ../../source/cli/install.rst:308
msgid "If ``#<commit-ish>`` is provided, it will be used to clone exactly that commit. If the commit-ish has the format ``#semver:<semver>``, ``<semver>`` can be any valid semver range or exact version, and npm will look for any tags or refs matching that range in the remote repository, much as it would for a registry dependency. If neither ``#<commit-ish>`` or ``#semver:<semver>`` is specified, then master is used."
msgstr ""

#: ../../source/cli/install.rst:306
msgid "Install the package at https://gitlab.com/gitlabname/gitlabrepo by attempting to clone it using git."
msgstr ""

#: ../../source/cli/install.rst:319
msgid "You may combine multiple arguments, and even multiple types of arguments."
msgstr ""

#: ../../source/cli/install.rst:321
#: ../../source/cli/link.rst:39
msgid "For example:"
msgstr ""

#: ../../source/cli/install.rst:329
msgid "The argument will apply to all of the specified install targets. If a tag with the given name exists, the tagged version is preferred over newer versions."
msgstr ""

#: ../../source/cli/install.rst:334
msgid "The argument will report in the usual way what the install would have done without actually installing anything."
msgstr ""

#: ../../source/cli/install.rst:338
msgid "The argument will only update the :ref:`package-lock.json`, instead of checking node_modules and downloading dependencies."
msgstr ""

#: ../../source/cli/install.rst:343
msgid "The argument will force npm to fetch remote resources even if a local copy exists on disk."
msgstr ""

#: ../../source/cli/install.rst:352
msgid "The -g or --global argument will cause npm to install the package globally rather than locally. See :ref:`folders`."
msgstr ""

#: ../../source/cli/install.rst:356
msgid "The argument will cause npm to install the package into your local node_modules folder with the same layout it uses with the global node_modules folder. Only your direct dependencies will show in node_modules and everything they depend on will be flattened in their node_modules folders. This obviously will eliminate some deduping."
msgstr ""

#: ../../source/cli/install.rst:362
msgid "The argument will cause npm to not execute any scripts defined in the package.json. See :ref:`scripts`."
msgstr ""

#: ../../source/cli/install.rst:366
msgid "The argument will cause npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping."
msgstr ""

#: ../../source/cli/install.rst:370
msgid "The argument will cause npm to link global installs into the local space in some cases."
msgstr ""

#: ../../source/cli/install.rst:374
msgid "The argument will prevent npm from creating symlinks for any binaries the package might contain."
msgstr ""

#: ../../source/cli/install.rst:378
msgid "The argument will prevent optional dependencies from being installed."
msgstr ""

#: ../../source/cli/install.rst:382
msgid "The argument, which will ignore an available package lock or shrinkwrap file and use the package.json instead."
msgstr ""

#: ../../source/cli/install.rst:386
msgid "The argument will prevent npm from creating a :ref:`package-lock.json` file. When running with package-lock’s disabled npm will not automatically prune your node modules when installing."
msgstr ""

#: ../../source/cli/install.rst:390
msgid "The argument will allow npm to find the node source code so that npm can compile native modules."
msgstr ""

#: ../../source/cli/install.rst:394
msgid "The argument will cause either only devDependencies or only *non-devDependencies* to be installed regardless of the NODE_ENV."
msgstr ""

#: ../../source/cli/install.rst:398
msgid "The --no-audit argument can be used to disable sending of audit reports to the configured registries. See :ref:`audit` for details on what is sent."
msgstr ""

#: ../../source/cli/install.rst:400
msgid "See :ref:`config`. Many of the configuration params have some effect on installation, since that’s most of what npm does."
msgstr ""

#: ../../source/cli/install.rst:403
msgid "ALGORITHM"
msgstr ""

#: ../../source/cli/install.rst:405
msgid "To install a package, npm uses the following algorithm::"
msgstr ""

#: ../../source/cli/install.rst:418
msgid "For this package{dep} structure: A{B,C}, B{C}, C{D}, this algorithm produces::"
msgstr ""

#: ../../source/cli/install.rst:425
msgid "That is, the dependency from B to C is satisfied by the fact that A already caused C to be installed at a higher level. D is still installed at the top level because nothing conflicts with it."
msgstr ""

#: ../../source/cli/install.rst:427
msgid "For A{B,C}, B{C,D@1}, C{D@2}, this algorithm produces::"
msgstr ""

#: ../../source/cli/install.rst:435
msgid "Because B’s D@1 will be installed in the top level, C now has to install ``D@2`` privately for itself. This algorithm is deterministic, but different trees may be produced if two dependencies are requested for installation in a different order."
msgstr ""

#: ../../source/cli/install.rst:437
msgid "See :ref:`folders` for a more detailed description of the specific folder structures that npm creates."
msgstr ""

#: ../../source/cli/install.rst:440
msgid "Limitations of npm’s Install Algorithm"
msgstr ""

#: ../../source/cli/install.rst:442
msgid "npm will refuse to install any package with an identical name to the current package. This can be overridden with the :option:`--force` flag, but in most cases can simply be addressed by changing the local package name."
msgstr ""

#: ../../source/cli/install.rst:444
msgid "There are some very rare and pathological edge-cases where a cycle can cause npm to try to install a never-ending tree of packages. Here is the simplest case::"
msgstr ""

#: ../../source/cli/install.rst:449
msgid "where A is some version of a package, and A' is a different version of the same package. Because B depends on a different version of A than the one that is already in the tree, it must install a separate copy. The same is true of A', which must install B'. Because B' depends on the original version of A, which has been overridden, the cycle falls into infinite regress."
msgstr ""

#: ../../source/cli/install.rst:455
msgid "To avoid this situation, ``npm flat-out`` refuses to install any ``name@version`` that is already present anywhere in the tree of package folder ancestors. A more correct, but more complex, solution would be to symlink the existing version into the new location. If this ever affects a real use-case, it will be investigated."
msgstr ""

#: ../../source/cli/install.rst:464
msgid ":option:`npm audit`"
msgstr ""

#: ../../source/cli/install.rst:467
#: ../../source/cli/shrinkwrap.rst:32
msgid ":ref:`scripts`"
msgstr ""

#: ../../source/cli/install.rst:473
#: ../../source/cli/outdated.rst:83
#: ../../source/cli/publish.rst:53
msgid ":option:`npm dist-tag`"
msgstr ""

#: ../../source/cli/install.rst:474
#: ../../source/cli/prune.rst:37
msgid ":option:`npm uninstall`"
msgstr ""

#: ../../source/cli/install.rst:475
#: ../../source/cli/update.rst:112
msgid ":option:`npm shrinkwrap`"
msgstr ""

#: ../../source/cli/install-ci-test.rst:2
msgid "npm install-ci-test"
msgstr ""

#: ../../source/cli/install-ci-test.rst:11
msgid "Install a project with a clean slate and run tests"
msgstr ""

#: ../../source/cli/install-ci-test.rst:19
msgid "install-ci-test alias"
msgstr ""

#: ../../source/cli/install-ci-test.rst:24
msgid "This command runs an npm ci followed immediately by an npm test."
msgstr ""

#: ../../source/cli/install-ci-test.rst:29
msgid ":option:`npm ci`"
msgstr ""

#: ../../source/cli/install-ci-test.rst:30
#: ../../source/cli/restart.rst:47
#: ../../source/cli/run-script.rst:66
#: ../../source/cli/start.rst:29
#: ../../source/cli/stop.rst:27
msgid ":option:`npm test`"
msgstr ""

#: ../../source/cli/install-test.rst:2
msgid "npm install-test"
msgstr ""

#: ../../source/cli/install-test.rst:11
msgid "Install package(s) and run tests"
msgstr ""

#: ../../source/cli/install-test.rst:26
msgid "install-test alias"
msgstr ""

#: ../../source/cli/install-test.rst:28
msgid "common options: [--save|--save-dev|--save-optional] [--save-exact] [--dry-run]"
msgstr ""

#: ../../source/cli/install-test.rst:33
msgid "This command runs an npm install followed immediately by an npm test. It takes exactly the same arguments as npm install."
msgstr ""

#: ../../source/cli/install-test.rst:38
msgid "`npm-install`"
msgstr ""

#: ../../source/cli/install-test.rst:39
msgid "`npm-test`"
msgstr ""

#: ../../source/cli/link.rst:2
msgid "npm link"
msgstr ""

#: ../../source/cli/link.rst:11
msgid "Symlink a package folder"
msgstr ""

#: ../../source/cli/link.rst:20
msgid "link alias"
msgstr ""

#: ../../source/cli/link.rst:25
msgid "Package linking is a two-step process."
msgstr ""

#: ../../source/cli/link.rst:27
msgid "First, npm link in a package folder will create a symlink in the global folder {prefix}/lib/node_modules/<package> that links to the package where the npm link command was executed. (see npm-config for the value of prefix). It will also link any bins in the package to {prefix}/bin/{name}."
msgstr ""

#: ../../source/cli/link.rst:29
msgid "Next, in some other location, npm link package-name will create a symbolic link from globally-installed package-name to node_modules/ of the current folder."
msgstr ""

#: ../../source/cli/link.rst:31
msgid "Note that package-name is taken from package.json, not from directory name."
msgstr ""

#: ../../source/cli/link.rst:33
msgid "The package name can be optionally prefixed with a scope. See npm-scope. The scope must be preceded by an @-symbol and followed by a slash."
msgstr ""

#: ../../source/cli/link.rst:35
msgid "When creating tarballs for npm publish, the linked packages are “snapshotted” to their current state by resolving the symbolic links."
msgstr ""

#: ../../source/cli/link.rst:37
msgid "This is handy for installing your own stuff, so that you can work on it and test it iteratively without having to continually rebuild."
msgstr ""

#: ../../source/cli/link.rst:41
msgid "cd ~/projects/node-redis    # go into the package directory npm link                    # creates global link cd ~/projects/node-bloggy   # go into some other package directory. npm link redis              # link-install the package Now, any changes to ~/projects/node-redis will be reflected in ~/projects/node-bloggy/node_modules/node-redis/. Note that the link should be to the package name, not the directory name for that package."
msgstr ""

#: ../../source/cli/link.rst:47
msgid "You may also shortcut the two steps in one. For example, to do the above use-case in a shorter way:"
msgstr ""

#: ../../source/cli/link.rst:49
msgid "cd ~/projects/node-bloggy  # go into the dir of your main project npm link ../node-redis     # link the dir of your dependency The second line is the equivalent of doing:"
msgstr ""

#: ../../source/cli/link.rst:53
msgid "(cd ../node-redis; npm link) npm link redis That is, it first creates a global link, and then links the global installation target into your project’s node_modules folder."
msgstr ""

#: ../../source/cli/link.rst:57
msgid "Note that in this case, you are referring to the directory name, node-redis, rather than the package name redis."
msgstr ""

#: ../../source/cli/link.rst:59
msgid "If your linked package is scoped (see npm-scope) your link command must include that scope, e.g."
msgstr ""

#: ../../source/cli/link.rst:61
msgid "npm link @myorg/privatepackage"
msgstr ""

#: ../../source/cli/logout.rst:2
msgid "npm logout"
msgstr ""

#: ../../source/cli/logout.rst:11
msgid "Log out of the registry"
msgstr ""

#: ../../source/cli/logout.rst:20
msgid "When logged into a registry that supports token-based authentication, tell the server to end this token’s session. This will invalidate the token everywhere you’re using it, not just for the current environment."
msgstr ""

#: ../../source/cli/logout.rst:22
msgid "When logged into a legacy registry that uses username and password authentication, this will clear the credentials in your user configuration. In this case, it will only affect the current environment."
msgstr ""

#: ../../source/cli/logout.rst:24
msgid "If --scope is provided, this will find the credentials for the registry connected to that scope, if set."
msgstr ""

#: ../../source/cli/logout.rst:35
msgid "The base URL of the npm package registry. If scope is also specified, it takes precedence."
msgstr ""

#: ../../source/cli/logout.rst:39
msgid "Default: The scope of your current project, if any, otherwise none."
msgstr ""

#: ../../source/cli/logout.rst:41
msgid "If specified, you will be logged out of the specified scope. See npm-scope."
msgstr ""

#: ../../source/cli/logout.rst:43
msgid "npm logout --scope=@myco"
msgstr ""

#: ../../source/cli/logout.rst:48
#: ../../source/cli/owner.rst:41
#: ../../source/cli/publish.rst:50
#: ../../source/cli/star.rst:32
#: ../../source/cli/stars.rst:30
#: ../../source/cli/unpublish.rst:46
#: ../../source/cli/whoami.rst:29
msgid ":option:`npm adduser`"
msgstr ""

#: ../../source/cli/ls.rst:2
msgid "npm ls"
msgstr ""

#: ../../source/cli/ls.rst:12
msgid "List installed packages"
msgstr ""

#: ../../source/cli/ls.rst:16
#: ../../source/cli/ls.rst:20
#: ../../source/cli/ls.rst:24
msgid "ls alias"
msgstr ""

#: ../../source/cli/ls.rst:29
msgid "This command will print to stdout all the versions of packages that are installed, as well as their dependencies, in a tree-structure."
msgstr ""

#: ../../source/cli/ls.rst:31
msgid "Positional arguments are name@version-range identifiers, which will limit the results to only the paths to the packages named. Note that nested packages will also show the paths to the specified packages. For example, running npm ls promzard in npm’s source tree will show::"
msgstr ""

#: ../../source/cli/ls.rst:40
msgid "It will print out extraneous, missing, and invalid packages."
msgstr ""

#: ../../source/cli/ls.rst:42
msgid "If a project specifies git urls for dependencies these are shown in parentheses after the name@version to make it easier for users to recognize potential forks of a project."
msgstr ""

#: ../../source/cli/ls.rst:44
msgid "The tree shown is the logical dependency tree, based on package dependencies, not the physical layout of your node_modules folder."
msgstr ""

#: ../../source/cli/ls.rst:46
msgid "When run as ll or la, it shows extended information by default."
msgstr ""

#: ../../source/cli/ls.rst:53
msgid "Show information in JSON format."
msgstr ""

#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
msgid "Default"
msgstr ""

#: ../../source/cli/ls.rst:55
#: ../../source/cli/ls.rst:63
#: ../../source/cli/ls.rst:71
#: ../../source/cli/ls.rst:79
#: ../../source/cli/ls.rst:93
#: ../../source/cli/ls.rst:100
#: ../../source/cli/ls.rst:116
#: ../../source/cli/token.rst:52
msgid "false"
msgstr ""

#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
#: ../../source/cli/ls.rst:0
msgid "Type"
msgstr ""

#: ../../source/cli/ls.rst:56
#: ../../source/cli/ls.rst:64
#: ../../source/cli/ls.rst:72
#: ../../source/cli/ls.rst:80
#: ../../source/cli/ls.rst:92
#: ../../source/cli/ls.rst:99
#: ../../source/cli/ls.rst:115
msgid "Boolean"
msgstr ""

#: ../../source/cli/ls.rst:61
msgid "Show extended information."
msgstr ""

#: ../../source/cli/ls.rst:69
msgid "Show parseable output instead of tree view."
msgstr ""

#: ../../source/cli/ls.rst:77
msgid "List packages in the global install prefix instead of in the current project."
msgstr ""

#: ../../source/cli/ls.rst:84
msgid "Max display depth of the dependency tree."
msgstr ""

#: ../../source/cli/ls.rst:86
msgid "Int"
msgstr ""

#: ../../source/cli/ls.rst:90
msgid "Display only the dependency tree for packages in dependencies."
msgstr ""

#: ../../source/cli/ls.rst:97
msgid "Display only the dependency tree for packages in devDependencies."
msgstr ""

#: ../../source/cli/ls.rst:104
msgid "When “dev” or “development”, is an alias to dev."
msgstr ""

#: ../../source/cli/ls.rst:106
msgid "When “prod” or “production”, is an alias to production."
msgstr ""

#: ../../source/cli/ls.rst:108
msgid "String"
msgstr ""

#: ../../source/cli/ls.rst:113
msgid "Display only dependencies which are linked"
msgstr ""

#: ../../source/cli/ls.rst:127
#: ../../source/cli/uninstall.rst:72
msgid ":option:`npm prune`"
msgstr ""

#: ../../source/cli/ls.rst:128
#: ../../source/cli/update.rst:111
msgid ":option:`npm outdated`"
msgstr ""

#: ../../source/cli/npm.rst:2
msgid "npm"
msgstr ""

#: ../../source/cli/npm.rst:16
msgid "VERSION"
msgstr ""

#: ../../source/cli/npm.rst:18
msgid "@VERSION@"
msgstr ""

#: ../../source/cli/npm.rst:23
msgid "npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently."
msgstr ""

#: ../../source/cli/npm.rst:25
msgid "It is extremely configurable to support a wide variety of use cases. Most commonly, it is used to publish, discover, install, and develop node programs."
msgstr ""

#: ../../source/cli/npm.rst:27
msgid "Run npm help to get a list of available commands."
msgstr ""

#: ../../source/cli/npm.rst:29
msgid "IMPORTANT npm is configured to use npm, Inc.’s public registry at https://registry.npmjs.org by default. Use of the npm public registry is subject to terms of use available at https://www.npmjs.com/policies/terms."
msgstr ""

#: ../../source/cli/npm.rst:32
msgid "You can configure npm to use any compatible registry you like, and even run your own registry. Use of someone else’s registry may be governed by their terms of use."
msgstr ""

#: ../../source/cli/npm.rst:34
msgid "INTRODUCTION You probably got npm because you want to install stuff."
msgstr ""

#: ../../source/cli/npm.rst:37
msgid "Use npm install blerg to install the latest version of “blerg”. Check out npm-install for more info. It can do a lot of stuff."
msgstr ""

#: ../../source/cli/npm.rst:39
msgid "Use the npm search command to show everything that’s available. Use npm ls to show everything you’ve installed."
msgstr ""

#: ../../source/cli/npm.rst:41
msgid "DEPENDENCIES If a package references to another package with a git URL, npm depends on a preinstalled git."
msgstr ""

#: ../../source/cli/npm.rst:44
msgid "If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use node-gyp for that task. For a Unix system, node-gyp needs Python, make and a buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ are needed. Python 3 is not supported by node-gyp. For more information visit the node-gyp repository and the node-gyp Wiki."
msgstr ""

#: ../../source/cli/npm.rst:46
msgid "DIRECTORIES See npm-folders to learn about where npm puts stuff."
msgstr ""

#: ../../source/cli/npm.rst:49
msgid "In particular, npm has two modes of operation:"
msgstr ""

#: ../../source/cli/npm.rst:51
msgid "global mode: npm installs packages into the install prefix at prefix/lib/node_modules and bins are installed in prefix/bin. local mode: npm installs packages into the current project directory, which defaults to the current working directory. Packages are installed to ./node_modules, and bins are installed to ./node_modules/.bin. Local mode is the default. Use -g or --global on any command to operate in global mode instead."
msgstr ""

#: ../../source/cli/npm.rst:55
msgid "DEVELOPER USAGE If you’re using npm to develop and publish your code, check out the following help topics:"
msgstr ""

#: ../../source/cli/npm.rst:58
msgid "json: Make a package.json file. See package.json. link: For linking your current working code into Node’s path, so that you don’t have to reinstall every time you make a change. Use npm link to do this. install: It’s a good idea to install things if you don’t need the symbolic link. Especially, installing other peoples code from the registry is done via npm install adduser: Create an account or log in. Credentials are stored in the user config file. publish: Use the npm publish command to upload your code to the registry. CONFIGURATION npm is extremely configurable. It reads its configuration options from 5 places."
msgstr ""

#: ../../source/cli/npm.rst:66
msgid "Command line switches: Set a config with --key val. All keys take a value, even if they are booleans (the config parser doesn’t know what the options are at the time of parsing). If no value is provided, then the option is set to boolean true. Environment Variables: Set any config by prefixing the name in an environment variable with npm_config_. For example, export npm_config_key=val. User Configs: The file at $HOME/.npmrc is an ini-formatted list of configs. If present, it is parsed. If the userconfig option is set in the cli or env, then that will be used instead. Global Configs: The file found at ../etc/npmrc (from the node executable, by default this resolves to /usr/local/etc/npmrc) will be parsed if it is found. If the globalconfig option is set in the cli, env, or user config, then that file is parsed instead. Defaults: npm’s default configuration options are defined in lib/utils/config-defs.js. These must not be changed. See npm-config for much much more information."
msgstr ""

#: ../../source/cli/npm.rst:74
msgid "CONTRIBUTIONS"
msgstr ""

#: ../../source/cli/npm.rst:76
msgid "Patches welcome!"
msgstr ""

#: ../../source/cli/npm.rst:78
msgid "If you would like to contribute, but don’t know what to work on, read the contributing guidelines and check the issues list."
msgstr ""

#: ../../source/cli/npm.rst:80
msgid "CONTRIBUTING.md Bug tracker Support tracker"
msgstr ""

#: ../../source/cli/npm.rst:85
msgid "BUGS"
msgstr ""

#: ../../source/cli/npm.rst:87
msgid "When you find issues, please report them:"
msgstr ""

#: ../../source/cli/npm.rst:89
msgid "web: https://npm.community/c/bugs Be sure to follow the template and bug reporting guidelines. You can also ask for help in the support forum if you’re unsure if it’s actually a bug or are having trouble coming up with a detailed reproduction to report."
msgstr ""

#: ../../source/cli/npm.rst:93
msgid "AUTHOR"
msgstr ""

#: ../../source/cli/npm.rst:95
msgid "Isaac Z. Schlueter :: isaacs :: @izs :: i@izs.me"
msgstr ""

#: ../../source/cli/org.rst:2
msgid "npm org"
msgstr ""

#: ../../source/cli/org.rst:11
msgid "Manage orgs"
msgstr ""

#: ../../source/cli/org.rst:22
msgid "Add a new developer to an org:"
msgstr ""

#: ../../source/cli/org.rst:24
msgid "$ npm org set my-org @mx-smith Add a new admin to an org (or change a developer to an admin):"
msgstr ""

#: ../../source/cli/org.rst:27
msgid "$ npm org set my-org @mx-santos admin Remove a user from an org:"
msgstr ""

#: ../../source/cli/org.rst:30
msgid "$ npm org rm my-org mx-santos List all users in an org:"
msgstr ""

#: ../../source/cli/org.rst:33
msgid "$ npm org ls my-org List all users in JSON format:"
msgstr ""

#: ../../source/cli/org.rst:36
msgid "$ npm org ls my-org --json See what role a user has in an org:"
msgstr ""

#: ../../source/cli/org.rst:39
msgid "$ npm org ls my-org @mx-santos"
msgstr ""

#: ../../source/cli/org.rst:44
msgid "You can use the npm org commands to manage and view users of an organization. It supports adding and removing users, changing their roles, listing them, and finding specific ones and their roles."
msgstr ""

#: ../../source/cli/org.rst:49
msgid "Documentation on npm Orgs"
msgstr ""

#: ../../source/cli/outdated.rst:2
msgid "npm outdated"
msgstr ""

#: ../../source/cli/outdated.rst:11
msgid "Check for outdated packages"
msgstr ""

#: ../../source/cli/outdated.rst:20
msgid "This command will check the registry to see if any (or, specific) installed packages are currently outdated."
msgstr ""

#: ../../source/cli/outdated.rst:22
msgid "In the output:"
msgstr ""

#: ../../source/cli/outdated.rst:24
msgid "wanted is the maximum version of the package that satisfies the semver range specified in package.json. If there’s no available semver range (i.e. you’re running npm outdated --global, or the package isn’t included in package.json), then wanted shows the currently-installed version. latest is the version of the package tagged as latest in the registry. Running npm publish with no special configuration will publish the package with a dist-tag of latest. This may or may not be the maximum version of the package, or the most-recently published version of the package, depending on how the package’s developer manages the latest dist-tag. location is where in the dependency tree the package is located. Note that npm outdated defaults to a depth of 0, so unless you override that, you’ll always be seeing only top-level dependencies that are outdated. package type (when using --long / -l) tells you whether this package is a dependency or a devDependency. Packages not included in package.json are always marked dependencies. homepage (when using --long / -l) is the homepage value contained in the package’s package.json Red means there’s a newer version matching your semver requirements, so you should update now. Yellow indicates that there’s a newer version above your semver requirements (usually new major, or new 0.x minor) so proceed with caution. An example $ npm outdated Package      Current   Wanted   Latest  Location glob          5.0.15   5.0.15    6.0.1  test-outdated-output nothingness    0.0.3      git      git  test-outdated-output npm            3.5.1    3.5.2    3.5.1  test-outdated-output local-dev      0.0.3   linked   linked  test-outdated-output once           1.3.2    1.3.3    1.3.3  test-outdated-output With these dependencies:"
msgstr ""

#: ../../source/cli/outdated.rst:44
msgid "{"
msgstr ""

#: ../../source/cli/outdated.rst:42
msgid "\"glob\": \"^5.0.15\", \"nothingness\": \"github:othiym23/nothingness#master\", \"npm\": \"^3.5.1\", \"once\": \"^1.3.1\""
msgstr ""

#: ../../source/cli/outdated.rst:46
msgid "} A few things to note:"
msgstr ""

#: ../../source/cli/outdated.rst:49
msgid "glob requires ^5, which prevents npm from installing glob@6, which is outside the semver range. Git dependencies will always be reinstalled, because of how they’re specified. The installed committish might satisfy the dependency specifier (if it’s something immutable, like a commit SHA), or it might not, so npm outdated and npm update have to fetch Git repos to check. This is why currently doing a reinstall of a Git dependency always forces a new clone and install. npm@3.5.2 is marked as “wanted”, but “latest” is npm@3.5.1 because npm uses dist-tags to manage its latest and next release channels. npm update will install the newest version, but npm install npm (with no semver range) will install whatever’s tagged as latest. once is just plain out of date. Reinstalling node_modules from scratch or running npm update will bring it up to spec. CONFIGURATION json Default: false Type: Boolean Show information in JSON format."
msgstr ""

#: ../../source/cli/outdated.rst:59
msgid "long Default: false Type: Boolean Show extended information."
msgstr ""

#: ../../source/cli/outdated.rst:64
msgid "parseable Default: false Type: Boolean Show parseable output instead of tree view."
msgstr ""

#: ../../source/cli/outdated.rst:69
msgid "global Default: false Type: Boolean Check packages in the global install prefix instead of in the current project."
msgstr ""

#: ../../source/cli/outdated.rst:74
msgid "depth Default: 0 Type: Int Max depth for checking dependency tree."
msgstr ""

#: ../../source/cli/owner.rst:2
msgid "npm owner"
msgstr ""

#: ../../source/cli/owner.rst:12
msgid "Manage package owners"
msgstr ""

#: ../../source/cli/owner.rst:22
msgid "owner alias"
msgstr ""

#: ../../source/cli/owner.rst:27
msgid "Manage ownership of published packages."
msgstr ""

#: ../../source/cli/owner.rst:29
msgid "ls: List all the users who have access to modify a package and push new versions. Handy when you need to know who to bug for help. add: Add a new user as a maintainer of a package. This user is enabled to modify metadata, publish new versions, and add other owners. rm: Remove a user from the package owner list. This immediately revokes their privileges. Note that there is only one level of access. Either you can modify a package, or you can’t. Future versions may contain more fine-grained access levels, but that is not implemented at this time."
msgstr ""

#: ../../source/cli/owner.rst:34
msgid "If you have two-factor authentication enabled with auth-and-writes then you’ll need to include an otp on the command line when changing ownership with --otp."
msgstr ""

#: ../../source/cli/owner.rst:42
msgid ":option:`npm disputes`"
msgstr ""

#: ../../source/cli/pack.rst:2
msgid "npm pack"
msgstr ""

#: ../../source/cli/pack.rst:12
msgid "Create a tarball from a package"
msgstr ""

#: ../../source/cli/pack.rst:21
msgid "For anything that’s installable (that is, a package folder, tarball, tarball url, name@tag, name@version, name, or scoped name), this command will fetch it to the cache, and then copy the tarball to the current working directory as <name>-<version>.tgz, and then write the filenames out to stdout."
msgstr ""

#: ../../source/cli/pack.rst:23
msgid "If the same package is specified multiple times, then the file will be overwritten the second time."
msgstr ""

#: ../../source/cli/pack.rst:25
msgid "If no arguments are supplied, then npm packs the current package folder."
msgstr ""

#: ../../source/cli/pack.rst:27
msgid "The --dry-run argument will do everything that pack usually does without actually packing anything. Reports on what would have gone into the tarball."
msgstr ""

#: ../../source/cli/pack.rst:32
msgid ":option:`npm cache`"
msgstr ""

#: ../../source/cli/ping.rst:2
msgid "npm ping"
msgstr ""

#: ../../source/cli/ping.rst:11
msgid "Ping npm registry"
msgstr ""

#: ../../source/cli/ping.rst:20
msgid "Ping the configured or given npm registry and verify authentication. If it works it will output something like:"
msgstr ""

#: ../../source/cli/ping.rst:22
msgid "Ping success: {*Details about registry*} otherwise you will get:"
msgstr ""

#: ../../source/cli/ping.rst:25
msgid "Ping error: {*Detail about error}"
msgstr ""

#: ../../source/cli/prefix.rst:2
msgid "npm prefix"
msgstr ""

#: ../../source/cli/prefix.rst:11
msgid "Display prefix"
msgstr ""

#: ../../source/cli/prefix.rst:20
msgid "Print the local prefix to standard out. This is the closest parent directory to contain a package.json file or node_modules directory, unless -g is also specified."
msgstr ""

#: ../../source/cli/prefix.rst:22
msgid "If -g is specified, this will be the value of the global prefix. See npm-config for more detail."
msgstr ""

#: ../../source/cli/prefix.rst:28
#: ../../source/cli/root.rst:26
msgid ":option:`npm bin`"
msgstr ""

#: ../../source/cli/profile.rst:2
msgid "npm profile"
msgstr ""

#: ../../source/cli/profile.rst:11
msgid "Change settings on your registry profile"
msgstr ""

#: ../../source/cli/profile.rst:24
msgid "Change your profile information on the registry. This not be available if you’re using a non-npmjs registry."
msgstr ""

#: ../../source/cli/profile.rst:26
msgid "npm profile get [<property>]: Display all of the properties of your profile, or one or more specific properties. It looks like: +-----------------+---------------------------+ | name            | example                   | +-----------------+---------------------------+ | email           | me@example.com (verified) | +-----------------+---------------------------+ | two factor auth | auth-and-writes           | +-----------------+---------------------------+ | fullname        | Example User              | +-----------------+---------------------------+ | homepage        |                           | +-----------------+---------------------------+ | freenode        |                           | +-----------------+---------------------------+ | twitter         |                           | +-----------------+---------------------------+ | github          |                           | +-----------------+---------------------------+ | created         | 2015-02-26T01:38:35.892Z  | +-----------------+---------------------------+ | updated         | 2017-10-02T21:29:45.922Z  | +-----------------+---------------------------+ npm profile set <property> <value>: Set the value of a profile property. You can set the following properties this way: email, fullname, homepage, freenode, twitter, github"
msgstr ""

#: ../../source/cli/profile.rst:50
msgid "npm profile set password: Change your password. This is interactive, you’ll be prompted for your current password and a new password. You’ll also be prompted for an OTP if you have two-factor authentication enabled."
msgstr ""

#: ../../source/cli/profile.rst:52
msgid "npm profile enable-2fa [auth-and-writes|auth-only]: Enables two-factor authentication. Defaults to auth-and-writes mode. Modes are: auth-only: Require an OTP when logging in or making changes to your account’s authentication. The OTP will be required on both the website and the command line. auth-and-writes: Requires an OTP at all the times auth-only does, and also requires one when publishing a module, setting the latest dist-tag, or changing access via npm access and npm owner. npm profile disable-2fa: Disables two-factor authentication."
msgstr ""

#: ../../source/cli/profile.rst:60
msgid "All of the npm profile subcommands accept --json and --parseable and will tailor their output based on those. Some of these commands may not be available on non npmjs.com registries."
msgstr ""

#: ../../source/cli/prune.rst:2
msgid "npm prune"
msgstr ""

#: ../../source/cli/prune.rst:11
msgid "Remove extraneous packages"
msgstr ""

#: ../../source/cli/prune.rst:20
msgid "This command removes “extraneous” packages. If a package name is provided, then only packages matching one of the supplied names are removed."
msgstr ""

#: ../../source/cli/prune.rst:22
msgid "Extraneous packages are packages that are not listed on the parent package’s dependencies list."
msgstr ""

#: ../../source/cli/prune.rst:24
msgid "If the --production flag is specified or the NODE_ENV environment variable is set to production, this command will remove the packages specified in your devDependencies. Setting --no-production will negate NODE_ENV being set to production."
msgstr ""

#: ../../source/cli/prune.rst:26
msgid "If the --dry-run flag is used then no changes will actually be made."
msgstr ""

#: ../../source/cli/prune.rst:28
msgid "If the --json flag is used then the changes npm prune made (or would have made with --dry-run) are printed as a JSON object."
msgstr ""

#: ../../source/cli/prune.rst:30
msgid "In normal operation with package-locks enabled, extraneous modules are pruned automatically when modules are installed and you’ll only need this command with the --production flag."
msgstr ""

#: ../../source/cli/prune.rst:32
msgid "If you’ve disabled package-locks then extraneous modules will not be removed and it’s up to you to run npm prune from time-to-time to remove them."
msgstr ""

#: ../../source/cli/publish.rst:2
msgid "npm publish"
msgstr ""

#: ../../source/cli/publish.rst:11
msgid "Publish a package"
msgstr ""

#: ../../source/cli/publish.rst:17
msgid "Publishes '.' if no argument supplied"
msgstr ""

#: ../../source/cli/publish.rst:18
msgid "Sets tag 'latest' if no --tag specified"
msgstr ""

#: ../../source/cli/publish.rst:23
msgid "Publishes a package to the registry so that it can be installed by name. All files in the package directory are included if no local .gitignore or .npmignore file exists. If both files exist and a file is ignored by .gitignore but not by .npmignore then it will be included. See npm-developers for full details on what’s included in the published package, as well as details on how the package is built."
msgstr ""

#: ../../source/cli/publish.rst:25
msgid "By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a npm-scope in the name (see package.json)."
msgstr ""

#: ../../source/cli/publish.rst:27
msgid "<folder>: A folder containing a package.json file"
msgstr ""

#: ../../source/cli/publish.rst:29
msgid "<tarball>: A url or file path to a gzipped tar archive containing a single folder with a package.json file inside."
msgstr ""

#: ../../source/cli/publish.rst:31
msgid "[--tag <tag>] Registers the published package with the given tag, such that `npm install @` will install this version. By default, `npm publish` updates and `npm install` installs the `latest` tag. See `npm-dist-tag` for details about tags. [--access <public|restricted>] Tells the registry whether this package should be published as public or restricted. Only applies to scoped packages, which default to restricted. If you don’t have a paid account, you must publish with --access public to publish scoped packages."
msgstr ""

#: ../../source/cli/publish.rst:34
msgid "[--otp <otpcode>] If you have two-factor authentication enabled in auth-and-writes mode then you can provide a code from your authenticator with this. If you don’t include this and you’re running from a TTY then you’ll be prompted."
msgstr ""

#: ../../source/cli/publish.rst:36
msgid "[--dry-run] As of npm@6, does everything publish would do except actually publishing to the registry. Reports the details of what would have been published. Fails if the package name and version combination already exists in the specified registry."
msgstr ""

#: ../../source/cli/publish.rst:39
msgid "Once a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with npm-unpublish."
msgstr ""

#: ../../source/cli/publish.rst:41
msgid "As of npm@5, both a sha1sum and an integrity field with a sha512sum of the tarball will be submitted to the registry during publication. Subsequent installs will use the strongest supported algorithm to verify downloads."
msgstr ""

#: ../../source/cli/publish.rst:43
msgid "Similar to --dry-run see npm-pack, which figures out the files to be included and packs them into a tarball to be uploaded to the registry."
msgstr ""

#: ../../source/cli/publish.rst:52
#: ../../source/cli/unpublish.rst:43
msgid ":option:`npm deprecate`"
msgstr ""

#: ../../source/cli/publish.rst:55
msgid ":option:`npm profile`"
msgstr ""

#: ../../source/cli/rebuild.rst:2
msgid "npm rebuild"
msgstr ""

#: ../../source/cli/rebuild.rst:11
msgid "Rebuild a package"
msgstr ""

#: ../../source/cli/rebuild.rst:19
msgid "rebuild alias"
msgstr ""

#: ../../source/cli/rebuild.rst:24
msgid "This command runs the npm build command on the matched folders. This is useful when you install a new version of node, and must recompile all your C++ addons with the new binary."
msgstr ""

#: ../../source/cli/repo.rst:2
msgid "npm repo"
msgstr ""

#: ../../source/cli/repo.rst:12
msgid "Open package repository page in the browser"
msgstr ""

#: ../../source/cli/repo.rst:21
msgid "This command tries to guess at the likely location of a package’s repository URL, and then tries to open it using the --browser config param. If no package name is provided, it will search for a package.json in the current folder and use the name property."
msgstr ""

#: ../../source/cli/repo.rst:26
msgid "browser Default: OS X: \"open\", Windows: \"start\", Others: \"xdg-open\" Type: String The browser that is called by the npm repo command to open websites."
msgstr ""

#: ../../source/cli/restart.rst:2
msgid "npm restart"
msgstr ""

#: ../../source/cli/restart.rst:12
msgid "Restart a package"
msgstr ""

#: ../../source/cli/restart.rst:21
msgid "This restarts a package."
msgstr ""

#: ../../source/cli/restart.rst:23
msgid "This runs a package’s “stop”, “restart”, and “start” scripts, and associated pre- and post- scripts, in the order given below:"
msgstr ""

#: ../../source/cli/restart.rst:25
msgid "prerestart prestop stop poststop restart prestart start poststart postrestart"
msgstr ""

#: ../../source/cli/restart.rst:36
msgid "NOTE"
msgstr ""

#: ../../source/cli/restart.rst:38
msgid "Note that the “restart” script is run in addition to the “stop” and “start” scripts, not instead of them."
msgstr ""

#: ../../source/cli/restart.rst:40
msgid "This is the behavior as of npm major version 2. A change in this behavior will be accompanied by an increase in major version number"
msgstr ""

#: ../../source/cli/restart.rst:45
#: ../../source/cli/scripts.rst:176
#: ../../source/cli/shrinkwrap.rst:31
#: ../../source/cli/start.rst:27
#: ../../source/cli/stop.rst:25
#: ../../source/cli/test.rst:33
#: ../../source/cli/version.rst:91
msgid ":option:`npm run-script`"
msgstr ""

#: ../../source/cli/restart.rst:48
#: ../../source/cli/run-script.rst:67
#: ../../source/cli/stop.rst:28
#: ../../source/cli/test.rst:35
msgid ":option:`npm start`"
msgstr ""

#: ../../source/cli/restart.rst:49
#: ../../source/cli/run-script.rst:69
#: ../../source/cli/start.rst:31
#: ../../source/cli/test.rst:37
msgid ":option:`npm stop`"
msgstr ""

#: ../../source/cli/restart.rst:50
#: ../../source/cli/run-script.rst:68
#: ../../source/cli/start.rst:30
#: ../../source/cli/stop.rst:29
#: ../../source/cli/test.rst:36
msgid ":option:`npm restart`"
msgstr ""

#: ../../source/cli/root.rst:2
msgid "npm root"
msgstr ""

#: ../../source/cli/root.rst:11
msgid "Display npm root"
msgstr ""

#: ../../source/cli/root.rst:20
msgid "Print the effective node_modules folder to standard out."
msgstr ""

#: ../../source/cli/run-script.rst:2
msgid "npm run-script"
msgstr ""

#: ../../source/cli/run-script.rst:11
msgid "Run arbitrary package scripts"
msgstr ""

#: ../../source/cli/run-script.rst:19
msgid "npm run-script alias"
msgstr ""

#: ../../source/cli/run-script.rst:24
msgid "This runs an arbitrary command from a package’s \"scripts\" object. If no \"command\" is provided, it will list the available scripts. run[-script] is used by the test, start, restart, and stop commands, but can be called directly, as well. When the scripts in the package are printed out, they’re separated into lifecycle (test, start, restart) and directly-run scripts."
msgstr ""

#: ../../source/cli/run-script.rst:26
msgid "As of npm@2.0.0, you can use custom arguments when executing scripts. The special option -- is used by getopt to delimit the end of the options. npm will pass all the arguments after the -- directly to your script:"
msgstr ""

#: ../../source/cli/run-script.rst:32
msgid "The arguments will only be passed to the script specified after npm run and not to any pre or post script."
msgstr ""

#: ../../source/cli/run-script.rst:34
msgid "The env script is a special built-in command that can be used to list environment variables that will be available to the script at runtime. If an “env” command is defined in your package, it will take precedence over the built-in."
msgstr ""

#: ../../source/cli/run-script.rst:36
msgid "In addition to the shell’s pre-existing PATH, npm run adds node_modules/.bin to the PATH provided to scripts. Any binaries provided by locally-installed dependencies can be used without the node_modules/.bin prefix. For example, if there is a devDependency on tap in your package, you should write:"
msgstr ""

#: ../../source/cli/run-script.rst:42
msgid "instead of"
msgstr ""

#: ../../source/cli/run-script.rst:48
msgid "to run your tests."
msgstr ""

#: ../../source/cli/run-script.rst:50
msgid "The actual shell your script is run within is platform dependent. By default, on Unix-like systems it is the /bin/sh command, on Windows it is the cmd.exe. The actual shell referred to by /bin/sh also depends on the system. As of npm@5.1.0 you can customize the shell with the script-shell configuration."
msgstr ""

#: ../../source/cli/run-script.rst:52
msgid "Scripts are run from the root of the module, regardless of what your current working directory is when you call npm run. If you want your script to use different behavior based on what subdirectory you’re in, you can use the INIT_CWD environment variable, which holds the full path you were in when you ran npm run."
msgstr ""

#: ../../source/cli/run-script.rst:54
msgid "npm run sets the NODE environment variable to the node executable with which npm is executed. Also, if the --scripts-prepend-node-path is passed, the directory within which node resides is added to the PATH. If --scripts-prepend-node-path=auto is passed (which has been the default in npm v3), this is only performed when that node executable is not found in the PATH."
msgstr ""

#: ../../source/cli/run-script.rst:56
msgid "If you try to run a script without having a node_modules directory and it fails, you will be given a warning to run npm install, just in case you’ve forgotten."
msgstr ""

#: ../../source/cli/run-script.rst:58
msgid "You can use the --silent flag to prevent showing npm ERR! output on error."
msgstr ""

#: ../../source/cli/run-script.rst:60
msgid "You can use the --if-present flag to avoid exiting with a non-zero exit code when the script is undefined. This lets you run potentially undefined scripts without breaking the execution chain."
msgstr ""

#: ../../source/cli/run-script.rst:65
#: ../../source/cli/test.rst:34
msgid ":ref:`npm-scripts`"
msgstr ""

#: ../../source/cli/scripts.rst:4
msgid "npm scripts"
msgstr ""

#: ../../source/cli/scripts.rst:6
msgid "How npm handles the \"scripts\" field"
msgstr ""

#: ../../source/cli/scripts.rst:9
msgid "DESCRIPTION§"
msgstr ""

#: ../../source/cli/scripts.rst:11
msgid "npm supports the “scripts” property of the package.json file, for the following scripts:"
msgstr ""

#: ../../source/cli/scripts.rst:13
msgid "prepublish: Run BEFORE the package is packed and published, as well as on local npm install without any arguments. (See below) prepare: Run both BEFORE the package is packed and published, on local npm install without any arguments, and when installing git dependencies (See below). This is run AFTER prepublish, but BEFORE prepublishOnly. prepublishOnly: Run BEFORE the package is prepared and packed, ONLY on npm publish. (See below.) prepack: run BEFORE a tarball is packed (on npm pack, npm publish, and when installing git dependencies) postpack: Run AFTER the tarball has been generated and moved to its final destination. publish, postpublish: Run AFTER the package is published. preinstall: Run BEFORE the package is installed install, postinstall: Run AFTER the package is installed. preuninstall, uninstall: Run BEFORE the package is uninstalled. postuninstall: Run AFTER the package is uninstalled. preversion: Run BEFORE bumping the package version. version: Run AFTER bumping the package version, but BEFORE commit. postversion: Run AFTER bumping the package version, and AFTER commit. pretest, test, posttest: Run by the npm test command. prestop, stop, poststop: Run by the npm stop command. prestart, start, poststart: Run by the npm start command. prerestart, restart, postrestart: Run by the npm restart command. .. note:: npm restart will run the stop and start scripts if no restart script is provided. preshrinkwrap, shrinkwrap, postshrinkwrap: Run by the npm shrinkwrap command. Additionally, arbitrary scripts can be executed by running npm run-script <stage>. Pre and post commands with matching names will be run for those as well (e.g. premyscript, myscript, postmyscript). Scripts from dependencies can be run with npm explore <pkg> -- npm run <stage>."
msgstr ""

#: ../../source/cli/scripts.rst:34
msgid "PREPUBLISH AND PREPARE"
msgstr ""

#: ../../source/cli/scripts.rst:37
msgid "DEPRECATION NOTE"
msgstr ""

#: ../../source/cli/scripts.rst:39
msgid "Since npm@1.1.71, the npm CLI has run the prepublish script for both npm publish and npm install, because it’s a convenient way to prepare a package for use (some common use cases are described in the section below). It has also turned out to be, in practice, very confusing. As of npm@4.0.0, a new event has been introduced, prepare, that preserves this existing behavior. A new event, prepublishOnly has been added as a transitional strategy to allow users to avoid the confusing behavior of existing npm versions and only run on npm publish (for instance, running the tests one last time to ensure they’re in good shape)."
msgstr ""

#: ../../source/cli/scripts.rst:41
msgid "See https://github.com/npm/npm/issues/10074 for a much lengthier justification, with further reading, for this change."
msgstr ""

#: ../../source/cli/scripts.rst:44
msgid "USE CASES"
msgstr ""

#: ../../source/cli/scripts.rst:46
msgid "If you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a prepublish script. This includes tasks such as:"
msgstr ""

#: ../../source/cli/scripts.rst:48
msgid "Compiling CoffeeScript source code into JavaScript. Creating minified versions of JavaScript source code. Fetching remote resources that your package will use. The advantage of doing these things at prepublish time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:"
msgstr ""

#: ../../source/cli/scripts.rst:53
msgid "You can depend on coffee-script as a devDependency, and thus your users don’t need to have it installed. You don’t need to include minifiers in your package, reducing the size for your users. You don’t need to rely on your users having curl or wget or other system tools on the target machines."
msgstr ""

#: ../../source/cli/scripts.rst:58
msgid "DEFAULT VALUES"
msgstr ""

#: ../../source/cli/scripts.rst:60
msgid "npm will default some script values based on package contents."
msgstr ""

#: ../../source/cli/scripts.rst:62
msgid "\"start\": \"node server.js\":"
msgstr ""

#: ../../source/cli/scripts.rst:64
msgid "If there is a server.js file in the root of your package, then npm will default the start command to node server.js."
msgstr ""

#: ../../source/cli/scripts.rst:66
msgid "\"install\": \"node-gyp rebuild\":"
msgstr ""

#: ../../source/cli/scripts.rst:68
msgid "If there is a binding.gyp file in the root of your package and you haven’t defined your own install or preinstall scripts, npm will default the install command to compile using node-gyp."
msgstr ""

#: ../../source/cli/scripts.rst:71
msgid "USER"
msgstr ""

#: ../../source/cli/scripts.rst:73
msgid "If npm was invoked with root privileges, then it will change the uid to the user account or uid specified by the user config, which defaults to nobody. Set the unsafe-perm flag to run scripts with root privileges."
msgstr ""

#: ../../source/cli/scripts.rst:76
msgid "ENVIRONMENT"
msgstr ""

#: ../../source/cli/scripts.rst:78
msgid "Package scripts run in an environment where many pieces of information are made available regarding the setup of npm and the current state of the process."
msgstr ""

#: ../../source/cli/scripts.rst:81
msgid "path"
msgstr ""

#: ../../source/cli/scripts.rst:83
msgid "If you depend on modules that define executable scripts, like test suites, then those executables will be added to the PATH for executing the scripts. So, if your package.json has this:"
msgstr ""

#: ../../source/cli/scripts.rst:85
msgid "{ \"name\" : \"foo\" , \"dependencies\" : { \"bar\" : \"0.1.x\" } , \"scripts\": { \"start\" : \"bar ./test\" } } then you could run npm start to execute the bar script, which is exported into the node_modules/.bin directory on npm install."
msgstr ""

#: ../../source/cli/scripts.rst:91
msgid "package.json vars"
msgstr ""

#: ../../source/cli/scripts.rst:93
msgid "The package.json fields are tacked onto the npm_package_ prefix. So, for instance, if you had {\"name\":\"foo\", \"version\":\"1.2.5\"} in your package.json file, then your package scripts would have the npm_package_name environment variable set to “foo”, and the npm_package_version set to “1.2.5”. You can access these variables in your code with process.env.npm_package_name and process.env.npm_package_version, and so on for other fields."
msgstr ""

#: ../../source/cli/scripts.rst:96
msgid "configuration"
msgstr ""

#: ../../source/cli/scripts.rst:98
msgid "Configuration parameters are put in the environment with the npm_config_ prefix. For instance, you can view the effective root config by checking the npm_config_root environment variable."
msgstr ""

#: ../../source/cli/scripts.rst:100
msgid "Special: package.json “config” object ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`"
msgstr ""

#: ../../source/cli/scripts.rst:103
msgid "The package.json “config” keys are overwritten in the environment if there is a config param of <name>[@<version>]:<key>. For example, if the package.json has this:"
msgstr ""

#: ../../source/cli/scripts.rst:105
msgid "{ \"name\" : \"foo\" , \"config\" : { \"port\" : \"8080\" } , \"scripts\" : { \"start\" : \"node server.js\" } } and the server.js is this:"
msgstr ""

#: ../../source/cli/scripts.rst:110
msgid "http.createServer(...).listen(process.env.npm_package_config_port) then the user could change the behavior by doing:"
msgstr ""

#: ../../source/cli/scripts.rst:113
msgid "npm config set foo:port 80"
msgstr ""

#: ../../source/cli/scripts.rst:116
msgid "current lifecycle event"
msgstr ""

#: ../../source/cli/scripts.rst:118
msgid "Lastly, the npm_lifecycle_event environment variable is set to whichever stage of the cycle is being executed. So, you could have a single script used for different parts of the process which switches based on what’s currently happening."
msgstr ""

#: ../../source/cli/scripts.rst:120
msgid "Objects are flattened following this format, so if you had {\"scripts\":{\"install\":\"foo.js\"}} in your package.json, then you’d see this in the script:"
msgstr ""

#: ../../source/cli/scripts.rst:122
msgid "process.env.npm_package_scripts_install === \"foo.js\""
msgstr ""

#: ../../source/cli/scripts.rst:127
msgid "For example, if your package.json contains this:"
msgstr ""

#: ../../source/cli/scripts.rst:132
#: ../../source/cli/scripts.rst:142
msgid "{ \"scripts\" :"
msgstr ""

#: ../../source/cli/scripts.rst:130
msgid "{ \"install\" : \"scripts/install.js\" , \"postinstall\" : \"scripts/install.js\" , \"uninstall\" : \"scripts/uninstall.js\" }"
msgstr ""

#: ../../source/cli/scripts.rst:134
msgid "} then scripts/install.js will be called for the install and post-install stages of the lifecycle, and scripts/uninstall.js will be called when the package is uninstalled. Since scripts/install.js is running for two different phases, it would be wise in this case to look at the npm_lifecycle_event environment variable."
msgstr ""

#: ../../source/cli/scripts.rst:137
msgid "If you want to run a make command, you can do so. This works just fine:"
msgstr ""

#: ../../source/cli/scripts.rst:140
msgid "{ \"preinstall\" : \"./configure\" , \"install\" : \"make && make install\" , \"test\" : \"make test\" }"
msgstr ""

#: ../../source/cli/scripts.rst:144
msgid "}"
msgstr ""

#: ../../source/cli/scripts.rst:147
msgid "EXITING"
msgstr ""

#: ../../source/cli/scripts.rst:149
msgid "Scripts are run by passing the line as a script argument to sh."
msgstr ""

#: ../../source/cli/scripts.rst:151
msgid "If the script exits with a code other than 0, then this will abort the process."
msgstr ""

#: ../../source/cli/scripts.rst:153
msgid "Note that these script files don’t have to be nodejs or even javascript programs. They just have to be some kind of executable file."
msgstr ""

#: ../../source/cli/scripts.rst:156
msgid "HOOK SCRIPTS"
msgstr ""

#: ../../source/cli/scripts.rst:158
msgid "If you want to run a specific script at a specific lifecycle event for ALL packages, then you can use a hook script."
msgstr ""

#: ../../source/cli/scripts.rst:160
msgid "Place an executable file at node_modules/.hooks/{eventname}, and it’ll get run for all packages when they are going through that point in the package lifecycle for any packages installed in that root."
msgstr ""

#: ../../source/cli/scripts.rst:162
msgid "Hook scripts are run exactly the same way as package.json scripts. That is, they are in a separate child process, with the env described above."
msgstr ""

#: ../../source/cli/scripts.rst:165
msgid "BEST PRACTICES"
msgstr ""

#: ../../source/cli/scripts.rst:167
msgid "Don’t exit with a non-zero error code unless you really mean it. Except for uninstall scripts, this will cause the npm action to fail, and potentially be rolled back. If the failure is minor or only will prevent some optional features, then it’s better to just print a warning and exit successfully. Try not to use scripts to do what npm can do for you. Read through package.json to see all the things that you can specify and enable by simply describing your package appropriately. In general, this will lead to a more robust and consistent state. Inspect the env to determine where to put things. For instance, if the npm_config_binroot environment variable is set to /home/user/bin, then don’t try to install executables into /usr/local/bin. The user probably set it up that way for a reason. Don’t prefix your script commands with “sudo”. If root permissions are required for some reason, then it’ll fail with that error, and the user will sudo the npm command in question. Don’t use install. Use a .gyp file for compilation, and prepublish for anything else. You should almost never have to explicitly set a preinstall or install script. If you are doing this, please consider if there is another option. The only valid use of install or preinstall scripts is for compilation which must be done on the target architecture."
msgstr ""

#: ../../source/cli/scripts.rst:178
msgid ":doc:`../misc/developers`"
msgstr ""

#: ../../source/cli/search.rst:2
msgid "npm search"
msgstr ""

#: ../../source/cli/search.rst:11
msgid "Search for packages"
msgstr ""

#: ../../source/cli/search.rst:19
#: ../../source/cli/search.rst:23
#: ../../source/cli/search.rst:27
msgid "search alias"
msgstr ""

#: ../../source/cli/search.rst:32
msgid "Search the registry for packages matching the search terms. npm search performs a linear, incremental, lexically-ordered search through package metadata for all files in the registry. If color is enabled, it will further highlight the matches in the results."
msgstr ""

#: ../../source/cli/search.rst:34
msgid "Additionally, using the --searchopts and --searchexclude options paired with more search terms will respectively include and exclude further patterns. The main difference between --searchopts and the standard search terms is that the former does not highlight results in the output and can be used for more fine-grained filtering. Additionally, both of these can be added to .npmrc for default search filtering behavior."
msgstr ""

#: ../../source/cli/search.rst:36
msgid "Search also allows targeting of maintainers in search results, by prefixing their npm username with =."
msgstr ""

#: ../../source/cli/search.rst:38
msgid "If a term starts with /, then it’s interpreted as a regular expression and supports standard JavaScript RegExp syntax. A trailing / will be ignored in this case. (Note that many regular expression characters must be escaped or quoted in most shells.)"
msgstr ""

#: ../../source/cli/search.rst:40
msgid "A Note on caching"
msgstr ""

#: ../../source/cli/search.rst:45
msgid "description Default: true Type: Boolean Used as --no-description, disables search matching in package descriptions and suppresses display of that field in results."
msgstr ""

#: ../../source/cli/search.rst:50
msgid "json Default: false Type: Boolean Output search results as a JSON array."
msgstr ""

#: ../../source/cli/search.rst:55
msgid "parseable Default: false Type: Boolean Output search results as lines with tab-separated columns."
msgstr ""

#: ../../source/cli/search.rst:60
msgid "long Default: false Type: Boolean Display full package descriptions and other long text across multiple lines. When disabled (default) search results are truncated to fit neatly on a single line. Modules with extremely long names will fall on multiple lines."
msgstr ""

#: ../../source/cli/search.rst:65
msgid "searchopts Default: “” Type: String Space-separated options that are always passed to search."
msgstr ""

#: ../../source/cli/search.rst:70
msgid "searchexclude Default: “” Type: String Space-separated options that limit the results from search."
msgstr ""

#: ../../source/cli/search.rst:75
msgid "searchstaleness Default: 900 (15 minutes) Type: Number The age of the cache, in seconds, before another registry request is made."
msgstr ""

#: ../../source/cli/search.rst:80
msgid "registry Default: https://registry.npmjs.org/ Type: url Search the specified registry for modules. If you have configured npm to point to a different default registry, such as your internal private module repository, npm search will default to that registry when searching. Pass a different registry url such as the default above in order to override this setting."
msgstr ""

#: ../../source/cli/shrinkwrap.rst:2
msgid "npm shrinkwrap"
msgstr ""

#: ../../source/cli/shrinkwrap.rst:12
msgid "Lock down dependency versions for publication"
msgstr ""

#: ../../source/cli/shrinkwrap.rst:21
msgid "This command repurposes :ref:`package-lock.json` into a publishable :ref:`shrinkwrap.json` or simply creates a new one."
msgstr ""

#: ../../source/cli/shrinkwrap.rst:23
msgid "The file created and updated by this command will then take precedence over any other existing or future :ref:`package-lock.json` files."
msgstr ""

#: ../../source/cli/shrinkwrap.rst:25
msgid "For a detailed explanation of the design and purpose of package locks in npm, see :ref:`package-locks`."
msgstr ""

#: ../../source/cli/shrinkwrap.rst:34
msgid ":ref:`package-locks`"
msgstr ""

#: ../../source/cli/shrinkwrap.rst:35
msgid ":ref:`package-lock.json`"
msgstr ""

#: ../../source/cli/shrinkwrap.rst:36
msgid ":ref:`shrinkwrap.json`"
msgstr ""

#: ../../source/cli/star.rst:2
msgid "npm star"
msgstr ""

#: ../../source/cli/star.rst:11
msgid "Mark your favorite packages"
msgstr ""

#: ../../source/cli/star.rst:21
msgid "“Starring” a package means that you have some interest in it. It’s a vaguely positive way to show that you care."
msgstr ""

#: ../../source/cli/star.rst:23
msgid "“Unstarring” is the same thing, but in reverse."
msgstr ""

#: ../../source/cli/star.rst:25
msgid "It’s a boolean thing. Starring repeatedly has no additional effect."
msgstr ""

#: ../../source/cli/stars.rst:2
msgid "npm stars"
msgstr ""

#: ../../source/cli/stars.rst:11
msgid "View packages marked as favorites"
msgstr ""

#: ../../source/cli/stars.rst:20
msgid "If you have starred a lot of neat things and want to find them again quickly this command lets you do just that."
msgstr ""

#: ../../source/cli/stars.rst:22
msgid "You may also want to see your friend’s favorite packages, in this case you will most certainly enjoy this command."
msgstr ""

#: ../../source/cli/stars.rst:27
msgid ":option:`npm star`"
msgstr ""

#: ../../source/cli/start.rst:2
msgid "npm start"
msgstr ""

#: ../../source/cli/start.rst:11
msgid "Start a package"
msgstr ""

#: ../../source/cli/start.rst:20
msgid "This runs an arbitrary command specified in the package’s \"start\" property of its \"scripts\" object. If no \"start\" property is specified on the \"scripts\" object, it will run node server.js."
msgstr ""

#: ../../source/cli/start.rst:22
msgid "As of npm@2.0.0, you can use custom arguments when executing scripts. Refer to npm-run-script for more details."
msgstr ""

#: ../../source/cli/stop.rst:2
msgid "npm stop"
msgstr ""

#: ../../source/cli/stop.rst:11
msgid "Stop a package"
msgstr ""

#: ../../source/cli/stop.rst:20
msgid "This runs a package’s “stop” script, if one was provided."
msgstr ""

#: ../../source/cli/team.rst:2
msgid "npm team"
msgstr ""

#: ../../source/cli/team.rst:11
msgid "Manage organization teams and team memberships"
msgstr ""

#: ../../source/cli/team.rst:28
msgid "Used to manage teams in organizations, and change team memberships. Does not handle permissions for packages."
msgstr ""

#: ../../source/cli/team.rst:30
msgid "Teams must always be fully qualified with the organization/scope they belong to when operating on them, separated by a colon (:). That is, if you have a developers team on a foo organization, you must always refer to that team as foo:developers in these commands."
msgstr ""

#: ../../source/cli/team.rst:32
msgid "create / destroy: Create a new team, or destroy an existing one."
msgstr ""

#: ../../source/cli/team.rst:34
msgid "add / rm: Add a user to an existing team, or remove a user from a team they belong to."
msgstr ""

#: ../../source/cli/team.rst:36
msgid "ls: If performed on an organization name, will return a list of existing teams under that organization. If performed on a team, it will instead return a list of all users belonging to that particular team."
msgstr ""

#: ../../source/cli/team.rst:38
msgid "edit: Edit a current team."
msgstr ""

#: ../../source/cli/team.rst:43
msgid "npm team always operates directly on the current registry, configurable from the command line using --registry=<registry url>."
msgstr ""

#: ../../source/cli/team.rst:45
msgid "In order to create teams and manage team membership, you must be a team admin under the given organization. Listing teams and team memberships may be done by any member of the organizations."
msgstr ""

#: ../../source/cli/team.rst:47
msgid "Organization creation and management of team admins and organization members is done through the website, not the npm CLI."
msgstr ""

#: ../../source/cli/team.rst:49
msgid "To use teams to manage permissions on packages belonging to your organization, use the npm access command to grant or revoke the appropriate permissions."
msgstr ""

#: ../../source/cli/team.rst:54
msgid ":option:`npm access`"
msgstr ""

#: ../../source/cli/test.rst:2
msgid "npm test"
msgstr ""

#: ../../source/cli/test.rst:11
msgid "Test a package"
msgstr ""

#: ../../source/cli/test.rst:19
#: ../../source/cli/test.rst:23
msgid "test alias"
msgstr ""

#: ../../source/cli/test.rst:28
msgid "This runs a package’s “test” script, if one was provided."
msgstr ""

#: ../../source/cli/token.rst:2
msgid "npm token"
msgstr ""

#: ../../source/cli/token.rst:12
msgid "Manage your authentication tokens"
msgstr ""

#: ../../source/cli/token.rst:23
msgid "This lets you list, create and revoke authentication tokens."
msgstr ""

#: ../../source/cli/token.rst:25
msgid "npm token list: Shows a table of all active authentication tokens. You can request this as JSON with --json or tab-separated values with --parseable."
msgstr ""

#: ../../source/cli/token.rst:45
msgid "npm token create [--read-only] [--cidr=<cidr-ranges>]: Create a new authentication token. It can be --read-only or accept a list of CIDR ranges to limit use of this token to. This will prompt you for your password, and, if you have two-factor authentication enabled, an otp."
msgstr ""

#: ../../source/cli/token.rst:48
msgid "token"
msgstr ""

#: ../../source/cli/token.rst:48
msgid "a73c9572-f1b9-8983-983d-ba3ac3cc913d"
msgstr ""

#: ../../source/cli/token.rst:50
msgid "cidr_whitelist"
msgstr ""

#: ../../source/cli/token.rst:52
msgid "readonly"
msgstr ""

#: ../../source/cli/token.rst:54
msgid "created"
msgstr ""

#: ../../source/cli/token.rst:54
msgid "2017-10-02T07:52:24.838Z"
msgstr ""

#: ../../source/cli/token.rst:57
msgid "npm token revoke <token|id>: This removes an authentication token, making it immediately unusable. This can accept both complete tokens (as you get back from npm token create and will find in your .npmrc) and ids as seen in the npm token list output. This will NOT accept the truncated token found in npm token list output."
msgstr ""

#: ../../source/cli/uninstall.rst:2
msgid "npm uninstall"
msgstr ""

#: ../../source/cli/uninstall.rst:11
msgid "Remove a package"
msgstr ""

#: ../../source/cli/uninstall.rst:19
#: ../../source/cli/uninstall.rst:23
#: ../../source/cli/uninstall.rst:27
#: ../../source/cli/uninstall.rst:31
#: ../../source/cli/uninstall.rst:35
msgid "uninstall alias"
msgstr ""

#: ../../source/cli/uninstall.rst:40
msgid "This uninstalls a package, completely removing everything npm installed on its behalf."
msgstr ""

#: ../../source/cli/uninstall.rst:42
msgid "Example:"
msgstr ""

#: ../../source/cli/uninstall.rst:44
msgid "npm uninstall sax In global mode (ie, with -g or --global appended to the command), it uninstalls the current package context as a global package."
msgstr ""

#: ../../source/cli/uninstall.rst:47
msgid "npm uninstall takes 3 exclusive, optional flags which save or update the package version in your main package.json:"
msgstr ""

#: ../../source/cli/uninstall.rst:49
msgid "-S, --save: Package will be removed from your dependencies."
msgstr ""

#: ../../source/cli/uninstall.rst:51
msgid "-D, --save-dev: Package will be removed from your devDependencies."
msgstr ""

#: ../../source/cli/uninstall.rst:53
msgid "-O, --save-optional: Package will be removed from your optionalDependencies."
msgstr ""

#: ../../source/cli/uninstall.rst:55
msgid "--no-save: Package will not be removed from your package.json file."
msgstr ""

#: ../../source/cli/uninstall.rst:57
msgid "Further, if you have an npm-shrinkwrap.json then it will be updated as well."
msgstr ""

#: ../../source/cli/uninstall.rst:59
msgid "Scope is optional and follows the usual rules for npm-scope."
msgstr ""

#: ../../source/cli/uninstall.rst:61
msgid "Examples:"
msgstr ""

#: ../../source/cli/uninstall.rst:63
msgid "npm uninstall sax --save npm uninstall @myorg/privatepackage --save npm uninstall node-tap --save-dev npm uninstall dtrace-provider --save-optional npm uninstall lodash --no-save"
msgstr ""

#: ../../source/cli/unpublish.rst:2
msgid "npm unpublish"
msgstr ""

#: ../../source/cli/unpublish.rst:12
msgid "Remove a package from the registry"
msgstr ""

#: ../../source/cli/unpublish.rst:19
msgid "WARNING"
msgstr ""

#: ../../source/cli/unpublish.rst:21
msgid "It is generally considered bad behavior to remove versions of a library that others are depending on!"
msgstr ""

#: ../../source/cli/unpublish.rst:23
msgid "Consider using the deprecate command instead, if your intent is to encourage users to upgrade."
msgstr ""

#: ../../source/cli/unpublish.rst:25
msgid "There is plenty of room on the registry."
msgstr ""

#: ../../source/cli/unpublish.rst:30
msgid "This removes a package version from the registry, deleting its entry and removing the tarball."
msgstr ""

#: ../../source/cli/unpublish.rst:32
msgid "If no version is specified, or if all versions are removed then the root package entry is removed from the registry entirely."
msgstr ""

#: ../../source/cli/unpublish.rst:34
msgid "Even if a package version is unpublished, that specific name and version combination can never be reused. In order to publish the package again, a new version number must be used. Additionally, new versions of packages with every version unpublished may not be republished until 24 hours have passed."
msgstr ""

#: ../../source/cli/unpublish.rst:36
msgid "With the default registry (registry.npmjs.org), unpublish is only allowed with versions published in the last 72 hours. If you are trying to unpublish a version published longer ago than that, contact support@npmjs.com."
msgstr ""

#: ../../source/cli/unpublish.rst:38
msgid "The scope is optional and follows the usual rules for npm-scope."
msgstr ""

#: ../../source/cli/update.rst:2
msgid "npm update"
msgstr ""

#: ../../source/cli/update.rst:12
msgid "Update a package"
msgstr ""

#: ../../source/cli/update.rst:20
#: ../../source/cli/update.rst:24
msgid "update alias"
msgstr ""

#: ../../source/cli/update.rst:29
msgid "This command will update all the packages listed to the latest version (specified by the tag config), respecting semver."
msgstr ""

#: ../../source/cli/update.rst:31
msgid "It will also install missing packages. As with all commands that install packages, the --dev flag will cause devDependencies to be processed as well."
msgstr ""

#: ../../source/cli/update.rst:33
msgid "If the -g flag is specified, this command will update globally installed packages."
msgstr ""

#: ../../source/cli/update.rst:35
msgid "If no package name is specified, all packages in the specified location (global or local) will be updated."
msgstr ""

#: ../../source/cli/update.rst:37
msgid "As of npm@2.6.1, the npm update will only inspect top-level packages. Prior versions of npm would also recursively inspect all dependencies. To get the old behavior, use npm --depth 9999 update."
msgstr ""

#: ../../source/cli/update.rst:39
msgid "As of npm@5.0.0, the npm update will change package.json to save the new version as the minimum required dependency. To get the old behavior, use npm update --no-save."
msgstr ""

#: ../../source/cli/update.rst:44
msgid "IMPORTANT VERSION NOTE: these examples assume npm@2.6.1 or later. For older versions of npm, you must specify --depth 0 to get the behavior described below."
msgstr ""

#: ../../source/cli/update.rst:46
msgid "For the examples below, assume that the current package is app and it depends on dependencies, dep1 (dep2, .. etc.). The published versions of dep1 are:"
msgstr ""

#: ../../source/cli/update.rst:66
msgid "Caret Dependencies"
msgstr ""

#: ../../source/cli/update.rst:68
msgid "If app’s package.json contains:"
msgstr ""

#: ../../source/cli/update.rst:70
#: ../../source/cli/update.rst:80
#: ../../source/cli/update.rst:88
#: ../../source/cli/update.rst:95
msgid "\"dependencies\": {"
msgstr ""

#: ../../source/cli/update.rst:71
msgid "\"dep1\": \"^1.1.1\""
msgstr ""

#: ../../source/cli/update.rst:72
msgid "} Then npm update will install dep1@1.2.2, because 1.2.2 is latest and 1.2.2 satisfies ^1.1.1."
msgstr ""

#: ../../source/cli/update.rst:76
msgid "Tilde Dependencies"
msgstr ""

#: ../../source/cli/update.rst:78
msgid "However, if app’s package.json contains:"
msgstr ""

#: ../../source/cli/update.rst:81
msgid "\"dep1\": \"~1.1.1\""
msgstr ""

#: ../../source/cli/update.rst:82
msgid "} In this case, running npm update will install dep1@1.1.2. Even though the latest tag points to 1.2.2, this version does not satisfy ~1.1.1, which is equivalent to >=1.1.1 <1.2.0. So the highest-sorting version that satisfies ~1.1.1 is used, which is 1.1.2."
msgstr ""

#: ../../source/cli/update.rst:85
msgid "Caret Dependencies below 1.0.0 Suppose app has a caret dependency on a version below 1.0.0, for example:"
msgstr ""

#: ../../source/cli/update.rst:89
msgid "\"dep1\": \"^0.2.0\""
msgstr ""

#: ../../source/cli/update.rst:90
msgid "} npm update will install dep1@0.2.0, because there are no other versions which satisfy ^0.2.0."
msgstr ""

#: ../../source/cli/update.rst:93
msgid "If the dependence were on ^0.4.0:"
msgstr ""

#: ../../source/cli/update.rst:96
msgid "\"dep1\": \"^0.4.0\""
msgstr ""

#: ../../source/cli/update.rst:97
msgid "} Then npm update will install dep1@0.4.1, because that is the highest-sorting version that satisfies ^0.4.0 (>= 0.4.0 <0.5.0)"
msgstr ""

#: ../../source/cli/update.rst:101
msgid "Updating Globally-Installed Packages"
msgstr ""

#: ../../source/cli/update.rst:103
msgid "npm update -g will apply the update action to each globally installed package that is outdated – that is, has a version that is different from latest."
msgstr ""

#: ../../source/cli/update.rst:105
msgid "NOTE: If a package has been upgraded to a version newer than latest, it will be downgraded."
msgstr ""

#: ../../source/cli/version.rst:2
msgid "npm version"
msgstr ""

#: ../../source/cli/version.rst:11
msgid "Bump a package version"
msgstr ""

#: ../../source/cli/version.rst:24
msgid "Run this in a package directory to bump the version and write the new data back to package.json, package-lock.json, and, if present, npm-shrinkwrap.json."
msgstr ""

#: ../../source/cli/version.rst:26
msgid "The newversion argument should be a valid semver string, a valid second argument to semver.inc (one of patch, minor, major, prepatch, preminor, premajor, prerelease), or from-git. In the second case, the existing version will be incremented by 1 in the specified field. from-git will try to read the latest git tag, and use that as the new npm version."
msgstr ""

#: ../../source/cli/version.rst:28
msgid "If run in a git repo, it will also create a version commit and tag. This behavior is controlled by git-tag-version (see below), and can be disabled on the command line by running npm --no-git-tag-version version. It will fail if the working directory is not clean, unless the -f or --force flag is set."
msgstr ""

#: ../../source/cli/version.rst:30
msgid "If supplied with -m or --message config option, npm will use it as a commit message when creating a version commit. If the message config contains %s then that will be replaced with the resulting version number. For example:"
msgstr ""

#: ../../source/cli/version.rst:32
msgid "npm version patch -m \"Upgrade to %s for reasons\" If the sign-git-tag config is set, then the tag will be signed using the -s flag to git. Note that you must have a default GPG key set up in your git config for this to work properly. For example:"
msgstr ""

#: ../../source/cli/version.rst:35
msgid "$ npm config set sign-git-tag true $ npm version patch"
msgstr ""

#: ../../source/cli/version.rst:38
msgid "You need a passphrase to unlock the secret key for user: \"isaacs (http://blog.izs.me/) <i@izs.me>\" 2048-bit RSA key, ID 6C481CF6, created 2010-08-31"
msgstr ""

#: ../../source/cli/version.rst:42
msgid "Enter passphrase: If preversion, version, or postversion are in the scripts property of the package.json, they will be executed as part of running npm version."
msgstr ""

#: ../../source/cli/version.rst:45
msgid "The exact order of execution is as follows:"
msgstr ""

#: ../../source/cli/version.rst:47
msgid "Check to make sure the git working directory is clean before we get started. Your scripts may add files to the commit in future steps. This step is skipped if the --force flag is set. Run the preversion script. These scripts have access to the old version in package.json. A typical use would be running your full test suite before deploying. Any files you want added to the commit should be explicitly added using git add. Bump version in package.json as requested (patch, minor, major, etc). Run the version script. These scripts have access to the new version in package.json (so they can incorporate it into file headers in generated files for example). Again, scripts should explicitly add generated files to the commit using git add. Commit and tag. Run the postversion script. Use it to clean up the file system or automatically push the commit and/or tag. Take the following example:"
msgstr ""

#: ../../source/cli/version.rst:57
msgid "\"scripts\": {"
msgstr ""

#: ../../source/cli/version.rst:56
msgid "\"preversion\": \"npm test\", \"version\": \"npm run build && git add -A dist\", \"postversion\": \"git push && git push --tags && rm -rf build/temp\""
msgstr ""

#: ../../source/cli/version.rst:59
msgid "} This runs all your tests, and proceeds only if they pass. Then runs your build script, and adds everything in the dist directory to the commit. After the commit, it pushes the new commit and tag up to the server, and deletes the build/temp directory."
msgstr ""

#: ../../source/cli/version.rst:65
msgid "allow-same-version Default: false Type: Boolean Prevents throwing an error when npm version is used to set the new version to the same value as the current version."
msgstr ""

#: ../../source/cli/version.rst:70
msgid "git-tag-version Default: true Type: Boolean Commit and tag the version change."
msgstr ""

#: ../../source/cli/version.rst:75
msgid "commit-hooks Default: true Type: Boolean Run git commit hooks when committing the version change."
msgstr ""

#: ../../source/cli/version.rst:80
msgid "sign-git-tag Default: false Type: Boolean Pass the -s flag to git to sign the tag."
msgstr ""

#: ../../source/cli/version.rst:85
msgid "Note that you must have a default GPG key set up in your git config for this to work properly."
msgstr ""

#: ../../source/cli/version.rst:90
msgid ":option:`npm init`"
msgstr ""

#: ../../source/cli/version.rst:94
msgid ":ref:`semver`"
msgstr ""

#: ../../source/cli/view.rst:2
msgid "npm view"
msgstr ""

#: ../../source/cli/view.rst:11
msgid "View registry info"
msgstr ""

#: ../../source/cli/view.rst:19
#: ../../source/cli/view.rst:23
#: ../../source/cli/view.rst:27
msgid "view alias"
msgstr ""

#: ../../source/cli/view.rst:32
msgid "This command shows data about a package and prints it to the stream referenced by the outfd config, which defaults to stdout."
msgstr ""

#: ../../source/cli/view.rst:34
msgid "To show the package registry entry for the connect package, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:36
msgid "npm view connect The default version is “latest” if unspecified."
msgstr ""

#: ../../source/cli/view.rst:39
msgid "Field names can be specified after the package descriptor. For example, to show the dependencies of the ronn package at version 0.3.5, you could do the following:"
msgstr ""

#: ../../source/cli/view.rst:41
msgid "npm view ronn@0.3.5 dependencies You can view child fields by separating them with a period. To view the git repository URL for the latest version of npm, you could do this:"
msgstr ""

#: ../../source/cli/view.rst:44
msgid "npm view npm repository.url This makes it easy to view information about a dependency with a bit of shell scripting. For example, to view all the data about the version of opts that ronn depends on, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:47
msgid "npm view opts@$(npm view ronn dependencies.opts) For fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get all the contributor names for the “express” project, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:50
msgid "npm view express contributors.email You may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the first contributor in the list, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:53
msgid "npm view express contributors[0].email Multiple fields may be specified, and will be printed one after another. For example, to get all the contributor names and email addresses, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:56
msgid "npm view express contributors.name contributors.email “Person” fields are shown as a string if they would be shown as an object. So, for example, this will show the list of npm contributors in the shortened string format. (See package.json for more on this.)"
msgstr ""

#: ../../source/cli/view.rst:59
msgid "npm view npm contributors If a version range is provided, then data will be printed for every matching version of the package. This will show which version of jsdom was required by each matching version of yui3:"
msgstr ""

#: ../../source/cli/view.rst:62
msgid "npm view yui3@'>0.5.4' dependencies.jsdom To show the connect package version history, you can do this:"
msgstr ""

#: ../../source/cli/view.rst:65
msgid "npm view connect versions"
msgstr ""

#: ../../source/cli/view.rst:68
msgid "OUTPUT"
msgstr ""

#: ../../source/cli/view.rst:70
msgid "If only a single string field for a single version is output, then it will not be colorized or quoted, so as to enable piping the output to another command. If the field is an object, it will be output as a JavaScript object literal."
msgstr ""

#: ../../source/cli/view.rst:72
msgid "If the –json flag is given, the outputted fields will be JSON."
msgstr ""

#: ../../source/cli/view.rst:74
msgid "If the version range matches multiple versions, than each printed value will be prefixed with the version it applies to."
msgstr ""

#: ../../source/cli/view.rst:76
msgid "If multiple fields are requested, than each of them are prefixed with the field name."
msgstr ""

#: ../../source/cli/view.rst:81
msgid ":option:`npm search`"
msgstr ""

#: ../../source/cli/whoami.rst:2
msgid "npm whoami"
msgstr ""

#: ../../source/cli/whoami.rst:12
msgid "Display npm username"
msgstr ""

#: ../../source/cli/whoami.rst:21
msgid "Print the username config to standard output."
msgstr ""

